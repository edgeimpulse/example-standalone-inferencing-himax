/* Generated by Edge Impulse
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/
// Generated on: 17.03.2021 10:51:16

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/kernels/micro_ops.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

namespace {

constexpr int kTensorArenaSize = 6816;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#if defined (__GNUC__)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".bss.tensor_arena")));
#else
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#endif
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[17];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[8];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,637 } };
const TfArray<1, float> quant0_scale = { 1, { 0.045633796602487564, } };
const TfArray<1, int> quant0_zero = { 1, { -4 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(8) int32_t tensor_data1[2] = { -1, 832, };
const TfArray<1, int> tensor_dimension1 = { 1, { 2 } };
const ALIGN(8) int32_t tensor_data2[8] = { -4772, -3080, -4565, -2006, -7914, -3853, -3969, -8284, };
const TfArray<1, int> tensor_dimension2 = { 1, { 8 } };
const TfArray<8, float> quant2_scale = { 8, { 0.00011516312224557623, 7.5064213888254017e-05, 0.00012947697541676462, 0.00012088997027603909, 0.00011893340706592426, 0.00011110883497167379, 0.00010989380825776607, 0.00010817786824190989, } };
const TfArray<8, int> quant2_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(8) int32_t tensor_data3[16] = { 53, -3119, -5667, -2013, -2681, -10534, -5015, -12596, -5588, -11813, 2952, -5102, -6438, -5296, 8784, -2866, };
const TfArray<1, int> tensor_dimension3 = { 1, { 16 } };
const TfArray<16, float> quant3_scale = { 16, { 7.8730619861744344e-05, 0.00010571043821983039, 9.1010835603810847e-05, 9.0659814304672182e-05, 0.00010109454888151959, 8.6767642642371356e-05, 8.6531195847783238e-05, 0.0001048501580953598, 9.9263488664291799e-05, 0.0001020586205413565, 0.00010175044008065015, 0.00010024585935752839, 3.4717868402367458e-05, 3.2059677323559299e-05, 8.7880107457749546e-05, 7.8490513260476291e-05, } };
const TfArray<16, int> quant3_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(8) int32_t tensor_data4[3] = { -3196, 5183, -2560, };
const TfArray<1, int> tensor_dimension4 = { 1, { 3 } };
const TfArray<1, float> quant4_scale = { 1, { 0.00024062934971880168, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(8) int32_t tensor_data5[4] = { 1, 49, 13, 1, };
const TfArray<1, int> tensor_dimension5 = { 1, { 4 } };
const ALIGN(8) int8_t tensor_data6[3*832] = { 
  -61, 3, 48, -33, -58, 6, 53, 38, -47, -56, 17, 43, 0, 9, -9, -5, -12, 28, -38, -37, -56, 8, -36, -42, 31, 41, -48, 18, -2, 6, -40, -7, 44, -23, 9, -46, -23, -94, -38, 0, 17, -16, -38, 27, -1, -10, -7, -1, 34, -1, -7, -24, 4, -22, 24, 7, -34, 8, -16, -37, -4, -10, 1, -38, -30, 19, 20, -38, 85, -68, 28, 76, -38, -30, 26, -45, -1, -6, 3, -8, 5, -7, -30, -33, -58, -15, -8, 3, 38, 55, -44, 37, 6, 5, -77, 3, 65, -61, -34, -30, -46, -80, 28, 9, 7, -26, 8, 25, 5, 6, -17, -13, 9, 2, -43, 13, -74, -31, 0, 3, -14, 11, -35, -31, -7, 7, -2, 27, -25, -16, 5, -34, 13, -39, 7, 54, -53, -80, 40, -44, 4, -7, 6, 13, -9, 31, -5, -3, -22, -27, -36, 37, 45, 59, 13, 30, -7, -1, -62, -1, 59, -53, 4, -29, -26, -11, -10, 3, 6, -9, -52, 19, 1, -2, -8, -16, -17, -25, -32, 10, -23, -66, 66, -4, -4, -9, 14, -38, 3, -4, -5, -27, -18, -28, 5, -12, -11, 1, 27, 71, -73, -25, -11, -51, -7, 3, 7, 4, -19, -49, -10, 13, 33, -8, -14, -6, 38, 58, 20, 17, 0, -9, -19, -5, 53, -15, -22, -11, 16, -18, 12, -8, -24, -1, 18, 9, 7, -2, 2, -5, 52, 10, -47, 54, -89, -62, -19, -7, -2, -43, -2, -3, -11, 2, 4, -15, -17, -30, 14, -8, 40, -1, 14, 61, -53, -39, 38, -28, 6, 5, 21, -23, -11, -13, 14, -7, -45, -49, -56, 3, 48, 61, -22, 7, 2, -8, 14, -14, 32, -33, -7, 1, -34, -15, -48, 2, 14, -73, 15, -23, -3, -9, 2, -3, -52, -11, -62, 7, 5, -38, 15, 2, -44, -19, -32, -39, 0, 3, 34, -11, -9, -31, 20, 17, -41, -15, 23, 77, -82, -61, -6, -23, -4, -4, 52, -21, -17, 4, 1, 14, -27, -22, 21, 3, 52, 55, -7, 20, 1, -7, -62, -13, 34, -7, 7, 16, -10, -39, -40, -12, 20, -15, 5, -30, -9, 3, -10, 3, -52, 25, -29, 47, -32, -16, -21, 6, -33, -56, 40, -7, 5, 7, 18, 6, -25, -18, 32, 3, 79, -66, 32, 84, -59, -27, 15, -37, -4, 4, 42, -1, -12, -4, 7, 26, 9, -41, -36, -21, 44, 72, -13, 11, 0, 1, -35, -10, 21, 19, -28, 9, -23, -4, 3, 1, 20, -52, -11, -39, 4, 4, 8, 9, -74, -31, 2, -20, -48, -23, -66, -4, -7, -68, -49, -36, 3, 5, -22, -15, -29, -29, 8, 1, -18, -23, 25, 66, -45, -55, 6, -48, 4, -2, 58, -21, -2, 14, 10, 32, 18, -28, -57, -17, 46, 74, 14, 8, -1, -1, -27, -9, 38, -11, -16, 7, -15, -20, -28, 1, -23, -51, -2, 1, -4, -8, -13, -16, -61, -26, 2, 28, 31, -18, 9, -4, -3, -21, -17, 4, -6, 5, -53, -14, -31, -33, 14, 27, 87, -39, 5, 76, -59, -15, 10, -47, -9, -2, 37, 7, 35, -9, 21, -17, -29, -19, -17, -32, 49, 50, -18, 29, -8, -2, -21, -3, 24, -49, -17, -13, -7, -41, -16, -8, 5, -10, 4, 12, -2, -1, -8, -16, -70, 54, -100, 18, -6, 27, -4, 8, 24, -72, -31, -18, -8, 3, -6, -14, -39, -63, 20, 3, -26, -15, 7, 84, -127, -67, -11, -53, -4, -2, 48, -24, 0, 26, 14, -4, -41, -35, -33, -15, 34, 70, -15, 26, 2, 2, 10, 5, 19, -11, 15, -10, 31, -22, -16, 2, -4, -36, 8, -7, 6, -3, -45, -12, -16, -60, -85, 29, -32, -6, -16, -8, -55, -46, 2, -3, 7, -2, -8, -35, -35, -72, 17, 2, -25, -5, 7, 34, -42, -12, -17, 4, 2, 6, 29, 13, -1, -34, 11, -2, -63, -13, -65, 6, 18, 47, -23, 12, -3, 7, -36, 10, 32, 17, 36, -14, 7, -6, 66, -7, 6, -49, -21, -26, 1, 3, 5, -5, -33, 4, -64, 23, 6, -31, 0, -5, -8, -42, 13, -35, -9, -5, 39, -48, -29, -80, 13, -12, -58, -51, 17, 56, -12, -13, 7, -1, 4, 4, 19, 12, 16, 80, 12, -28, 2, 26, -28, -18, 54, 65, -44, 24, -4, 7, 4, 22, 42, -53, -12, -3, -20, -22, 4, -13, -37, -4, -30, 16, 3, 7, 12, 17, 8, 56, -5, 8, -1, -34, -54, 5, -22, -55, -55, -45, 8, 2, -25, 12, -73, -23, 28, -75, 10, -12, 46, 8, -49, -32, -8, -55, -5, -9, 9, 26, -41, -4, 18, -11, -27, -25, 15, -78, 18, 61, 0, -5, 2, -3, -25, -19, 32, 9, -25, 15, -47, -32, -7, -19, 31, -24, 21, 36, -10, -20, 20, -64, -36, -31, -26, -63, 13, 29, 7, -5, 12, -12, -10, -70, 5, -4, -38, -41, 
  14, 26, -35, 17, 23, -15, -44, -13, 14, 26, 11, -23, 7, -5, -52, -3, -18, 29, -4, 0, -41, 11, 46, 1, -21, -74, -37, -7, 9, 1, 27, 16, 4, 77, 16, 18, 12, 69, 43, 14, -28, 29, 8, 4, -3, 12, 3, 15, 5, -8, 67, 4, -16, 6, -16, -4, -5, -3, 10, 27, -1, 3, 10, 18, 17, -1, -38, 12, -36, 11, -30, -67, 13, 11, 42, 18, 2, -2, -79, -6, -27, 36, 13, 4, -29, 21, 5, 11, -18, -29, 34, -7, 1, 5, 70, -11, -39, 30, 25, 10, -7, 9, -5, 17, -1, 48, -14, -29, 4, -7, -30, 1, -32, 75, -15, -5, -65, 6, -2, 2, -36, -16, 2, -2, -6, -9, -8, -34, 26, 25, -49, 28, 41, 14, -47, -67, 23, 9, 18, 24, 5, -5, -75, 4, -13, 3, 16, 2, -1, -5, 46, -10, -11, -50, -36, -2, 4, 1, 33, 21, -22, 15, 25, 4, 13, -20, 35, -54, 1, -3, 22, -4, 8, -3, -26, 9, -12, 19, 6, 5, -26, 22, -57, 4, -2, -13, -28, 36, 2, 0, -25, 11, 16, -2, -41, 20, 26, -21, -46, -110, 20, -17, 34, -2, 1, -6, -67, -22, -8, 17, -6, 17, -48, -29, -2, 16, -19, -15, -21, -17, -3, -2, 24, -13, -19, 12, -13, 7, 29, -17, 11, 5, -15, -27, -7, -18, -2, 1, -32, 20, -18, 21, 15, -27, 14, 38, 8, 5, -21, 58, -4, -25, 7, 10, 7, 4, 11, 4, -40, 25, -24, 15, -23, -47, 12, 6, 22, 0, 1, 3, -50, 3, -7, -1, 18, 13, 31, -29, 30, 15, -39, -86, 20, 5, 5, 11, -12, -7, -15, -10, -37, -2, 7, -36, 22, -10, -22, 15, -3, -10, -3, -6, -13, 0, 28, -5, -6, 49, 2, -20, 1, 6, -7, 13, 32, 3, -9, -4, -21, 14, -5, 12, -69, 7, -9, 8, -19, -95, 23, 24, 27, -6, 14, 5, -48, -5, -24, 19, -14, 7, 3, -15, -9, 6, -51, -65, 13, -2, 5, 1, 33, 28, -14, -1, -36, 10, 35, 0, 36, -2, -20, 7, -3, 13, -7, -8, 5, 11, 32, -15, -17, -19, -57, -16, 18, -8, 32, -9, 38, -12, 0, 11, 19, 34, 15, 9, -64, 29, -71, 33, -65, -66, 23, -9, 17, -7, -7, -8, -50, -7, 7, -28, 6, 12, 3, 5, 25, 29, -36, -74, -4, -20, -8, 2, 65, 28, -30, 22, -2, -5, -41, -17, -11, -8, -17, 11, 17, 10, -5, 9, 17, 8, -2, -19, -46, 9, -15, -6, 32, -4, 28, -2, 81, 16, -8, 6, 25, 0, 26, -22, -46, 14, -17, 21, -36, -78, 26, 25, 13, 6, -6, 2, -73, 3, 4, -51, 0, -9, -43, 13, 39, -46, -30, -58, -21, 2, -4, 3, 36, 0, -29, 30, -37, -13, -15, 20, 32, 19, 14, 23, -4, 6, 6, -3, 67, 8, -6, 20, -10, -16, 14, -16, 28, -7, -2, -30, 12, -1, -5, -6, 37, -17, 4, -16, -46, 20, -37, 30, -10, -94, 12, -3, 2, 17, -1, 0, -52, 13, -21, 2, -24, 31, 57, -7, 5, 16, -45, -49, 1, -36, 4, 0, 27, 8, -27, 13, -11, 6, -12, 28, 4, -5, -5, -4, -51, -6, -3, 7, 51, 5, -8, -3, 35, 33, 14, -25, 5, -8, -1, 53, 59, -2, -9, -3, 33, 41, 10, -16, -63, 44, 8, 8, -31, -42, 50, -21, 14, -15, -7, 0, -91, 22, -17, -4, -18, 8, 34, 13, 8, -1, -32, -35, 27, -9, 2, -6, 53, -23, -39, 22, -17, 17, -34, -11, -2, 12, -6, -15, -17, 4, -5, -6, 37, 24, 20, 10, 38, -20, -23, -2, 20, 0, 10, 23, 20, 11, 0, 1, 2, 26, 13, -12, -33, 31, -1, 23, 4, -12, 25, -9, 20, 6, -5, -2, -65, -4, 22, 4, -42, 15, 34, -9, 24, 2, -18, -47, 27, 6, 10, -4, 69, -3, -23, 75, -10, 0, 21, -8, -23, -9, -9, -4, 9, 16, -3, -3, 35, -8, 18, 29, 6, -1, 18, -8, 32, -3, 20, -21, -4, 10, -7, -13, 19, -10, 19, 12, -7, 22, 53, 28, -8, -55, 30, 11, 32, 0, 6, -1, -56, -22, -6, -38, -45, 7, -76, -16, 35, -11, -36, -40, -12, -10, 9, 0, 47, 24, -16, 26, -1, -6, -1, 13, -9, -1, 13, 29, 16, -3, 1, -4, -4, -15, -9, -3, 21, -4, 0, -11, 50, -8, 38, 5, 2, 8, -1, 3, 15, 9, 44, -2, -42, 47, 19, 1, -20, 25, 40, 1, 29, -33, 3, 5, -25, -3, 17, 20, -42, 32, 23, 12, 22, 41, -12, -13, 0, 65, 7, 0, 37, 5, 7, 17, -11, 3, 30, -14, 16, -9, 1, -31, 4, 45, -8, 13, -22, -13, -13, 17, 69, -3, -18, 9, -55, -3, 44, -1, 51, 32, 0, 3, 27, 26, 
  19, -28, -13, 15, 24, 8, -19, -30, 10, 7, -46, -29, 4, -2, 47, 1, 8, -21, 34, 27, 59, -10, -3, 40, -21, -4, 46, -6, -1, -1, 10, -1, -42, -43, -5, 9, -12, 38, -17, -9, 3, -14, 27, -31, -6, -10, -1, -1, -41, -4, -52, 15, -10, 25, 6, -2, 23, 6, -6, -11, 0, -1, -4, 8, 17, 5, 14, 18, -50, 31, 2, -25, 6, 6, -72, 19, 2, -2, 47, 24, 20, -23, 23, 13, 65, -7, 8, -1, -15, -36, 10, -17, 4, -6, 11, 1, -31, 13, 20, 15, 43, 67, -2, -12, 1, -20, -8, 11, 4, 8, 28, 20, 2, -68, 35, -5, 81, 26, 10, 7, 27, 17, 22, 24, 14, 4, 16, 1, -7, -11, 30, -4, -67, 9, 10, -8, 16, 44, -25, 10, 3, 2, 41, -8, 5, -26, -15, 7, 19, 15, -9, -19, -11, -25, 14, -22, -1, 1, 13, -2, -44, 20, -21, 13, -13, 32, -15, 39, -3, 8, 14, -6, 9, 1, 47, 8, 24, -19, 15, -11, 24, 41, -9, -6, -2, 23, 0, -20, 1, -2, 26, 25, 3, 24, 19, -17, -31, 20, 16, -4, 18, 32, -10, 36, -3, -3, 48, 15, 17, 24, 15, -15, -6, 28, 29, -8, -15, -47, 12, -15, 2, 4, -3, 10, -29, 0, 27, 8, -41, 28, -9, 22, 22, 9, -12, 37, -6, -3, 19, -9, -24, -15, 21, -13, 40, 19, 5, -9, 14, -12, 1, 15, -1, -6, -8, 12, 9, 24, 27, -2, -47, 6, 8, -28, 39, 20, -22, 33, 4, -6, 15, 18, 15, 17, -27, -2, 1, 40, 4, -18, -11, -18, 6, -20, 0, 1, 5, 10, -7, 27, 45, -10, 30, 32, 14, 1, -10, 30, -10, 32, -3, 4, 23, 6, 6, 14, 49, -36, 3, 35, -14, 0, 41, 20, -5, 12, 2, -5, -5, -7, 6, 31, 16, -20, 18, 7, -6, -22, 31, 19, -19, 13, -6, -3, -10, 13, 20, -28, 18, -12, 22, 31, 4, -3, -10, -7, 6, -14, 2, -10, 20, -10, -21, 8, 26, -19, -8, 33, 5, -5, -2, -2, 7, 20, -7, -8, -6, -11, 25, 3, 34, -26, 53, 4, -11, -2, -9, 43, -58, 13, 1, -7, -22, -40, 3, 7, 27, -8, -43, 1, 16, -48, 16, 27, -14, 46, 2, 5, 12, 7, 20, 23, 9, -20, -8, 21, 25, -12, -1, -24, 12, -5, 1, 3, -34, -19, -3, -21, 30, -13, 38, 10, 4, -5, 7, 16, -9, 10, 3, 4, -24, -10, 58, 25, 35, 13, 10, 18, 22, -4, -22, 42, -43, 14, 10, -7, -2, 13, -6, 36, 20, -22, 28, -4, 3, -26, 14, 18, -23, 27, 5, 0, -10, 11, 6, 28, -3, -24, 10, 3, -5, 58, -7, -25, 8, -12, 7, 7, -22, 14, -9, -8, 42, -10, 18, 4, 1, -11, 2, 20, -3, -5, 10, 2, -44, 2, 39, 11, 9, -3, -28, 35, -23, 1, -7, 43, 17, 1, 6, 1, 0, 18, 8, 37, 34, -38, -29, 2, 0, -28, 28, 28, -18, 20, 6, 4, 5, -18, -1, -5, -3, -29, -38, 29, 13, 18, -5, -22, -6, 1, 4, 5, -7, 0, 13, 14, 29, 2, -18, -2, 28, 1, 0, 20, 35, -4, -2, -5, -31, 10, 40, -52, 21, -42, -20, -10, -8, -7, -17, 8, -22, 8, -2, -2, -30, -25, 8, 47, 28, -26, 0, 7, 8, -57, 10, 49, -8, 47, -1, -4, 35, 6, 8, -10, -2, -4, 8, 15, 14, 18, -8, -44, -9, -8, -2, -8, -55, 26, 17, -9, 1, -3, -2, 7, -1, -10, -4, 34, 23, 7, -6, -7, 16, -19, -7, 42, 25, 7, 34, 14, -2, 3, 33, 9, -15, -6, -9, 2, 0, -19, 14, 45, 18, -39, 24, -15, 1, -20, 5, -1, -9, -11, 2, -7, 34, -11, -14, 5, 21, -4, 16, 16, 32, -15, -2, -6, 11, -12, 0, 2, -35, -9, -4, -67, -22, 1, -10, 0, -39, -2, -7, 41, -4, 6, 5, 3, -25, 27, 1, -13, 41, -22, -17, 12, -24, 1, -14, 32, 5, 28, -1, -1, -36, 23, 13, 43, 5, -10, -21, -1, -6, -10, 0, 13, -25, 0, -1, -2, 33, -10, -2, -37, 21, 9, 54, 11, -2, 20, -15, -10, 30, -12, -8, -1, -32, -33, -17, 21, 5, 14, 14, 3, 17, 1, 7, -16, 9, -14, -1, -5, -23, -16, 12, -50, -17, 9, 16, 23, 0, -7, -13, 23, 45, 19, -8, -1, 19, -9, -8, 10, -11, 15, -20, 17, -32, -44, -19, 22, -10, 65, -9, 3, 28, -28, 9, -8, 3, -33, -2, 5, -14, -9, -22, -21, -3, -44, -1, -13, -10, 9, -39, -21, 20, -9, 4, 34, -19, 21, -26, 45, -16, -87, 7, 19, -9, 54, 44, 1, -37, 39, 8, -37, 39, 1, -57, 20, -35, 22, 1, -5, 5, -4, 
};
const TfArray<2, int> tensor_dimension6 = { 2, { 3,832 } };
const TfArray<1, float> quant6_scale = { 1, { 0.0097420699894428253, } };
const TfArray<1, int> quant6_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(8) int8_t tensor_data7[8*3*3*1] = { 
  /* [0][0][][] */ 11, 102, -74, 
  /* [0][1][][] */ -2, 127, -25, 
  /* [0][2][][] */ 5, 92, -9, 
  /* [1][0][][] */ -99, -127, 79, 
  /* [1][1][][] */ -104, -32, 60, 
  /* [1][2][][] */ -88, -107, 67, 
  /* [2][0][][] */ 97, -122, 20, 
  /* [2][1][][] */ 8, -42, 33, 
  /* [2][2][][] */ -127, 76, 9, 
  /* [3][0][][] */ 83, 62, -11, 
  /* [3][1][][] */ 127, 7, -4, 
  /* [3][2][][] */ 80, 38, 32, 
  /* [4][0][][] */ 101, 2, -36, 
  /* [4][1][][] */ 109, -18, -80, 
  /* [4][2][][] */ 58, -38, -127, 
  /* [5][0][][] */ -10, -38, -29, 
  /* [5][1][][] */ 119, 117, -3, 
  /* [5][2][][] */ -127, -110, 37, 
  /* [6][0][][] */ -101, -106, 11, 
  /* [6][1][][] */ -79, -40, 29, 
  /* [6][2][][] */ 70, 127, -17, 
  /* [7][0][][] */ -102, 16, -76, 
  /* [7][1][][] */ -123, 55, -56, 
  /* [7][2][][] */ -127, 65, -38, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 8,3,3,1 } };
const TfArray<8, float> quant7_scale = { 8, { 0.0025236366782337427, 0.0016449259128421545, 0.0028373044915497303, 0.0026491323951631784, 0.0026062570977956057, 0.0024347926955670118, 0.0024081671144813299, 0.0023705647327005863, } };
const TfArray<8, int> quant7_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(8) int8_t tensor_data8[16*3*3*8] = { 
  /* [0][0][][] */ -15,-18,15,23,14,13,-32,29, 5,5,-50,-86,-127,-21,6,61, 39,-103,-74,10,58,21,-9,72, 
  /* [0][1][][] */ 8,-38,35,-30,-18,-10,-4,4, -44,14,-9,-118,-99,-26,0,9, 46,-121,3,13,-9,0,3,63, 
  /* [0][2][][] */ 68,-43,5,-5,-12,-16,-11,1, 10,25,-19,-108,-83,-30,11,74, -10,-51,-29,54,-3,12,-10,51, 
  /* [1][0][][] */ -115,18,-64,-127,-39,0,9,-24, 56,-112,-46,38,-44,17,-93,-38, 60,-95,-43,18,27,-20,-42,9, 
  /* [1][1][][] */ -58,-14,-31,-4,-82,16,1,10, -3,-46,-46,4,-62,8,-92,-84, 3,-59,52,17,19,35,-76,27, 
  /* [1][2][][] */ -42,4,-10,-47,-85,-84,-45,-29, -77,-4,-17,-36,-112,-58,-26,-99, 42,-59,26,24,13,-40,-26,-25, 
  /* [2][0][][] */ 4,-82,-73,33,47,-80,-70,69, 38,-84,-92,49,-3,-91,-84,-40, 17,3,18,5,38,-34,-27,63, 
  /* [2][1][][] */ 31,-86,-97,73,-43,-58,-127,42, 12,-105,-71,-6,-6,-72,-79,-99, -22,-29,-25,-18,10,-70,-9,30, 
  /* [2][2][][] */ -1,-85,-57,19,-34,14,-61,-41, 32,-77,-100,49,42,-30,-95,-106, 21,-1,4,31,32,-8,-2,19, 
  /* [3][0][][] */ -127,-22,19,-44,-63,58,29,-38, -35,19,35,-40,-62,82,-20,27, 0,-6,-10,17,-12,51,24,-77, 
  /* [3][1][][] */ -39,-64,-33,-26,-84,9,-15,-8, -72,16,29,-60,-49,-9,31,17, -20,-8,-14,-7,-18,25,20,-66, 
  /* [3][2][][] */ -82,-74,-33,-49,-71,-11,-31,-99, 44,-40,73,34,45,-3,62,-5, 7,18,-8,14,10,3,8,18, 
  /* [4][0][][] */ 65,-25,75,-17,42,42,-17,-66, -16,-31,32,3,-55,-28,-19,10, 0,-46,-26,10,-25,127,-53,-105, 
  /* [4][1][][] */ -9,-61,31,-39,-80,-82,-75,-24, -81,-57,-64,-58,-51,-34,-35,-34, -109,52,-46,-87,-12,-46,-83,-8, 
  /* [4][2][][] */ -40,-48,-29,-38,-51,-85,-68,-91, -49,-62,-87,-1,-110,-84,-77,-118, 20,-72,41,-15,-63,-42,27,-85, 
  /* [5][0][][] */ 110,61,-9,-10,1,22,-69,61, -92,-1,12,-14,37,-34,-8,-23, -5,-37,-100,-12,-41,-64,-49,-36, 
  /* [5][1][][] */ 16,79,-43,-73,-87,-43,24,50, -127,54,3,2,63,-77,-51,-37, 30,-65,-41,-21,28,-66,-46,-15, 
  /* [5][2][][] */ -12,8,-50,-99,1,-8,17,69, -50,45,43,-56,55,-7,-37,-2, 3,-49,-23,-22,27,-16,-45,119, 
  /* [6][0][][] */ -57,37,-12,-50,-88,-5,32,-43, -13,-71,-45,-1,40,-28,12,-31, 4,-2,-68,-33,44,-39,13,-86, 
  /* [6][1][][] */ -127,3,3,-70,-69,49,20,-48, 12,-116,-60,15,5,71,-24,-56, -15,16,3,20,63,-38,-15,-76, 
  /* [6][2][][] */ -68,9,61,-84,19,-13,47,20, 36,-81,-41,19,14,-58,-31,-119, -37,31,-57,48,-46,-55,8,-98, 
  /* [7][0][][] */ -56,-54,-15,8,-86,7,-18,-3, -58,37,8,-93,-31,-28,11,-74, 40,-20,21,12,-35,-12,35,22, 
  /* [7][1][][] */ -58,-72,-63,-31,-44,-6,-53,-59, 4,-49,-46,-32,-7,-109,14,73, 19,-120,-12,-24,127,8,0,15, 
  /* [7][2][][] */ -59,-21,-34,-67,-38,-26,-73,-53, 31,-122,-93,19,38,-68,-72,36, -9,-52,-82,-46,-17,18,-120,6, 
  /* [8][0][][] */ -1,-41,-6,-38,-40,11,-126,54, 13,-28,-3,-6,17,-21,-3,64, 15,55,19,-127,-120,-16,-16,22, 
  /* [8][1][][] */ 2,2,21,-89,-16,-47,6,72, 1,-35,28,-5,6,-53,12,-12, 115,3,-28,-65,-76,-11,-20,42, 
  /* [8][2][][] */ -40,10,84,-99,-76,-121,26,25, 61,14,-32,19,-22,-59,-12,75, -26,-14,-59,13,4,-59,-5,2, 
  /* [9][0][][] */ 43,-110,-4,17,27,31,-40,21, -110,20,36,-95,-54,-29,9,69, 11,-3,14,-66,-7,-18,12,-32, 
  /* [9][1][][] */ -44,7,-83,-49,-1,12,-75,52, -64,8,59,-75,-62,-18,41,-15, 121,23,-87,-57,-59,-48,-63,16, 
  /* [9][2][][] */ -125,87,-22,-32,46,-14,13,-37, -28,19,30,43,-90,-64,21,42, 56,-16,-64,-51,-127,-68,-41,5, 
  /* [10][0][][] */ -67,10,16,-109,-99,-27,-6,-6, 41,-104,19,21,30,-3,-14,-3, -67,13,6,-27,-6,40,-29,-9, 
  /* [10][1][][] */ -18,-45,-9,-21,-84,-111,27,-105, 14,-93,21,8,-23,22,-94,-52, -49,27,2,-10,11,-23,2,-15, 
  /* [10][2][][] */ 11,-127,-15,17,3,6,-61,4, -65,-6,15,-70,-63,8,-67,17, 6,-44,16,18,-37,-18,7,-37, 
  /* [11][0][][] */ 9,57,-34,-2,58,-60,16,17, -45,-9,-47,-21,-32,-63,-61,21, 26,-87,-61,-1,42,-62,-127,-17, 
  /* [11][1][][] */ 17,1,-100,58,31,23,-13,-73, -56,-2,5,35,-11,-40,4,-27, 14,-43,-57,2,11,16,-12,-57, 
  /* [11][2][][] */ 36,-35,-76,-2,40,-11,59,-102, -69,3,43,-36,-9,1,-1,52, 48,-26,16,-8,-15,-3,-48,11, 
  /* [12][0][][] */ 7,-68,-76,-81,3,-44,-29,-74, -68,-41,-6,-37,-27,-75,-31,18, -21,38,-81,-59,-33,-45,-18,-21, 
  /* [12][1][][] */ -70,-15,-27,-19,-52,33,-45,-33, 18,-82,10,-86,-3,-42,-90,-36, 46,4,-95,-13,-17,-78,-127,19, 
  /* [12][2][][] */ -32,-105,37,-24,-40,4,-37,22, -30,-119,-56,-25,-49,-46,-76,-96, -55,-53,-39,-12,-57,-97,-99,-70, 
  /* [13][0][][] */ -45,-28,-62,16,-83,-90,-20,-75, -83,-75,-1,-50,16,-44,-83,-73, -46,-99,-37,24,-31,33,12,-44, 
  /* [13][1][][] */ -1,-38,-10,-35,-7,-31,25,5, -53,-27,-6,-73,-48,9,-55,5, 49,-127,-12,-88,-53,-29,10,1, 
  /* [13][2][][] */ -29,-27,-33,-48,-53,0,13,-25, -27,-35,-56,-61,30,-32,4,-84, -83,-34,3,-40,12,-49,-31,8, 
  /* [14][0][][] */ -127,14,-59,-108,-52,9,-2,-70, -68,10,-89,-86,-82,-122,-45,-55, -20,8,-32,-23,-85,-31,-62,-18, 
  /* [14][1][][] */ -69,-17,-17,-78,-70,-21,4,-29, -106,13,-81,-96,-105,-92,-17,-18, -44,-18,-71,-27,-49,-18,-5,-36, 
  /* [14][2][][] */ -75,-7,32,-79,-76,-14,-12,11, -75,25,-102,-96,-94,-55,-37,-28, -5,-23,19,-29,-38,-25,-29,20, 
  /* [15][0][][] */ -71,-3,-52,-53,-97,-50,32,-33, -118,23,-98,-68,14,93,19,-39, -75,-21,-4,-99,-87,-102,-46,-52, 
  /* [15][1][][] */ 2,-23,-56,-95,-127,-26,-22,-74, -32,-26,-81,-46,-21,-75,-98,38, -56,-49,-17,-64,-43,-65,-13,-32, 
  /* [15][2][][] */ -63,-13,-33,-29,-54,-42,-82,0, -24,-33,16,-71,-19,-22,-32,-48, -28,-110,-31,-18,-7,-84,-8,-41, 
};
const TfArray<4, int> tensor_dimension8 = { 4, { 16,3,3,8 } };
const TfArray<16, float> quant8_scale = { 16, { 0.005501763429492712, 0.0073871361091732979, 0.0063599152490496635, 0.0063353856094181538, 0.0070645739324390888, 0.0060633975081145763, 0.0060468744486570358, 0.0073270192369818687, 0.006936617661267519, 0.0071319439448416233, 0.007110408041626215, 0.0070052668452262878, 0.0024261143989861012, 0.0022403576876968145, 0.0061411373317241669, 0.0054849842563271523, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const TfArray<4, int> tensor_dimension9 = { 4, { 1,49,13,1 } };
const TfArray<1, float> quant9_scale = { 1, { 0.045633796602487564, } };
const TfArray<1, int> quant9_zero = { 1, { -4 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const TfArray<4, int> tensor_dimension10 = { 4, { 1,49,13,8 } };
const TfArray<1, float> quant10_scale = { 1, { 0.014310070313513279, } };
const TfArray<1, int> quant10_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const TfArray<4, int> tensor_dimension11 = { 4, { 1,25,7,8 } };
const TfArray<1, float> quant11_scale = { 1, { 0.014310070313513279, } };
const TfArray<1, int> quant11_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const TfArray<4, int> tensor_dimension12 = { 4, { 1,25,7,16 } };
const TfArray<1, float> quant12_scale = { 1, { 0.024700023233890533, } };
const TfArray<1, int> quant12_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<4, int> tensor_dimension13 = { 4, { 1,13,4,16 } };
const TfArray<1, float> quant13_scale = { 1, { 0.024700023233890533, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<2, int> tensor_dimension14 = { 2, { 1,832 } };
const TfArray<1, float> quant14_scale = { 1, { 0.024700023233890533, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<2, int> tensor_dimension15 = { 2, { 1,3 } };
const TfArray<1, float> quant15_scale = { 1, { 0.088251270353794098, } };
const TfArray<1, int> quant15_zero = { 1, { 13 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<2, int> tensor_dimension16 = { 2, { 1,3 } };
const TfArray<1, float> quant16_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,5 } };
const TfArray<1, int> outputs0 = { 1, { 9 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 9,7,2 } };
const TfArray<1, int> outputs1 = { 1, { 10 } };
const TfLitePoolParams opdata2 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs2 = { 1, { 10 } };
const TfArray<1, int> outputs2 = { 1, { 11 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 11,8,3 } };
const TfArray<1, int> outputs3 = { 1, { 12 } };
const TfLitePoolParams opdata4 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs4 = { 1, { 12 } };
const TfArray<1, int> outputs4 = { 1, { 13 } };
const TfLiteReshapeParams opdata5 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs5 = { 2, { 13,1 } };
const TfArray<1, int> outputs5 = { 1, { 14 } };
const TfLiteFullyConnectedParams opdata6 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs6 = { 3, { 14,6,4 } };
const TfArray<1, int> outputs6 = { 1, { 15 } };
const TfLiteSoftmaxParams opdata7 = { 1 };
const TfArray<1, int> inputs7 = { 1, { 15 } };
const TfArray<1, int> outputs7 = { 1, { 16 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 637, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 2496, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 5104, (TfLiteIntArray*)&tensor_dimension9, 637, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension10, 5096, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 5104, (TfLiteIntArray*)&tensor_dimension11, 1400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension12, 2800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 2800, (TfLiteIntArray*)&tensor_dimension13, 832, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension14, 832, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 832, (TfLiteIntArray*)&tensor_dimension15, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension16, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static TfLiteStatus AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                                 size_t bytes, void** ptr) {
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    *ptr = malloc(bytes);
    if (*ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return kTfLiteError;
    }
    overflow_buffers.push_back(*ptr);
    return kTfLiteOk;
  }

  current_location -= bytes;

  *ptr = current_location;
  return kTfLiteOk;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  TfLiteStatus s = AllocatePersistentBuffer(ctx, b.bytes, &b.ptr);
  if (s != kTfLiteOk) {
    return s;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}
} // namespace

  TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 17;
  for(size_t i = 0; i < 17; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = *tflite::ops::micro::Register_RESHAPE();
  registrations[OP_CONV_2D] = *tflite::ops::micro::Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = *tflite::ops::micro::Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = *tflite::ops::micro::Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = *tflite::ops::micro::Register_SOFTMAX();

  for(size_t i = 0; i < 8; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
    tflNodes[i].custom_initial_data = nullptr;
    tflNodes[i].custom_initial_data_size = 0;
    if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 8; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  16, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 8; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
