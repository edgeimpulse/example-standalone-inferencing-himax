/* Generated by Edge Impulse
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/
// Generated on: 11.11.2020 15:19:15

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/kernels/micro_ops.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

namespace {

constexpr int kTensorArenaSize = 3392;
uint8_t* tensor_arena = NULL;
static uint8_t* current_location;
static uint8_t* tensor_boundary;
template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_ADD, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[31];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[15];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,637 } };
const TfArray<1, float> quant0_scale = { 1, { 0.043136455118656158, } };
const TfArray<1, int> quant0_zero = { 1, { 7 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(8) int32_t tensor_data1[2] = { -1, 130, };
const TfArray<1, int> tensor_dimension1 = { 1, { 2 } };
const ALIGN(8) int8_t tensor_data2[30] = { 127, 5, 18, 4, 84, -38, -20, -7, 35, -42, -94, 46, 44, 99, -55, 39, 10, 51, 18, -102, 1, 17, -1, 9, 27, -20, -36, 25, 4, 81, };
const TfArray<1, int> tensor_dimension2 = { 1, { 30 } };
const TfArray<1, float> quant2_scale = { 1, { 0.0013620542595162988, } };
const TfArray<1, int> quant2_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(8) int8_t tensor_data3[10] = { 93, 13, -14, -31, -61, 17, 34, 4, 58, -127, };
const TfArray<1, int> tensor_dimension3 = { 1, { 10 } };
const TfArray<1, float> quant3_scale = { 1, { 0.00061232032021507621, } };
const TfArray<1, int> quant3_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(8) int32_t tensor_data4[3] = { -9, -3, 23, };
const TfArray<1, int> tensor_dimension4 = { 1, { 3 } };
const TfArray<1, float> quant4_scale = { 1, { 0.00019219826208427548, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(8) int8_t tensor_data5[3*130] = {
  -28, -64, -46, 63, 74, 38, 11, 9, -74, 25, -20, 27, 31, 79, 89, -13, -56, 19, -92, -21, 2, -4, 47, 71, 24, -19, -2, -29, -33, 76, -43, -38, 12, 93, 18, -52, -60, 40, -68, 53, 3, -75, 45, -3, 20, -75, -71, 39, -34, 0, 2, -22, 4, 53, 36, 20, -78, -28, -54, -10, -77, -60, 34, 65, 70, 2, -36, -6, 33, 65, -1, -23, -14, 12, 3, -59, -73, -48, -85, 58, 18, 5, 48, 5, 76, -78, -85, -16, 26, -9, 49, 28, 53, 55, 44, -51, -64, -27, 30, 78, -43, -85, -17, 96, 4, -69, -37, -12, 27, 41, -69, 51, -31, -24, 13, -68, 40, -39, 25, 47, -69, -9, 1, -55, 7, 14, -11, -64, -65, 81,
  24, 18, 64, -56, 9, -21, 2, 32, 56, -31, -78, 32, 65, 6, -56, -8, -44, 61, 12, -8, 2, 47, -26, -68, -32, 60, -47, 9, 57, -109, -33, 12, 32, 40, 21, 61, 29, 26, -1, -37, -44, 6, 3, -27, -51, 62, 11, 44, 28, -127, -44, 45, -40, -43, -7, -19, 32, 18, 41, -110, 24, -45, 8, 25, -22, 93, 21, -68, 38, -24, -54, 39, -57, -62, 14, 6, 48, -46, -28, -73, 1, 15, 0, 9, -49, 11, 44, 26, 11, -24, -60, -13, 8, 21, 13, 27, 57, 48, 76, -36, 1, 31, 53, 30, 32, 65, -37, -5, 77, -57, -11, 53, -51, -4, -48, 55, 60, 26, 73, -29, -79, 69, 37, 34, 9, -50, 41, 29, 45, -70,
  -45, -26, -13, 41, 14, -4, -8, -4, 18, -31, 35, -71, -67, -50, -29, -19, -57, 61, 77, 7, 76, -39, -47, -1, -51, -7, -31, 45, 18, 46, 77, 33, -53, -22, 72, -60, 11, 20, 23, -4, 2, 10, -9, 35, -52, -61, 0, 9, -63, 19, 22, -11, -54, -40, 11, -9, -21, 65, -23, -47, 4, 20, -18, -57, 22, 44, 7, 66, -17, 33, 67, -16, 9, 37, 35, -22, 53, 5, -21, 61, 1, 26, 11, -69, 51, -7, 34, 57, -11, -22, 88, 29, 18, -47, 32, -13, -48, 18, -18, -18, 65, 54, 8, -46, 19, -4, -35, 65, -6, 68, -7, 21, -52, 58, -48, -4, -38, 43, -60, 53, 19, -4, -77, 48, 5, 48, -1, -20, -13, -26,
};
const TfArray<2, int> tensor_dimension5 = { 2, { 3,130 } };
const TfArray<1, float> quant5_scale = { 1, { 0.003258587559685111, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(8) int32_t tensor_data6[30] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, };
const TfArray<1, int> tensor_dimension6 = { 1, { 30 } };
const TfArray<30, float> quant6_scale = { 30, { 7.3243900260422379e-05, 7.7066804806236178e-05, 6.7286389821674675e-05, 7.5246600317768753e-05, 6.1056918639224023e-05, 7.8504664998035878e-05, 6.1573911807499826e-05, 7.6524731412064284e-05, 6.5874235588125885e-05, 7.4289411713834852e-05, 8.5737614426761866e-05, 7.886422099545598e-05, 6.1991020629648119e-05, 6.9482986873481423e-05, 6.914459663676098e-05, 7.0849826443009079e-05, 6.1806247686035931e-05, 6.6654662077780813e-05, 7.0642941864207387e-05, 9.5182964287232608e-05, 0.00010077240585815161, 5.6035249144770205e-05, 9.0704103058669716e-05, 8.3487793745007366e-05, 8.1428101111669093e-05, 6.6970838815905154e-05, 8.3464496128726751e-05, 9.348236199002713e-05, 6.8740417191293091e-05, 7.0564565248787403e-05, } };
const TfArray<30, int> quant6_zero = { 30, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(8) int8_t tensor_data7[30*1*7*13] = {
  /* [0][0][][] */ -74,-86,-2,74,-31,-5,-2,-1,-61,60,71,-53,75, -45,-86,27,-63,51,30,26,-38,-9,73,73,-29,18, -67,-47,11,57,31,-41,-47,-79,70,-72,17,-54,-9, -127,-32,-31,-57,-62,-11,-46,-70,-56,1,-22,67,-78, -51,22,-2,-69,-17,23,-11,56,96,-12,53,-5,26, -30,70,-75,45,32,-65,88,27,37,0,-68,-9,-13, 0,43,65,8,67,49,103,10,-95,-23,-8,-48,-11,
  /* [1][0][][] */ 59,59,-38,1,26,26,40,-26,-20,-47,-28,14,46, 99,-19,17,42,-75,-13,-41,78,33,-24,49,-12,5, -26,-5,32,-61,-113,-91,-7,36,81,48,45,-29,76, -83,105,49,61,24,9,-36,-20,-36,-15,72,8,-26, 40,19,-6,18,-53,-45,58,-24,43,44,-48,-47,7, 29,-58,-49,-98,-100,39,-6,-23,-6,4,-47,52,-13, -101,-37,73,68,-32,27,-27,-127,-51,73,-59,11,71,
  /* [2][0][][] */ -29,33,11,77,-26,-43,28,-19,-57,66,-52,35,79, -47,-51,47,-36,23,-81,75,-98,-20,48,-70,29,-14, -102,-58,-36,52,47,49,97,-30,31,-37,55,37,23, -17,-2,-73,7,36,-38,99,1,-74,-34,10,47,5, -127,23,-52,72,108,26,67,-65,-33,43,-10,22,59, -1,-55,50,36,-1,13,19,-48,-3,36,12,79,66, -99,41,89,-8,84,-48,-34,-98,-9,2,6,-5,-42,
  /* [3][0][][] */ -75,18,35,-6,-35,22,48,63,-12,-29,-38,-49,81, 80,-49,21,-5,87,-7,19,-21,64,-45,47,34,-32, 21,-23,-17,-44,-52,-46,-1,34,-80,8,-60,32,15, -58,-67,25,66,22,9,31,9,47,0,17,-40,43, -25,116,-22,54,68,51,-76,-57,-14,60,37,49,-9, 77,20,-78,-72,-127,24,13,48,60,-38,34,24,-28, 48,-22,31,22,-75,-75,-57,12,-55,-33,47,38,-7,
  /* [4][0][][] */ -5,-76,99,92,-77,37,45,-123,-4,-11,3,-51,36, -96,-31,-39,2,11,46,-6,-32,-5,50,72,63,-1, -91,-24,-61,-77,-21,97,127,5,-88,51,61,-37,-65, 52,-106,74,-46,-103,21,114,-84,47,-19,-11,29,54, -23,-8,27,4,61,24,11,-65,-93,112,-40,56,-62, -41,-16,-80,-49,-8,-7,-13,-29,64,71,33,-45,-27, 60,-56,-77,-40,-5,-50,123,-85,16,-81,14,5,-85,
  /* [5][0][][] */ 117,96,-81,-56,-2,-18,-39,0,74,-9,15,-14,40, 121,-30,-54,-87,-20,-10,-5,72,-39,64,51,-7,30, 26,77,-18,-43,61,-53,-9,81,11,16,-5,33,-23, 33,1,-110,-16,41,83,-44,-15,89,-34,-30,-59,-13, 56,53,-50,12,95,-25,11,58,54,-20,16,39,70, -29,21,-65,17,3,-1,-38,-6,34,55,-62,16,6, -44,45,-66,67,51,26,39,10,127,-35,-36,-9,-49,
  /* [6][0][][] */ 19,126,-66,-12,36,-45,31,43,-78,-55,9,69,-7, 78,32,-81,20,28,19,80,73,34,5,34,18,-78, 53,3,-101,-85,6,80,26,42,50,-6,-74,11,36, 93,23,-67,-64,-20,61,-24,13,-16,-5,-24,-50,45, 116,74,-12,11,20,47,21,26,8,75,63,-54,21, 61,83,81,61,-62,-66,-122,-58,32,23,-46,-52,-62, -127,8,75,-72,-8,68,31,26,-5,96,-28,36,78,
  /* [7][0][][] */ -64,19,-82,71,69,58,-66,-44,-59,-11,-3,-6,11, 12,-31,-27,13,51,-14,31,-127,22,-37,-74,-64,10, -39,-37,-14,85,67,8,27,-93,41,-30,32,-52,64, -35,4,-63,105,58,-16,-23,-83,59,-17,-71,32,-49, 23,-88,53,29,-38,-44,-65,-65,-84,-43,-59,71,-81, -77,4,11,-29,-71,-14,-39,17,-48,7,80,2,41, 41,66,6,69,-111,-94,-40,-36,43,-32,-63,75,-50,
  /* [8][0][][] */ 22,-47,-53,66,-28,-68,-71,-116,-23,-15,-45,-36,34, -45,-18,10,-15,-79,23,6,-72,-1,37,35,-2,-38, 0,-23,-16,-6,37,-81,-88,-32,-58,-59,-27,-64,20, -82,16,37,124,112,-76,75,-97,35,62,-51,77,-58, 98,-40,-15,-44,43,-30,77,3,84,76,-22,13,-22, 121,-79,-76,34,127,74,-32,29,38,-1,57,47,61, -97,42,-81,-56,-76,81,-20,-20,98,74,-32,-40,-85,
  /* [9][0][][] */ 64,5,52,-25,-2,-96,-14,8,6,-36,-32,22,23, 63,-96,47,2,62,-81,-31,-58,4,-56,32,-2,-47, 98,-65,42,-6,-53,-10,-7,-103,127,-25,44,-12,-71, 52,-46,-13,-29,-54,75,41,-1,124,-44,-23,-1,3, 82,31,-32,5,-102,87,-9,-80,34,-4,-50,43,12, 118,-70,-2,31,-3,-43,26,-92,95,-10,96,-45,-79, 21,18,34,13,-92,17,43,-35,-11,-79,54,24,65,
  /* [10][0][][] */ 44,5,-50,-25,-17,-10,42,37,-1,14,-37,-14,-13, 127,54,-43,-47,-69,70,-46,108,-22,2,-13,-16,28, 84,100,29,-87,-7,50,-25,103,-37,28,37,6,73, 82,34,-27,-75,-28,85,-15,44,-46,-29,4,-9,72, 101,69,1,-14,-57,40,-25,70,-2,-3,14,-18,96, 55,84,-67,-16,-13,61,-28,86,-20,10,-9,-46,52, 68,32,-26,-6,17,-2,1,90,-48,-44,-3,24,53,
  /* [11][0][][] */ 96,32,19,82,4,-55,49,-42,-20,-36,27,-55,38, 20,-3,9,37,31,95,13,-96,-115,-32,40,57,47, -34,28,-31,-65,-3,6,-26,61,-30,-36,31,-64,-13, -93,-11,-34,-17,-43,29,12,50,50,0,12,29,-93, -64,68,-39,-127,-6,-76,75,-96,-37,-56,-61,64,21, -71,-45,88,26,-84,-2,31,48,-38,-7,-14,29,-59, 125,32,51,3,63,-116,-4,66,58,-56,65,-27,71,
  /* [12][0][][] */ -21,-58,-34,65,56,-76,48,-52,-48,27,-90,-22,-81, 51,-7,64,-55,32,23,-80,44,-42,67,3,-43,-53, 78,9,57,4,-6,-12,-15,63,-19,-49,57,68,-16, 46,-78,-87,-6,-59,104,35,-110,21,12,-43,50,-17, -108,49,47,64,-40,15,-37,28,72,-80,4,57,-115, 18,-87,51,10,104,106,106,58,-7,61,-46,-5,127, 3,-62,-58,65,-91,-46,38,-85,3,-11,-51,43,-67,
  /* [13][0][][] */ -19,-54,53,11,25,12,52,-65,18,-15,1,-19,-8, -123,-12,-21,-124,-27,5,-45,-94,-23,31,60,98,-72, -127,-21,37,-122,-26,-86,-26,105,-51,78,57,71,68, -99,6,-21,-36,-14,43,-94,93,-23,0,1,-69,24, -55,73,-27,-13,-19,59,-80,-7,-4,-18,-19,-86,58, 30,58,-45,-46,-27,-19,-102,-80,25,-65,-1,30,2, -107,3,-57,64,-54,-15,-78,-53,-47,-28,72,-41,-15,
  /* [14][0][][] */ -11,-22,-21,47,34,15,-51,18,-51,-61,-8,-45,-52, 64,50,47,33,40,9,-23,29,-25,38,-20,7,-63, 45,-67,65,-81,-48,68,36,40,-16,-45,-15,30,18, 73,-80,-42,-17,-87,53,-42,-31,-52,48,8,7,65, 28,-11,-109,-29,-85,-34,11,109,-18,30,-40,8,-49, 127,-16,-64,-70,-56,-99,-47,121,21,35,62,-26,68, 49,91,-64,-78,8,-5,-104,39,58,17,3,40,30,
  /* [15][0][][] */ -61,-3,-12,32,-21,-22,66,-95,-64,68,-56,19,48, -37,-36,-62,-41,54,8,43,-127,15,44,52,-21,104, 54,33,79,-17,83,36,-9,-45,71,-15,9,13,-28, 8,65,85,-29,10,-57,40,-40,-36,34,-40,38,87, -46,-100,79,11,-32,-36,61,-24,-93,-76,-37,13,-87, -40,-43,-17,1,16,64,-25,22,-14,28,-7,69,12, 87,-81,-1,-10,44,-5,51,-48,-94,42,-35,59,-31,
  /* [16][0][][] */ -102,-26,-22,18,-10,4,26,-88,-25,83,46,27,-44, 4,-107,-88,37,-32,40,-31,-3,-48,47,-45,-35,32, 36,-3,-66,-45,58,110,79,45,119,-33,-23,-54,-5, 60,-50,29,60,-78,16,-78,59,62,59,-20,-61,64, 80,60,122,-18,25,5,-71,-25,-71,-10,38,2,65, 127,104,14,-81,-51,35,-124,41,71,-36,30,20,-80, 79,11,50,27,41,56,-82,-33,-96,-48,-42,35,-48,
  /* [17][0][][] */ -91,-56,-47,80,28,70,24,-63,14,-59,-35,-49,-71, -65,-6,32,57,71,88,62,53,-86,24,22,78,-13, 15,-79,-26,-82,56,69,-15,83,73,62,77,-1,-76, -61,71,43,56,4,-39,37,35,77,-67,4,71,-24, 29,58,-70,-12,37,61,-97,108,-11,-86,86,-43,46, -87,63,-1,44,-47,-36,25,21,80,71,-37,44,-2, -79,40,-6,-111,70,78,-127,-2,-55,-87,81,61,30,
  /* [18][0][][] */ -66,40,90,93,-4,52,-30,105,47,-71,35,-17,-46, 19,-95,-65,-30,-91,-33,-18,48,-51,16,30,36,-38, 84,-92,20,5,54,47,31,-58,-88,-45,14,-50,94, 54,-2,-49,-30,62,-41,11,64,-38,-2,-64,-45,100, 74,-66,34,-5,-71,54,43,10,-44,-66,-51,36,37, 127,23,56,-41,-61,26,-62,30,-27,78,-43,19,60, 118,45,17,60,-58,-63,-85,46,-85,-66,-31,26,2,
  /* [19][0][][] */ -4,19,30,12,4,20,62,-87,-3,9,25,23,-25, 49,52,77,61,-33,41,45,-122,9,24,37,37,-22, 13,5,120,49,-37,23,-19,-92,2,49,0,-28,-60, 45,42,127,-9,-31,54,5,-78,-44,13,27,16,-5, 27,36,104,43,-110,-6,17,-24,-47,9,-44,-20,8, 18,76,39,52,-74,-42,-46,24,-67,-39,-32,-3,-1, 83,79,4,-22,-7,-9,-50,32,-8,30,-8,-26,-28,
  /* [20][0][][] */ 23,-30,-40,-40,-44,-6,43,38,42,4,43,20,-37, 29,65,-78,-52,-39,-4,-38,-49,-32,18,32,26,-15, 108,30,16,17,-16,49,3,35,-47,-5,7,12,-1, 127,15,20,-22,-35,54,-63,33,-23,-1,10,26,-37, 98,59,-14,-44,-16,27,-9,28,-53,18,-4,-35,-10, 101,-31,-29,-11,-67,28,67,-19,-21,-25,25,-9,-60, 31,-36,12,70,45,35,-9,-58,28,-44,-23,25,-10,
  /* [21][0][][] */ 39,50,77,110,91,93,94,96,-84,-52,-48,37,60, 62,-62,84,-56,-83,-26,79,107,-49,-77,-92,69,77, -36,-26,44,-98,-14,17,9,-9,-84,76,3,77,-19, 70,-11,96,-4,0,-77,54,-111,-62,-74,-47,-60,24, -87,-112,-79,85,-65,90,-12,-87,-13,23,-127,-77,66, -17,-22,-53,88,-14,-54,30,-34,-45,22,-57,-64,-49, -73,-50,-14,81,16,34,107,-72,-38,81,-1,39,47,
  /* [22][0][][] */ -72,8,-42,-3,-5,-10,4,-55,20,61,-40,-1,-54, -79,-20,-51,63,-20,-9,-7,5,19,-30,-37,-13,-55, 36,31,-45,1,72,-47,-29,-45,54,-42,48,38,20, 2,-55,-20,42,73,7,61,7,-36,61,-48,-40,19, -27,32,-45,4,76,-36,-51,-59,-2,-40,56,46,-21, -48,-24,84,-5,-58,-54,-18,-72,-61,17,-31,5,4, -36,-68,77,13,-127,18,-39,-78,-12,-48,34,47,-37,
  /* [23][0][][] */ -49,-15,51,-6,22,32,-6,55,40,0,-15,-30,22, -82,98,-21,67,56,49,-34,30,53,-6,27,-8,26, 16,44,29,-37,39,-33,10,-65,-2,-15,-34,16,6, 16,-14,32,-67,7,-83,-85,20,-24,-31,40,-44,-10, 109,22,-75,0,12,36,51,85,-4,-36,11,0,-4, 127,2,-13,56,-26,1,-16,-52,65,-20,14,38,-23, 67,-3,-51,6,-49,29,37,36,-40,-4,16,-20,55,
  /* [24][0][][] */ 68,127,36,-41,-44,21,-17,-8,-19,-2,-38,-32,20, 59,-2,4,-62,-70,60,-29,-19,51,-37,-62,22,-31, 69,-58,-75,-44,49,-60,-3,-27,20,31,3,-23,54, 94,27,-32,61,14,-14,-49,-10,7,21,-25,18,14, 80,52,40,12,-4,-27,-48,-9,36,38,55,-5,39, 8,-36,-69,31,-52,-83,-41,62,-69,-26,5,15,73, -71,-35,-26,-21,66,-69,-55,-25,-36,-20,21,21,-41,
  /* [25][0][][] */ -27,-12,-35,115,55,-9,-31,28,-37,65,-47,55,62, 35,-25,-107,102,54,27,22,73,-72,-12,-32,17,17, -10,-29,2,3,-97,66,7,-64,-37,26,36,-3,35, -48,2,-113,29,31,46,-61,-110,-15,-58,-14,1,-40, 90,5,-26,-30,59,-20,-83,127,29,-14,-49,-12,37, 60,-12,-103,70,4,11,-28,17,62,35,43,-41,-35, 96,-77,-57,73,-16,-5,-65,-66,-8,4,-50,-20,10,
  /* [26][0][][] */ 104,82,-72,39,35,-32,-51,-16,-28,-39,-11,22,-57, 24,74,-27,54,28,-26,72,20,-11,-15,4,36,-74, 76,69,-97,94,37,-7,76,85,13,11,18,-46,-31, -2,-33,-50,42,-38,-52,86,-43,-60,5,6,13,-25, 34,-16,-71,3,-46,-53,127,-27,-30,54,-37,-40,-29, 67,-29,-17,49,-16,-28,104,-13,23,22,-60,27,-48, 21,-1,-39,30,-54,-31,62,-72,-45,37,-2,57,-32,
  /* [27][0][][] */ 127,-39,-68,-13,-69,-30,29,22,-37,-14,-1,-7,-38, 3,-44,-55,-41,-57,39,20,63,24,-3,-60,26,-51, 31,60,-32,75,33,70,-8,-20,-33,47,0,3,-18, -43,56,53,-52,-16,-25,-18,-59,59,50,23,-2,-26, 62,47,-12,-64,22,57,-43,-34,-36,-59,-49,-31,-62, 55,-72,54,9,22,-7,37,3,50,36,12,45,-3, -41,3,52,-10,-19,-38,-21,-19,-8,25,-12,54,16,
  /* [28][0][][] */ 28,11,74,35,-7,-9,-37,-71,-63,-31,-1,7,-23, 63,-42,127,92,50,79,13,48,37,49,45,21,13, 82,-108,75,77,46,38,88,5,-6,-26,0,17,38, 70,60,83,69,16,-2,-44,37,-66,75,74,39,-69, 15,-57,35,-93,-13,9,31,52,-13,24,-12,64,-80, 8,105,-59,-88,-42,22,-56,94,-17,-59,52,-47,91, 82,105,-1,-93,53,-22,-54,-36,-12,-69,20,-46,33,
  /* [29][0][][] */ -39,61,-77,-29,5,99,-3,80,5,58,17,-76,-50, -59,-4,-53,-98,21,100,-82,39,127,-14,3,72,44, -78,-28,47,-101,97,105,44,97,-13,-7,-63,63,45, -38,-25,36,57,77,3,3,31,12,-3,-76,49,22, -62,0,-22,24,46,35,-7,52,53,57,-34,76,-35, 70,-6,17,-56,68,1,-8,87,-17,20,98,3,-11, -56,29,-51,80,52,126,-69,103,86,70,-78,46,-14,
};
const TfArray<4, int> tensor_dimension7 = { 4, { 30,1,7,13 } };
const TfArray<30, float> quant7_scale = { 30, { 0.0016979583306238055, 0.0017865817062556744, 0.0015598498284816742, 0.0017443853430449963, 0.0014154366217553616, 0.0018199145561084151, 0.0014274216955527663, 0.0017740152543410659, 0.0015271129086613655, 0.001722195534966886, 0.0019875906873494387, 0.0018282500095665455, 0.0014370911521837115, 0.0016107718693092465, 0.0016029271064326167, 0.001642458257265389, 0.0014328077668324113, 0.0015452048974111676, 0.0016376621788367629, 0.0022065551020205021, 0.0023361309431493282, 0.0012990230461582541, 0.0021027249749749899, 0.0019354347605258226, 0.0018876864342018962, 0.0015525346389040351, 0.0019348947098478675, 0.0021671312861144543, 0.0015935574192553759, 0.0016358452849090099, } };
const TfArray<30, int> quant7_zero = { 30, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(8) int32_t tensor_data8[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, };
const TfArray<1, int> tensor_dimension8 = { 1, { 10 } };
const TfArray<10, float> quant8_scale = { 10, { 5.5213684390764683e-05, 4.9492809921503067e-05, 4.522368180914782e-05, 5.359819988370873e-05, 5.6089626013999805e-05, 5.3995583584764972e-05, 5.3012994612799957e-05, 5.7721154007595032e-05, 5.312602297635749e-05, 6.9296809670049697e-05, } };
const TfArray<10, int> quant8_zero = { 10, { 0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(8) int8_t tensor_data9[10*1*7*30] = {
  /* [0][0][][] */ -18,10,13,15,95,-115,-91,20,-62,-70,-86,-38,63,127,-42,-12,-101,42,-51,-9,6,-48,-35,-20,-90,-73,66,-46,-61,6, -20,-23,19,-17,83,-17,28,5,46,22,-62,76,-91,115,-45,27,15,53,-73,-78,-118,-5,86,-29,-64,-55,-16,-25,32,3, 59,-43,-84,-74,-63,-124,-87,62,-57,44,17,-19,35,-24,-33,36,8,40,-39,-26,-98,-87,16,60,-109,55,-45,-40,50,51, 22,27,13,-20,-33,-43,-13,-110,-55,-80,-52,-35,-57,69,-24,12,90,93,13,-80,-31,2,3,-64,-90,-41,-3,-79,5,107, 41,49,-3,-34,1,-67,-57,38,33,86,24,-75,28,100,-5,11,54,65,78,-106,74,14,-65,-66,0,53,13,26,-48,91, 80,-76,3,74,-49,32,23,-36,-13,-29,57,7,-3,12,26,-118,29,66,13,38,52,73,14,52,66,52,67,-20,-48,23, -29,-51,29,6,67,17,-34,10,-73,41,-23,-14,37,72,14,67,-31,100,9,-34,78,93,-24,75,-56,26,13,53,22,73,
  /* [1][0][][] */ -61,58,-48,20,1,10,71,-75,-3,-16,10,-65,9,-49,-71,-91,-28,36,15,-79,50,73,-42,48,48,105,6,60,-11,-14, -58,27,58,69,-20,41,75,-59,12,53,-89,50,46,13,87,52,59,63,23,24,96,-50,-18,48,92,88,43,49,50,-76, 71,54,-29,-7,-43,46,109,-66,1,28,-74,127,-58,47,93,73,38,-105,39,90,52,-38,67,9,14,91,52,-29,-34,-106, -29,97,-33,66,-42,65,-9,-56,58,-6,21,3,-56,47,36,23,47,-55,-91,-12,41,23,57,86,31,94,-35,-55,-37,43, -67,-52,47,60,23,25,4,-80,82,49,34,38,75,57,-18,68,-51,-29,22,27,-72,-35,-102,-19,71,87,69,-56,-67,-92, 33,31,13,68,33,-105,41,38,31,-12,17,-30,76,-99,16,-6,72,-29,29,-109,75,70,-8,3,-9,31,60,-50,6,14, -89,-16,-48,-23,70,-6,-73,-85,-42,20,-101,83,-11,-4,64,-53,50,-48,-14,4,-21,38,-105,38,49,-8,34,-69,90,-80,
  /* [2][0][][] */ -57,19,51,-84,73,6,49,-36,75,18,-66,-42,6,-117,61,-10,-68,82,-115,-43,87,-68,9,47,52,2,-84,-104,1,56, 60,-113,25,-3,-52,101,117,104,22,-70,56,81,11,45,58,-45,28,-120,19,-36,-62,4,49,-60,79,-7,-32,-64,-37,-71, -67,-96,29,82,38,108,17,-37,76,63,44,-69,51,-69,18,60,115,-27,71,19,66,89,22,49,57,-25,-82,68,-1,84, 43,-12,-57,-106,74,-67,7,-35,88,-106,-50,73,115,-59,127,75,-51,13,-84,125,85,-61,21,-62,122,-91,-11,1,64,15, -17,-8,8,-18,-11,1,-75,80,71,16,-109,38,15,-90,103,-7,47,77,103,46,-115,-86,39,67,93,-83,-87,-86,84,-70, 11,56,15,-40,-41,-47,-11,101,17,-30,-42,10,38,12,-57,65,22,-87,-24,67,91,-37,-35,0,-35,16,-60,107,-58,-27, 52,56,58,66,-72,95,-55,102,-86,-56,18,-7,79,-67,-60,-8,-33,69,92,44,20,-17,64,-65,24,-40,-126,2,3,53,
  /* [3][0][][] */ -56,-5,-50,-47,10,17,35,45,81,-69,28,48,-16,-76,-19,69,-15,-1,19,-70,-70,68,44,70,-11,-75,-61,60,2,9, 16,-4,-43,-13,14,-71,67,39,31,-78,-92,-9,-73,22,49,-91,-78,8,-6,51,-49,-44,-57,-23,24,21,11,-88,-12,-32, 12,-20,33,-8,-26,79,-88,89,-8,14,-63,63,-10,-18,-10,74,8,-47,-85,-25,8,4,17,-82,50,96,-4,37,-118,-19, -66,41,20,14,85,-74,-57,81,-23,-79,-64,11,-57,68,28,25,90,47,46,6,-45,20,89,-19,15,-34,61,-69,-127,32, 96,88,-4,70,-33,-82,-34,-49,-45,-57,13,-78,29,67,49,90,54,-84,-21,90,-20,16,103,70,-5,34,10,-77,4,11, -67,-83,89,67,22,5,28,36,46,61,-15,-39,-27,-25,110,71,-78,-17,105,79,-35,-37,-46,11,43,-75,-28,36,-28,-39, 16,47,43,-57,59,-3,6,69,36,-62,100,42,-70,-93,-14,100,-36,-39,78,1,109,60,45,-62,-16,-47,25,-27,-9,-111,
  /* [4][0][][] */ -20,-14,-29,-61,-91,127,24,-7,-83,78,66,-90,-85,2,13,9,27,-59,75,56,63,34,40,68,70,-78,28,-39,32,9, 27,-88,-50,-32,-73,87,41,-11,43,19,85,-34,-95,51,39,-75,-21,-18,-64,90,73,7,67,10,78,-67,-26,-15,62,-15, 0,56,-73,3,-75,82,84,74,-119,-2,127,4,-27,-86,73,39,42,3,37,18,46,-42,70,54,-3,26,31,11,7,109, -75,-33,-57,-74,-45,40,-22,18,-84,-16,11,0,-90,-22,76,-18,-70,-12,57,85,46,-95,-73,4,-19,-29,70,67,58,93, -93,20,-86,8,-25,38,53,-34,-8,46,-4,-32,-31,-77,14,-18,-3,39,32,-61,-45,-47,-86,-43,45,27,-30,36,-20,-5, -103,-47,-7,-49,-22,72,60,11,53,23,-41,20,-40,-67,-12,-76,-35,52,63,33,-36,-35,49,35,-67,80,-86,52,-5,95, 25,-6,-84,31,-51,6,52,-61,11,-63,1,-57,62,-48,-90,18,-60,19,3,-85,19,34,-8,68,50,2,-98,-52,-90,84,
  /* [5][0][][] */ 59,76,-72,30,-46,-32,8,-11,90,-77,-95,89,-30,46,-43,70,-70,1,-70,53,65,64,-11,18,-42,23,-57,-63,-62,-55, 83,65,46,-15,-27,63,77,55,76,-19,41,30,44,77,18,50,27,73,-2,7,-53,29,-53,79,92,85,-34,-38,-11,4, 69,18,-57,-39,-57,18,-16,-66,40,64,-17,0,39,80,-75,19,36,64,-12,-127,24,2,-42,-37,-14,-51,-84,8,-5,47, -73,87,-26,19,-41,8,79,15,5,88,43,-5,-27,-61,-2,-29,-68,-70,-23,-36,-29,-11,52,83,-25,40,-42,-39,45,-26, -45,44,-55,-28,-8,28,26,5,-25,-91,73,85,-19,-64,63,-1,-50,27,50,-72,29,34,27,106,44,-2,80,76,57,-68, -64,112,-32,65,-26,-61,-41,-68,-39,-3,9,-45,-43,11,-39,-11,37,45,-52,23,-61,41,22,-55,84,95,-61,81,-36,-47, 32,-39,-28,-65,-9,-10,5,34,-36,-75,-10,-24,-5,4,-44,-70,49,20,20,24,-87,2,0,10,11,-54,-20,-4,1,-19,
  /* [6][0][][] */ 92,-19,-5,96,54,-67,20,-1,52,70,-83,67,-74,5,-9,-24,47,-6,22,-70,67,22,-127,92,-73,77,-3,-86,62,35, -80,-34,29,88,-25,-62,33,-25,100,-68,-9,-39,60,5,-55,42,96,87,8,39,28,-73,-113,-11,-47,67,46,-36,-13,50, -65,0,-18,58,-75,37,89,-67,-45,64,1,21,47,14,-3,-19,-4,19,33,-81,27,99,32,-31,5,-43,50,-5,79,23, 18,59,44,39,30,13,-61,-99,27,-13,-66,-32,51,-39,30,-90,87,16,-33,-90,-52,-18,-52,99,-32,-21,-4,-37,-65,-8, -84,2,-95,-10,-66,-49,5,-61,-38,-15,-8,79,-23,-17,-69,-83,75,-50,72,-62,60,77,-98,67,109,-34,7,-17,-8,-80, 77,84,-33,44,24,-35,64,-102,34,-60,8,-19,65,-43,48,-57,88,16,14,-75,-52,39,-47,98,74,37,6,42,-17,-22, -64,-6,-96,6,-54,70,-54,-64,103,-12,71,-26,53,-8,80,-18,-15,-71,44,71,81,15,7,-5,40,76,53,82,-51,-57,
  /* [7][0][][] */ -42,91,-44,-86,1,-23,-13,-74,83,81,53,76,-19,-4,-28,-38,-45,13,-48,42,59,-2,39,-67,-50,46,73,7,-49,48, 23,70,43,-19,-32,-58,-50,-10,19,92,16,18,-24,17,-75,68,-21,-2,-18,31,7,-35,-36,23,85,38,78,15,-26,-23, 36,48,10,26,61,-17,-26,-32,17,23,2,-13,2,81,4,56,18,-9,-73,34,71,46,45,-31,61,50,-11,77,36,-40, -62,63,67,-66,56,-12,-55,-90,-51,71,-33,85,-30,-74,-14,14,35,33,-27,20,57,34,-33,-15,-9,-31,117,36,-62,-38, -47,13,8,-83,3,-36,-45,-14,-21,90,-40,-50,25,-18,53,49,-54,67,-93,16,25,73,-7,-1,-33,-13,127,13,-45,35, -11,20,24,-75,58,-52,2,50,70,21,35,-21,28,-17,-83,-25,-27,5,-37,11,-49,-13,-52,46,-4,-9,96,-3,32,-26, 45,45,49,45,-58,-47,33,33,-1,114,-15,-14,75,-12,26,-43,11,-31,-68,59,39,-28,-96,-72,-40,89,84,29,28,-17,
  /* [8][0][][] */ -54,82,2,59,51,10,54,-100,-25,-68,-24,91,92,73,-8,24,-38,80,-2,2,-88,14,-1,-9,70,-11,-4,98,106,-9, 70,-33,-31,56,60,-13,22,-49,-48,-68,-114,117,6,-26,24,-48,46,-33,26,-50,32,62,-5,-44,-17,54,-29,59,68,12, -35,-60,-37,65,-46,6,26,-39,21,-53,-94,-27,-15,-65,-49,-64,24,-13,-15,36,-18,-26,-7,114,-55,34,-87,37,48,42, -22,90,-55,69,29,-8,-35,51,-35,6,-77,-7,11,40,7,60,19,26,-23,-55,34,11,-53,86,23,-46,62,-37,-28,41, -72,124,-62,-18,-45,6,19,-20,69,73,17,-36,53,-39,56,45,-23,-38,4,3,80,-18,10,73,102,117,49,97,-12,37, -34,-22,-64,7,-14,-13,-33,33,-28,-25,-60,94,34,48,-64,83,10,58,56,-77,104,47,-74,34,54,17,-61,-38,1,-54, 63,-5,58,100,32,-15,91,-8,23,127,-63,61,-26,36,8,-86,61,39,98,37,93,30,-68,84,79,124,78,60,-30,32,
  /* [9][0][][] */ -40,1,4,19,-72,53,52,-4,4,5,45,-12,-76,-60,-21,11,84,30,20,103,67,-37,-34,40,-34,-11,-6,-45,28,-67, -32,-69,-5,8,-7,5,29,44,-96,34,96,-60,5,-6,62,-1,-5,-65,19,127,62,-68,9,-43,13,-44,23,-12,4,-37, -98,-5,-71,15,-64,19,-48,-32,-43,-14,40,-77,6,-60,91,-75,70,-86,-35,59,60,13,-23,29,8,3,-41,-46,75,-53, -22,-12,-39,-55,-62,27,75,-21,-49,2,84,-60,-73,-21,-26,-5,45,-70,56,104,97,20,-31,29,40,-11,72,11,36,7, -117,-40,26,-111,30,-9,2,57,-45,-37,11,-64,-55,-63,-16,-30,-49,-20,-67,93,46,-49,-31,-17,44,0,53,25,-64,78, -85,-45,-7,-45,15,83,26,-62,-79,-25,92,-2,7,-104,-79,-39,21,27,2,-16,70,-59,-12,-74,-27,28,26,1,-72,26, -85,-81,-21,17,-5,66,22,13,0,40,4,-52,-69,-7,-21,-31,-45,-14,-8,69,29,-80,-82,-35,-56,38,-18,45,-93,18,
};
const TfArray<4, int> tensor_dimension9 = { 4, { 10,1,7,30 } };
const TfArray<10, float> quant9_scale = { 10, { 0.0017480039969086647, 0.0015668874839320779, 0.0014317316235974431, 0.0016968596028164029, 0.0017757354071363807, 0.0017094403738155961, 0.0016783326864242554, 0.0018273877212777734, 0.0016819109441712499, 0.0021938602440059185, } };
const TfArray<10, int> quant9_zero = { 10, { 0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(8) int32_t tensor_data10[4] = { 1, 1, 49, 13, };
const TfArray<1, int> tensor_dimension10 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data11[3] = { 1, 49, 30, };
const TfArray<1, int> tensor_dimension11 = { 1, { 3 } };
const ALIGN(8) int32_t tensor_data12[4] = { 1, 49, 1, 30, };
const TfArray<1, int> tensor_dimension12 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data13[4] = { 1, 1, 25, 30, };
const TfArray<1, int> tensor_dimension13 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data14[3] = { 1, 25, 10, };
const TfArray<1, int> tensor_dimension14 = { 1, { 3 } };
const ALIGN(8) int32_t tensor_data15[4] = { 1, 25, 1, 10, };
const TfArray<1, int> tensor_dimension15 = { 1, { 4 } };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,1,49,13 } };
const TfArray<1, float> quant16_scale = { 1, { 0.043136455118656158, } };
const TfArray<1, int> quant16_zero = { 1, { 7 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,1,49,30 } };
const TfArray<1, float> quant17_scale = { 1, { 0.053727183490991592, } };
const TfArray<1, int> quant17_zero = { 1, { -25 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<3, int> tensor_dimension18 = { 3, { 1,49,30 } };
const TfArray<1, float> quant18_scale = { 1, { 0.053727183490991592, } };
const TfArray<1, int> quant18_zero = { 1, { -25 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<3, int> tensor_dimension19 = { 3, { 1,49,30 } };
const TfArray<1, float> quant19_scale = { 1, { 0.031586702913045883, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<4, int> tensor_dimension20 = { 4, { 1,49,1,30 } };
const TfArray<1, float> quant20_scale = { 1, { 0.031586702913045883, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<4, int> tensor_dimension21 = { 4, { 1,25,1,30 } };
const TfArray<1, float> quant21_scale = { 1, { 0.031586702913045883, } };
const TfArray<1, int> quant21_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<4, int> tensor_dimension22 = { 4, { 1,1,25,30 } };
const TfArray<1, float> quant22_scale = { 1, { 0.031586702913045883, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfArray<4, int> tensor_dimension23 = { 4, { 1,1,25,10 } };
const TfArray<1, float> quant23_scale = { 1, { 0.10023503005504608, } };
const TfArray<1, int> quant23_zero = { 1, { -24 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 0 };
const TfArray<3, int> tensor_dimension24 = { 3, { 1,25,10 } };
const TfArray<1, float> quant24_scale = { 1, { 0.10023503005504608, } };
const TfArray<1, int> quant24_zero = { 1, { -24 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const TfArray<3, int> tensor_dimension25 = { 3, { 1,25,10 } };
const TfArray<1, float> quant25_scale = { 1, { 0.058982077986001968, } };
const TfArray<1, int> quant25_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const TfArray<4, int> tensor_dimension26 = { 4, { 1,25,1,10 } };
const TfArray<1, float> quant26_scale = { 1, { 0.058982077986001968, } };
const TfArray<1, int> quant26_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const TfArray<4, int> tensor_dimension27 = { 4, { 1,13,1,10 } };
const TfArray<1, float> quant27_scale = { 1, { 0.058982077986001968, } };
const TfArray<1, int> quant27_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const TfArray<2, int> tensor_dimension28 = { 2, { 1,130 } };
const TfArray<1, float> quant28_scale = { 1, { 0.058982077986001968, } };
const TfArray<1, int> quant28_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const TfArray<2, int> tensor_dimension29 = { 2, { 1,3 } };
const TfArray<1, float> quant29_scale = { 1, { 0.088363803923130035, } };
const TfArray<1, int> quant29_zero = { 1, { -10 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 0 };
const TfArray<2, int> tensor_dimension30 = { 2, { 1,3 } };
const TfArray<1, float> quant30_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant30_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,10 } };
const TfArray<1, int> outputs0 = { 1, { 16 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 16,7,6 } };
const TfArray<1, int> outputs1 = { 1, { 17 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 17,11 } };
const TfArray<1, int> outputs2 = { 1, { 18 } };
const TfLiteAddParams opdata3 = { kTfLiteActRelu };
const TfArray<2, int> inputs3 = { 2, { 18,2 } };
const TfArray<1, int> outputs3 = { 1, { 19 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 19,12 } };
const TfArray<1, int> outputs4 = { 1, { 20 } };
const TfLitePoolParams opdata5 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs5 = { 1, { 20 } };
const TfArray<1, int> outputs5 = { 1, { 21 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 21,13 } };
const TfArray<1, int> outputs6 = { 1, { 22 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 22,9,8 } };
const TfArray<1, int> outputs7 = { 1, { 23 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 23,14 } };
const TfArray<1, int> outputs8 = { 1, { 24 } };
const TfLiteAddParams opdata9 = { kTfLiteActRelu };
const TfArray<2, int> inputs9 = { 2, { 24,3 } };
const TfArray<1, int> outputs9 = { 1, { 25 } };
const TfLiteReshapeParams opdata10 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs10 = { 2, { 25,15 } };
const TfArray<1, int> outputs10 = { 1, { 26 } };
const TfLitePoolParams opdata11 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs11 = { 1, { 26 } };
const TfArray<1, int> outputs11 = { 1, { 27 } };
const TfLiteReshapeParams opdata12 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs12 = { 2, { 27,1 } };
const TfArray<1, int> outputs12 = { 1, { 28 } };
const TfLiteFullyConnectedParams opdata13 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs13 = { 3, { 28,5,4 } };
const TfArray<1, int> outputs13 = { 1, { 29 } };
const TfLiteSoftmaxParams opdata14 = { 1 };
const TfArray<1, int> inputs14 = { 1, { 29 } };
const TfArray<1, int> outputs14 = { 1, { 30 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 640, (TfLiteIntArray*)&tensor_dimension0, 637, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 30, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 10, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 390, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 120, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 2730, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 40, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 2100, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 12, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 12, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension16, 637, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1472, (TfLiteIntArray*)&tensor_dimension17, 1470, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension18, 1470, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1472, (TfLiteIntArray*)&tensor_dimension19, 1470, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension20, 1470, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1472, (TfLiteIntArray*)&tensor_dimension21, 750, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension22, 750, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 752, (TfLiteIntArray*)&tensor_dimension23, 250, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant23))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension24, 250, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 256, (TfLiteIntArray*)&tensor_dimension25, 250, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant25))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension26, 250, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 256, (TfLiteIntArray*)&tensor_dimension27, 130, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant27))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension28, 130, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant28))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 144, (TfLiteIntArray*)&tensor_dimension29, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant29))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension30, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant30))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_ADD, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_ADD, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, const_cast<void*>(static_cast<const void*>(&opdata12)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, const_cast<void*>(static_cast<const void*>(&opdata13)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, const_cast<void*>(static_cast<const void*>(&opdata14)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static TfLiteStatus AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                                 size_t bytes, void** ptr) {
  if (current_location - bytes < tensor_boundary) {
    ei_printf("AllocatePersistentBuffer outside tensor arena malloc %u\n", bytes);
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    *ptr = malloc(bytes);
    ei_printf("AllocatePersistentBuffer outside tensor arena malloc %u OK\n", bytes, ptr);
    if (*ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %u\n", bytes);
      return kTfLiteError;
    }
    overflow_buffers.push_back(*ptr);
    return kTfLiteOk;
  }

  current_location -= bytes;

  *ptr = current_location;
  return kTfLiteOk;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  TfLiteStatus s = AllocatePersistentBuffer(ctx, b.bytes, &b.ptr);
  if (s != kTfLiteOk) {
    return s;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}
} // namespace

  TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
    ei_printf("ti1\n");
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  current_location = tensor_arena + kTensorArenaSize;
  tensor_boundary = tensor_arena;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 31;
  for(size_t i = 0; i < 31; ++i) {
    ei_printf("ti2 %u\n", i);
    tflTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
      uint8_t* end = start + tensorData[i].bytes;

     tflTensors[i].data.data =  start;

     if (end > tensor_boundary) {
       tensor_boundary = end;
     }
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
    }
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
  }
  registrations[OP_RESHAPE] = *tflite::ops::micro::Register_RESHAPE();
  registrations[OP_CONV_2D] = *tflite::ops::micro::Register_CONV_2D();
  registrations[OP_ADD] = *tflite::ops::micro::Register_ADD();
  registrations[OP_MAX_POOL_2D] = *tflite::ops::micro::Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = *tflite::ops::micro::Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = *tflite::ops::micro::Register_SOFTMAX();

  for(size_t i = 0; i < 15; ++i) {
    ei_printf("ti3 %u\n", i);
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
    tflNodes[i].custom_initial_data = nullptr;
    tflNodes[i].custom_initial_data_size = 0;
    if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 15; ++i) {
    ei_printf("ti4 %u\n", i);
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0,
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  30,
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  ei_printf("trained_model_invoke\n");
  for(size_t i = 0; i < 15; ++i) {
    ei_printf("trained_model_invoke %lu\n", i);
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);
    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
  free_fnc(tensor_arena);
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
