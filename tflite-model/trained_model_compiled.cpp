/* Generated by Edge Impulse
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/
// Generated on: 12.11.2020 10:35:33

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/kernels/micro_ops.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

namespace {

constexpr int kTensorArenaSize = 52512;

#if EI_CLASSIFIER_ALLOCATION == EI_CLASSIFIER_ALLOCATION_HEAP
uint8_t* tensor_arena = NULL;
static uint8_t* current_location;
static uint8_t* tensor_boundary;
#elif EI_CLASSIFIER_ALLOCATION == EI_CLASSIFIER_ALLOCATION_STATIC
uint8_t tensor_arena[tensor_arena_size] ALIGN(16);
#elif EI_CLASSIFIER_ALLOCATION == EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[tensor_arena_size] ALIGN(16);
#pragma Bss()
#endif // EI_CLASSIFIER_ALLOCATION

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_PAD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_ADD, OP_RESHAPE, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[184];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[73];

const TfArray<4, int> tensor_dimension0 = { 4, { 1,32,32,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(8) int32_t tensor_data1[4*2] = {
  0, 0,
  0, 1,
  0, 1,
  0, 0,
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(8) int32_t tensor_data2[10] = { 131, -157, 317, 286, -294, 176, -263, 303, -282, -76, };
const TfArray<1, int> tensor_dimension2 = { 1, { 10 } };
const TfArray<1, float> quant2_scale = { 1, { 1.5040449397929478e-05, } };
const TfArray<1, int> quant2_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(8) int32_t tensor_data3[3] = { -29, -20, 27, };
const TfArray<1, int> tensor_dimension3 = { 1, { 3 } };
const TfArray<1, float> quant3_scale = { 1, { 0.00015666632680222392, } };
const TfArray<1, int> quant3_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(8) int32_t tensor_data4[2] = { 1, 1280, };
const TfArray<1, int> tensor_dimension4 = { 1, { 2 } };
const ALIGN(8) int32_t tensor_data5[8] = { -805, 37805, 2077, 39074, 37852, -211, 44176, 69891, };
const TfArray<1, int> tensor_dimension5 = { 1, { 8 } };
const TfArray<8, float> quant5_scale = { 8, { 7.2446091508027166e-05, 7.9999037552624941e-05, 7.8677650890313089e-05, 6.0649457736872137e-05, 7.3980612796731293e-05, 7.727403863100335e-05, 4.903347507934086e-05, 3.6187571822665632e-05, } };
const TfArray<8, int> quant5_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(8) int32_t tensor_data6[48] = { 910, -1251, 22214, 3956, 25176, 6018, 3546, 9673, 9724, 2214, 4053, 21682, 6145, 2958, 5046, 2816, 8178, 10281, 2683, 9105, 3140, 10995, 9668, 3557, 6991, 13921, -102, 19093, 2094, -5472, 9430, 2347, 362, 14372, 3430, 15879, 14258, -6670, -1920, -435, 11166, 15033, -2906, 31390, 2687, 9576, 2097, 70, };
const TfArray<1, int> tensor_dimension6 = { 1, { 48 } };
const TfArray<48, float> quant6_scale = { 48, { 9.8846081527881324e-05, 0.00011799929779954255, 3.8793717976659536e-05, 0.0001037186520989053, 3.6441353586269543e-05, 7.6035197707824409e-05, 0.00014178728451952338, 7.7450386015698314e-05, 8.204842742998153e-05, 0.00017954823852051049, 0.00013401788601186126, 4.437976167537272e-05, 9.153589780908078e-05, 0.00012919418804813176, 0.00011176420957781374, 0.00012554245768114924, 8.3410406659822911e-05, 6.5785417973529547e-05, 0.00011021623504348099, 7.4094932642765343e-05, 8.3719314716290683e-05, 6.5758773416746408e-05, 7.4483752541709691e-05, 8.0007775977719575e-05, 0.00010620320244925097, 6.4015657699201256e-05, 7.9820332757662982e-05, 4.5287801185622811e-05, 0.00017088944150600582, 0.00010196698713116348, 8.3702470874413848e-05, 0.00013563036918640137, 0.00013326230691745877, 5.8688710851129144e-05, 0.00013450004917103797, 5.3758023568661883e-05, 6.1088656366337091e-05, 7.8982877312228084e-05, 0.00010135857883142307, 0.00015258575149346143, 7.1222726546693593e-05, 5.4973661463009194e-05, 0.00011255245772190392, 3.1463052437175065e-05, 0.00010282210860168561, 7.0825270086061209e-05, 0.00010060990462079644, 9.9764270999003202e-05, } };
const TfArray<48, int> quant6_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(8) int32_t tensor_data7[48] = { -1548, -106, 577, 9064, 15, -7110, -1848, 15343, -789, 33443, 11391, 922, 781, 17279, -1244, 13250, 24463, 6901, -232, -3927, -103, 2363, -16, -9868, -2531, 17838, 393, -6928, -7910, -2423, -3169, 6801, -49, 1403, 17237, -1604, 4615, -1274, 7691, -9317, 16389, 121, 13, 12645, -10879, 7327, -534, 9429, };
const TfArray<1, int> tensor_dimension7 = { 1, { 48 } };
const TfArray<48, float> quant7_scale = { 48, { 0.00012145071377744898, 0.00029208193882368505, 0.00011367729166522622, 8.0519967013970017e-05, 0.00023628155759070069, 0.00012460924335755408, 0.00019457562302704901, 7.3948453064076602e-05, 9.6857540484052151e-05, 4.3482708861120045e-05, 9.0498848294373602e-05, 0.00023612080258317292, 0.00011566708417376503, 5.8101137256016955e-05, 0.00011178616841789335, 8.1898891949094832e-05, 5.8071567764272913e-05, 0.00012112139665987343, 0.00020724306523334235, 0.00015718046051915735, 0.00016235832299571484, 0.00012269896978978068, 0.00014912092592567205, 9.3953829491510987e-05, 0.00010869399557122961, 8.9016946731135249e-05, 6.6771615820471197e-05, 0.00021267309784889221, 8.7284104665741324e-05, 0.00024798823869787157, 0.00012780458200722933, 0.00011612343223532662, 0.00015526598144788295, 0.0001709126663627103, 6.4852261857595295e-05, 0.00019271335622761399, 0.00017843696696218103, 0.00038011206197552383, 0.00011049761087633669, 7.31357213226147e-05, 0.00010675414523575455, 0.00017766085511539131, 0.0001412112032994628, 0.00013120331277605146, 9.7295203886460513e-05, 0.00010519353236304596, 9.1928748588543385e-05, 0.0001160658139269799, } };
const TfArray<48, int> quant7_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(8) int32_t tensor_data8[48] = { 3690, 6919, 1674, -3571, 2182, 7320, 810, 4700, 932, 8171, 2515, 5632, -1087, 2995, 9578, 5123, 6556, 14536, 5026, 4952, -203, 1365, 5816, 6714, -6494, 1067, 7440, 2656, 9860, -33, 5830, 12228, 10869, 1048, 11439, 1467, 3189, 1669, 8358, -1518, 2365, -3818, 1918, -1519, 5477, -3163, -4076, 1037, };
const TfArray<1, int> tensor_dimension8 = { 1, { 48 } };
const TfArray<48, float> quant8_scale = { 48, { 8.7848886323627084e-05, 9.0300796728115529e-05, 0.00010625670256558806, 8.0090001574717462e-05, 0.00011770576384151354, 9.9788208899553865e-05, 0.00015831382188480347, 0.00011969374463660643, 0.00012089431402273476, 8.568313205614686e-05, 0.00011072729830630124, 8.8881788542494178e-05, 0.00018102051399182528, 0.00015342095866799355, 7.6728400017600507e-05, 8.7215674284379929e-05, 0.00010455038136569783, 5.8242079830961302e-05, 9.996316657634452e-05, 8.3260820247232914e-05, 0.0001376905565848574, 0.00013421408948488533, 9.9828059319406748e-05, 8.8705353846307844e-05, 0.00010056695464299992, 9.5844363386277109e-05, 9.4231218099594116e-05, 0.00011949076724704355, 7.5062460382468998e-05, 0.00015422231808770448, 8.7411062850151211e-05, 6.5554930188227445e-05, 7.1413625846616924e-05, 0.00010722829028964043, 6.7689601564779878e-05, 0.00013247193419374526, 0.00011030295718228444, 0.00015526289644185454, 7.9009958426468074e-05, 0.0001057172630680725, 0.00010594136983854696, 0.00010302117152605206, 0.00010657327220542356, 0.00010020535410149023, 8.9188266429118812e-05, 9.7097406978718936e-05, 0.00010061709326691926, 0.00011479116074042395, } };
const TfArray<48, int> quant8_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(8) int32_t tensor_data9[48] = { -237, 3077, -323, 13208, -3934, 7428, 3975, -9103, -1716, 3481, -2250, -2066, -5952, 18450, 20443, -3713, 10156, 375, -1200, -3163, 1197, -1523, -9217, -2954, -1415, -1903, 178, 1443, 874, 246, -1636, -42, -1955, 2313, 13482, 6666, -2849, -115, -1097, -6309, -542, 274, 25097, 5226, 12585, -5016, -1895, -2726, };
const TfArray<1, int> tensor_dimension9 = { 1, { 48 } };
const TfArray<48, float> quant9_scale = { 48, { 0.00012343874550424516, 0.00022324902238324285, 0.00019374300609342754, 9.5303657872136682e-05, 7.8717304859310389e-05, 9.385254088556394e-05, 0.00012466228508856148, 0.00012948454241268337, 0.00017430842854082584, 0.00018020051356870681, 0.00024330778978765011, 0.00017842798843048513, 0.00020868470892310143, 9.6416035376023501e-05, 6.5064588852692395e-05, 0.00013414907152764499, 0.0001229004847118631, 0.00017529794422443956, 0.00014827121049165726, 0.00015631901624146849, 0.00023300993780139834, 0.00014846677368041128, 0.00014572311192750931, 0.00028127478435635567, 0.00033233547583222389, 9.9558048532344401e-05, 0.0001253984373761341, 0.00020325256627984345, 0.00027394216158427298, 0.0001473442098358646, 0.00025719814584590495, 0.00021033658413216472, 0.00019200459064450115, 0.00013126269914209843, 0.00013629735622089356, 0.00010703017323976383, 0.00013167050201445818, 0.00011774958693422377, 0.00029883469687774777, 0.00011645488120848313, 0.00018303985416423529, 0.00045981598668731749, 5.5874992540339008e-05, 8.9798901171889156e-05, 9.7667245427146554e-05, 0.00012120130122639239, 0.00028955398011021316, 0.00011455077037680894, } };
const TfArray<48, int> quant9_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(8) int32_t tensor_data10[48] = { 1962, 20592, 2605, 3343, 2769, 735, -1757, 28858, 8152, 1094, 6382, 6862, 3801, 578, 3409, -2825, 11594, 2622, 14717, 4492, 3014, 6743, 5766, 601, 7464, 3330, -560, 9190, 5850, 1411, 13430, 1261, 8211, 10467, 3751, -858, 1127, -234, 3096, -511, 3450, 4560, 6029, 1429, 2832, -2824, 6413, 1877, };
const TfArray<1, int> tensor_dimension10 = { 1, { 48 } };
const TfArray<48, float> quant10_scale = { 48, { 0.0001400524633936584, 4.6374228986678645e-05, 0.00011582777369767427, 0.00011721217015292495, 9.9840886832680553e-05, 0.00014094989455770701, 0.00015235341561492532, 3.4141288779210299e-05, 9.7420277597848326e-05, 0.00017232941172551364, 8.2852173363789916e-05, 8.2752114394679666e-05, 0.00010437580203870311, 0.00013621375546790659, 9.4852686743251979e-05, 0.00010325800394639373, 7.0249850978143513e-05, 0.0001175288125523366, 6.0269125242484733e-05, 0.00010673879296518862, 0.00014581302821170539, 8.5244944784790277e-05, 9.0657318651210517e-05, 0.00012033263192279264, 8.9655652118381113e-05, 0.00010431774717289954, 0.00014932840713299811, 8.0271645856555551e-05, 8.9705383288674057e-05, 0.00011120156705146655, 6.301645771600306e-05, 0.00010988155554514378, 8.6047242803033441e-05, 7.8150485933292657e-05, 0.0001262642617803067, 0.0001315265690209344, 0.00012036980479024351, 0.00012462773884180933, 0.00011851671297335997, 0.00012577831512317061, 0.00012889296340290457, 0.00012165174848632887, 0.00010373714758316055, 0.0002014086494455114, 0.00015322460967581719, 0.00012415091623552144, 0.00010885028314078227, 0.00010052407014882192, } };
const TfArray<48, int> quant10_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(8) int32_t tensor_data11[48] = { 505, 7845, 35785, -5403, -189, -10446, -4000, -1324, 1789, -3732, 4507, 33104, 29456, 24007, -4122, 2752, 1938, 24181, 296, -13968, -6346, 18750, 17098, 7592, -757, -273, -9284, 27760, 4076, -4964, -749, 11712, -406, -553, -3455, 3077, 21549, -2858, -1798, -1412, -254, 16953, -405, -2083, 30286, -2605, 29579, -6326, };
const TfArray<1, int> tensor_dimension11 = { 1, { 48 } };
const TfArray<48, float> quant11_scale = { 48, { 5.415955456555821e-05, 0.0002558855339884758, 3.920055678463541e-05, 0.00015774511848576367, 0.00020268003572709858, 7.3366645665373653e-05, 0.00010093082528328523, 0.00023392518050968647, 0.0001423103385604918, 0.00014037344953976572, 0.00017489650053903461, 4.887803879682906e-05, 4.9417503760196269e-05, 4.8046236770460382e-05, 9.2308633611537516e-05, 9.0213783551007509e-05, 0.00017133753863163292, 5.3816842410014942e-05, 0.00012577440065797418, 8.0813348176889122e-05, 0.00010809309605974704, 8.2412596384529024e-05, 7.2338603786192834e-05, 0.00012970321404282004, 0.00015557953156530857, 9.8818600235972553e-05, 6.1628932598978281e-05, 5.7025223213713616e-05, 0.00017017274512909353, 9.396173118147999e-05, 0.00011784471280407161, 8.2220474723726511e-05, 0.00014713071868754923, 0.00013366836355999112, 8.5385989223141223e-05, 8.2051155914086848e-05, 5.9461839555297047e-05, 5.5047450587153435e-05, 0.00016143819084390998, 0.00019520244677551091, 9.8559939942788333e-05, 6.5027976233977824e-05, 8.1706602941267192e-05, 0.00013684717123396695, 4.4714841351378709e-05, 9.1303540102671832e-05, 5.4238484153756872e-05, 8.0387340858578682e-05, } };
const TfArray<48, int> quant11_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const ALIGN(8) int32_t tensor_data12[48] = { 8752, -2952, 23641, -9135, 8400, -2233, 4807, -19757, 21458, -3305, 5588, 65, 14097, -5803, -2114, 6728, 5202, 5349, -2036, 5857, -4456, 20311, 19356, 7757, 20118, 1538, 9318, 11280, -7814, 12430, 24580, 9533, 8336, 12525, -2206, 9425, 4918, 8424, -3965, 7004, 17201, 5770, -1654, -3026, 4458, -12763, 1741, -11581, };
const TfArray<1, int> tensor_dimension12 = { 1, { 48 } };
const TfArray<48, float> quant12_scale = { 48, { 0.0003884376201312989, 0.0002682236663531512, 0.00023478247749153525, 0.00010136442142538726, 0.00047394575085490942, 0.00052394892554730177, 0.00038971990579739213, 0.00034400587901473045, 0.00027227040845900774, 0.00052873074309900403, 0.00039395163184963167, 0.00030309802968986332, 0.00097962736617773771, 0.00012623342627193779, 0.00045338267227634788, 0.00030741968657821417, 0.00033899582922458649, 0.00043101940536871552, 0.00043200585059821606, 0.00047142602852545679, 0.00022992966114543378, 0.0002554161474108696, 9.2323760327417403e-05, 0.00028516794554889202, 0.00016598160436842591, 0.00058112561237066984, 0.00033948523923754692, 0.00014101818669587374, 0.00035846940591000021, 0.00012185957166366279, 0.00023683387553319335, 0.00040605268441140652, 0.00046425260370597243, 0.00012793883797712624, 0.00044852157589048147, 0.0004006847448181361, 0.00046163913793861866, 0.00028017963632009923, 0.0002642626641318202, 0.001118769752793014, 8.6667030700482428e-05, 0.0004232442588545382, 0.00027241327916271985, 0.00037996211904101074, 0.0002501561539247632, 0.00045716995373368263, 0.00045744990347884595, 0.00073485117172822356, } };
const TfArray<48, int> quant12_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(8) int32_t tensor_data13[48] = { -2786, -607, 5017, 2450, 2062, 19928, 4324, 3757, -620, 9171, 9003, -478, 2950, 9480, 518, 6178, -194, 2044, 2192, 19898, 1112, 6725, 3630, -1494, 13708, 2336, 7661, 1548, -2019, 7538, 8199, 6995, 373, 880, 1565, 41, 9793, 4642, -1815, -368, -3302, 20421, -11268, 19501, 6761, 28029, -977, -1205, };
const TfArray<1, int> tensor_dimension13 = { 1, { 48 } };
const TfArray<48, float> quant13_scale = { 48, { 0.00010056344763142988, 0.00012244317622389644, 0.00013265020970720798, 0.00010719679994508624, 0.00011198381980648264, 4.7947345592547208e-05, 0.00010415595170343295, 0.00010611603647703305, 0.00011393951717764139, 7.9686004028189927e-05, 8.3071165136061609e-05, 0.00012649408017750829, 0.00013796861458104104, 8.299100591102615e-05, 0.00016965862596407533, 9.1177920694462955e-05, 0.00014090907643549144, 0.00014212526730261743, 0.0001143259578384459, 4.7367248043883592e-05, 0.00012251133739482611, 0.00010724017192842439, 0.00011789715063059703, 0.00011805133544839919, 6.2868341046851128e-05, 0.00013009105168748647, 8.1090256571769714e-05, 0.00012818227696698159, 0.00011457411164883524, 0.00011300390906399116, 9.3171147454995662e-05, 8.9358967670705169e-05, 0.00013376264541875571, 0.0001648177276365459, 9.9378012237139046e-05, 0.00015551020624116063, 7.7603654062841088e-05, 0.00011838536738650873, 0.00010659875988494605, 0.00010244543955195695, 0.00010905362432822585, 4.4245418393984437e-05, 6.4135485445149243e-05, 4.7302099119406193e-05, 9.1207242803648114e-05, 3.5065149859292433e-05, 0.00015368266031146049, 0.0001157526348833926, } };
const TfArray<48, int> quant13_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(8) int32_t tensor_data14[48] = { -82, -3610, 28, -3100, -159, 1523, 3179, 1097, 1295, -4620, 20433, -1699, -3621, 14381, -1129, -7836, -8470, 3197, -9137, -7292, 15392, -1517, -4582, -543, -5331, 1339, -5166, -2678, -3737, 7986, 32020, -2005, 2342, 10026, 19881, -5756, 25114, 714, -2370, -19, -6662, -1862, -2795, -1642, 7872, -11409, -1281, -942, };
const TfArray<1, int> tensor_dimension14 = { 1, { 48 } };
const TfArray<48, float> quant14_scale = { 48, { 0.00026784130022861063, 0.00015393398643936962, 0.00012181434431113303, 0.00014932196063455194, 0.00021455118258018047, 0.000207359335036017, 0.00011456454376457259, 0.00017200749425683171, 0.00014887191355228424, 0.0002280629996675998, 8.1617901741992682e-05, 0.00012590746337082237, 0.00016364517796318978, 0.0001162905537057668, 0.00011999545677099377, 0.00014162974548526108, 0.00012714603508356959, 3.6928184272255749e-05, 6.528958328999579e-05, 0.00024487954215146601, 7.5364012445788831e-05, 0.00010484407539479434, 0.00020235752162989229, 0.00019846198847517371, 0.00019705489103216678, 0.00015484026516787708, 0.0001818211458157748, 0.00014342665963340551, 0.00020092644263058901, 0.00020208320347592235, 5.8074780099559575e-05, 8.6630461737513542e-05, 0.00019639660604298115, 0.00013061852951068431, 5.7919914979720488e-05, 0.00014227302744984627, 6.1604732763953507e-05, 0.00010543453390710056, 0.00023182935547083616, 0.00014013025793246925, 0.00016662747657392174, 0.00010289522469975054, 0.0002642676408868283, 0.00024403652059845626, 0.0001623017160454765, 0.00015637354226782918, 0.00013312845840118825, 0.00028715853113681078, } };
const TfArray<48, int> quant14_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(8) int32_t tensor_data15[48] = { 7491, 2721, 922, -165, 10414, -3683, 7165, -3796, 6907, 5160, 11244, 5334, 5772, 1361, 2103, 3780, 4287, 2160, 2551, 2834, 1883, 838, -541, 10512, 1053, 3022, 6507, 1225, 6424, -3663, 6743, 13187, 233, -2020, 4039, 4137, -681, 8721, 10643, 6885, 11811, 3714, 308, -1258, 5854, -2777, 3089, 74, };
const TfArray<1, int> tensor_dimension15 = { 1, { 48 } };
const TfArray<48, float> quant15_scale = { 48, { 9.5990719273686409e-05, 0.00011608724162215367, 0.00010253756772726774, 0.00016369395598303527, 7.6835844083689153e-05, 9.8115138825960457e-05, 0.00010336101695429534, 0.00013019041216466576, 0.00010804282646859065, 0.0001041408977471292, 6.6604756284505129e-05, 0.00011188153439434245, 0.00011190462100785226, 0.00014309720427263528, 0.00012844201410189271, 0.00015787135635036975, 0.00010488178668310866, 0.00014277058653533459, 0.00011080047261202708, 0.00013431049592327327, 0.00010668345930753276, 0.00011432365863583982, 0.00014721493062097579, 7.1917420427780598e-05, 0.00020008669525850564, 0.00011333067959640175, 8.3263403212185949e-05, 0.00017939468671102077, 9.4851879111956805e-05, 8.206081110984087e-05, 0.000112437381176278, 6.7930886871181428e-05, 0.00018422117864247411, 0.00012803850404452533, 0.00012342353875283152, 0.00011599413119256496, 0.00011910191824426875, 9.4310147687792778e-05, 7.6667296525556594e-05, 9.1902984422631562e-05, 7.3250957939308137e-05, 0.00013135385233908892, 0.00013145715638529509, 0.00011587156041059643, 0.00012131549010518938, 0.00013411512190941721, 0.00014550014748238027, 0.00012523570330813527, } };
const TfArray<48, int> quant15_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(8) int32_t tensor_data16[48] = { 12510, 304, -13482, -2601, -4859, -6106, -3804, -2065, 2092, 8138, -3192, -752, -1019, -2419, -2584, 3253, -3848, 15750, -490, -2332, -3035, -2856, -1693, 648, -2969, -1200, 1152, -5882, 12896, -2707, 17768, 309, -672, -3967, -3966, 15514, 10098, 1464, 5572, 11348, 1559, -3262, -1300, 3627, -8499, -420, -8444, -231, };
const TfArray<1, int> tensor_dimension16 = { 1, { 48 } };
const TfArray<48, float> quant16_scale = { 48, { 0.00013468989345710725, 0.00020071634207852185, 0.000101982950582169, 0.0001254359376616776, 0.00036239103064872324, 0.00016886199591681361, 0.00012567592784762383, 0.00035917665809392929, 0.00021882684086449444, 0.00017787513206712902, 0.00018608575919643044, 0.00018346628348808736, 0.00014492351328954101, 0.00013634111382998526, 0.00014164193999022245, 0.00012265131226740777, 0.00014353703591041267, 8.3731523773167282e-05, 0.00019580651132855564, 0.00020667295029852539, 0.00017338793259114027, 0.0002225771895609796, 0.00017258430307265371, 0.0002688454114831984, 0.0001261042634723708, 0.00016036171291489154, 0.00014323584036901593, 0.00011992343206657097, 9.5534793217666447e-05, 0.0001922988158185035, 0.00010887272219406441, 0.0002572580415289849, 0.0002609977382235229, 0.0002010033349506557, 0.00015322621038649231, 9.5718613010831177e-05, 0.00013432365085463971, 0.00017647042113821954, 0.00031577187473885715, 0.0001227743923664093, 0.00027087796479463577, 0.00021000698325224221, 0.00018129934323951602, 0.00022605257981922477, 0.0001218725010403432, 0.00044416254968382418, 0.00011782276851590723, 0.00021036305406596512, } };
const TfArray<48, int> quant16_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(8) int32_t tensor_data17[48] = { 4991, 4343, 2000, 5116, 3030, 656, 6075, -503, 18, 5586, -1891, 3931, 1519, 1213, 2324, 5525, 17051, 12391, 4544, 5675, 2691, 4433, -268, 50, -518, -2944, 6330, 8424, 467, 1398, 2343, 10538, 7397, 9215, 2094, -219, -282, -106, 2484, 3773, 8422, 2425, 408, 4083, 4270, 6345, 5957, 6887, };
const TfArray<1, int> tensor_dimension17 = { 1, { 48 } };
const TfArray<48, float> quant17_scale = { 48, { 0.00012634928862098604, 0.000106380510260351, 8.5103776655159891e-05, 0.00010222320270258933, 0.00015071220695972443, 0.00017809604469221085, 0.00011370761785656214, 0.00010439212928758934, 0.00013926193059887737, 9.4368377176579088e-05, 0.00015973226982168853, 0.00012903874448966235, 0.00012398995750118047, 0.00018170139810536057, 0.00016120322106871754, 0.00011362481745891273, 5.4055610235081986e-05, 7.4089788540732116e-05, 0.00011411283776396886, 0.00010468639811733738, 0.00015098373114597052, 9.8648473795037717e-05, 0.00011654169793473557, 0.00013296931865625083, 0.00014854977780487388, 0.00011363699013600126, 9.7465526778250933e-05, 9.5710034656804055e-05, 0.00014212039241101593, 0.00020589730411302298, 0.00015477380657102913, 6.9858775532338768e-05, 0.00011248972441535443, 7.8239339927677065e-05, 0.00011444120900705457, 0.00020965543808415532, 0.00015137293667066842, 0.00014806052786298096, 9.9119293736293912e-05, 0.0001016911119222641, 8.7172644271049649e-05, 0.00017784281226340681, 0.00013701309217140079, 0.00012970482930541039, 9.3553142505697906e-05, 0.00012184203660581261, 0.00010299783025402576, 9.7225049103144556e-05, } };
const TfArray<48, int> quant17_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const ALIGN(8) int32_t tensor_data18[48] = { 2909, 6119, 12580, -3708, 5651, 16270, -3515, -4903, -5758, 8241, -4, -854, -2878, -2359, -5684, -204, -1264, -1420, 27686, 2593, -5749, 480, -9416, -4975, -5404, -4693, -1313, 5396, -1370, 19238, 1624, 3764, 3034, -5242, -427, 7061, -8349, -7283, -1213, -178, 7082, 6238, -3341, 7816, -8218, -291, -309, -2297, };
const TfArray<1, int> tensor_dimension18 = { 1, { 48 } };
const TfArray<48, float> quant18_scale = { 48, { 0.00014844382531009614, 9.190202399622649e-05, 8.5529689386021346e-05, 0.00011033620830858126, 0.00014436585479415953, 6.4959611336234957e-05, 0.00013300444697961211, 0.00016919714107643813, 0.00013141195813659579, 0.00010956900950986892, 0.00017232635582331568, 0.00016167355352081358, 0.00011693236592691392, 0.00013222203415352851, 0.00016397092258557677, 0.00017102641868405044, 0.00015258647908922285, 0.00025124885723926127, 5.5940137826837599e-05, 0.00014660730084870011, 0.00012095534475520253, 0.00018642967916093767, 0.00012787368905264884, 9.4266528321895748e-05, 0.00015877342957537621, 0.00015229868586175144, 0.00019271043129265308, 0.00022230795002542436, 0.00019973248708993196, 6.336806109175086e-05, 0.00011325906234560534, 0.00014915921201463789, 0.00014282508345786482, 0.00016131433949340135, 0.00016003676864784211, 0.0001261688448721543, 0.00012663775123655796, 0.00013894654694013298, 0.00015169510152190924, 0.00015025436005089432, 0.00017089051834773272, 0.00010155158815905452, 0.00014689496310893446, 0.00010726487380452454, 9.6405201475135982e-05, 0.00018117793661076576, 0.00029725057538598776, 0.00019908069225493819, } };
const TfArray<48, int> quant18_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(8) int32_t tensor_data19[48] = { 3030, 2226, 3219, 3001, 2246, 4663, -3683, -787, -2493, 2123, 1466, 531, 8720, 2902, 2011, 1586, 24, -131, -2438, 3453, 2444, 6152, 11141, 1561, 8855, -762, 830, 4435, -2134, -2883, 2383, -1337, 1095, -954, 95, -8080, 937, 7, 135, -1999, 3991, 558, 2221, -2464, 9223, 3608, 216, -2100, };
const TfArray<1, int> tensor_dimension19 = { 1, { 48 } };
const TfArray<48, float> quant19_scale = { 48, { 0.00010771198867587373, 0.00018483282474335283, 0.0001641911658225581, 0.00010402545012766495, 0.00017581893189344555, 9.6494237368460745e-05, 0.0001401874324074015, 0.00017326243687421083, 0.00010416375880595297, 0.00020073585619684309, 0.00014353591541294008, 0.00019928732945118099, 8.7659645942039788e-05, 0.00017655086412560195, 0.00015170495316851884, 0.00012923595204483718, 0.00017785330419428647, 0.00013854401186108589, 0.00017017289064824581, 0.00017937376105692238, 0.00013859891623724252, 0.00011648553481791168, 7.7047436207067221e-05, 0.00014353604638017714, 7.1298723923973739e-05, 0.00017945090075954795, 0.00015759035886730999, 0.00014292652485892177, 0.00011553311924217269, 0.00017318851314485073, 9.9704964668489993e-05, 0.00014117256796453148, 0.00022729778720531613, 0.00022207017173059285, 0.00027798948576673865, 6.56780248391442e-05, 0.00015059416182339191, 0.0002545748429838568, 0.00019094045273959637, 0.00019978155614808202, 0.00012402560969348997, 0.00012622069334611297, 0.00016887292440515012, 0.00013408242375589907, 7.4291987402830273e-05, 0.00014920983812771738, 0.00022595541668124497, 0.00016678040265105665, } };
const TfArray<48, int> quant19_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(8) int32_t tensor_data20[48] = { -2115, -5799, 143, 36, 2516, 12354, 15664, 50, 15, 2727, -11729, -272, 1240, 8623, 3394, 186, -1014, 11044, 13427, 15376, -1875, -19, -158, -188, 29, 3853, 1003, 22, 9623, -3023, -222, 10071, 9137, -17153, 5035, -2194, -148, 345, -688, 220, -41, 9557, 11130, 423, 22199, 11658, 13211, 22069, };
const TfArray<1, int> tensor_dimension20 = { 1, { 48 } };
const TfArray<48, float> quant20_scale = { 48, { 0.00024544596089981496, 9.6298725111410022e-05, 0.00030264176893979311, 0.00055257155327126384, 0.00016484143270645291, 8.5008476162329316e-05, 8.33888043416664e-05, 9.4066934252623469e-05, 0.00043944863136857748, 8.4353043348528445e-05, 0.00011630132212303579, 0.00011096099478891119, 4.8966343456413597e-05, 0.00019949743000324816, 0.00012884908937849104, 0.0001031940191751346, 0.00014191753871273249, 0.00012505680206231773, 6.7754335759673268e-05, 0.00012763642007485032, 8.5120933363214135e-05, 0.00021301225933711976, 0.00099097436759620905, 0.00010330573422834277, 0.00048534275265410542, 6.2209037423599511e-05, 0.00011099892435595393, 0.00056544726248830557, 0.00011949426698265597, 0.00021691524307243526, 0.00028774121892638505, 0.00018258090130984783, 0.00012732118193525821, 0.00031829593353904784, 0.00015992771659512073, 0.00011795164755312726, 0.00015063413593452424, 0.00011976058158325031, 0.0001192636918858625, 5.6325661716982722e-05, 0.0006706765852868557, 0.00012516271090134978, 0.00023787407553754747, 6.5896718297153711e-05, 8.9913293777499348e-05, 0.00012180306657683104, 0.00011257024016231298, 5.8860474382527173e-05, } };
const TfArray<48, int> quant20_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(8) int32_t tensor_data21[48] = { -1195, 3368, 29593, 2415, 795, 6951, 37, -16674, -816, -1318, 20907, 1229, 17027, -2267, 1179, -2611, 293, -10681, 2679, 31477, -557, 25554, 31971, -1857, -2692, -2361, 27369, 32580, 1746, -1022, 2514, -420, -7454, 1352, -1914, -2285, -14842, 1139, -1520, -239, 31239, 21113, 28826, -7876, 41663, 1541, 16929, -1323, };
const TfArray<1, int> tensor_dimension21 = { 1, { 48 } };
const TfArray<48, float> quant21_scale = { 48, { 6.9911038735881448e-05, 3.4157135814893991e-05, 4.2153315007453784e-05, 5.9904275985900313e-05, 5.3064446547068655e-05, 6.6816137405112386e-05, 0.00010447933163959533, 4.9108435632660985e-05, 8.9291592303197831e-05, 5.7588353229220957e-05, 5.0434991862857714e-05, 5.0185921281808987e-05, 9.8690135928336531e-05, 4.7224326408468187e-05, 8.8767992565408349e-05, 5.328048428054899e-05, 3.7108278775122017e-05, 7.5673844548873603e-05, 9.8248536232858896e-05, 4.5453583879861981e-05, 9.2200985818635672e-05, 6.0718295571859926e-05, 7.7808115747757256e-05, 7.9047611507121474e-05, 7.5689240475185215e-05, 3.9604419725947082e-05, 4.2795818444574252e-05, 4.5656408474314958e-05, 7.3004957812372595e-05, 0.00012325499847065657, 9.8016229458153248e-05, 0.00010212633787887171, 4.1595380025682971e-05, 5.2241288358345628e-05, 5.5471395171480253e-05, 0.00025875636492855847, 6.5480606281198561e-05, 5.8971068938262761e-05, 4.9697409849613905e-05, 0.00011902052938239649, 4.3956613808404654e-05, 4.7485049435636029e-05, 5.5193377193063498e-05, 7.9592937254346907e-05, 4.2176980059593916e-05, 5.2349983889143914e-05, 5.3863768698647618e-05, 7.4055264121852815e-05, } };
const TfArray<48, int> quant21_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(8) int32_t tensor_data22[48] = { 14093, 29234, 21405, -729, -8680, 13379, 5717, 4562, 5309, 3704, 5902, 21336, 30382, -497, 4874, -3244, 5075, 47045, 6940, 13646, 26391, 5268, 7384, 8359, 31103, 8854, 5209, 30150, 26934, 3688, 5334, 9934, 6477, 3875, 15363, 12591, 2153, 11153, 2234, 558, 1817, 12603, 8503, 25897, 13632, 19848, 2762, 2053, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 5.4200379963731393e-05, 3.264800034230575e-05, 4.3546813685679808e-05, 0.00010129437578143552, 5.5315227655228227e-05, 5.892469926038757e-05, 7.9316487244796008e-05, 0.0001106952186091803, 5.7464363635517657e-05, 0.00010693014337448403, 0.00010552758612902835, 4.1457573388470337e-05, 3.1127183319767937e-05, 0.00011140139395138249, 8.3076913142576814e-05, 0.00010321596346329898, 0.00010154170740861446, 2.1868469048058614e-05, 7.0302288804668933e-05, 5.0449143600417301e-05, 3.6489258491201326e-05, 7.2416936745867133e-05, 6.2880324549041688e-05, 7.1258458774536848e-05, 3.0997947760624811e-05, 7.6863310823682696e-05, 7.7977121691219509e-05, 3.1238170777214691e-05, 3.4830532968044281e-05, 7.4711446359287947e-05, 9.7154101240448654e-05, 7.5834766903426498e-05, 8.2539954746607691e-05, 0.00010207286686636508, 5.0566326535772532e-05, 5.943884389125742e-05, 8.6817344708833843e-05, 5.9577065258054063e-05, 0.00012738308578263968, 9.8596508905757219e-05, 0.00010765076149255037, 6.2367515056394041e-05, 7.1895381552167237e-05, 3.5395736631471664e-05, 6.672958261333406e-05, 4.7560781240463257e-05, 9.5207964477594942e-05, 9.3949507572688162e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(8) int32_t tensor_data23[48] = { 2574, 46616, 927, -1639, 6231, 39, -318, 16061, -7628, 13687, -8867, 18378, 4853, -4584, 4847, -4083, -12701, 31485, -535, 12575, -887, -2921, -3640, -6208, -271, -5914, 977, -2364, -1036, 4579, 1331, 3260, -204, -543, -3782, -3545, -2452, 6804, -4125, -12584, -4455, -9953, 1457, -1282, 6791, 3470, -684, 12290, };
const TfArray<1, int> tensor_dimension23 = { 1, { 48 } };
const TfArray<48, float> quant23_scale = { 48, { 9.8351032647769898e-05, 5.5992531997617334e-05, 0.00013734507956542075, 0.00026811347925104201, 0.00012013004015898332, 9.4249407993629575e-05, 6.1535174609161913e-05, 6.0139620472909883e-05, 9.068607323570177e-05, 3.853506495943293e-05, 4.548735887510702e-05, 9.3857430329080671e-05, 0.00021364775602705777, 0.00016729842172935605, 0.00012245534162502736, 5.0653576181503013e-05, 3.4389751817798242e-05, 0.00010977813508361578, 9.3149501481093466e-05, 6.9160152634140104e-05, 7.2181093855760992e-05, 0.00015086708299349993, 0.00013656227383762598, 7.491052383556962e-05, 8.4646926552522928e-05, 6.9266119680833071e-05, 0.00018011973588727415, 0.00010376614955021068, 9.8803051514551044e-05, 7.1099006163422018e-05, 0.00010652582568582147, 8.3518134488258511e-05, 5.9491754655027762e-05, 0.00014219009608495981, 6.4546577050350606e-05, 0.00020858382049482316, 0.00012807836174033582, 0.00013370765373110771, 7.1847360231913626e-05, 4.3675921915564686e-05, 0.00013650795153807849, 4.3623815145110711e-05, 0.00012877992412541062, 0.00015860209532547742, 0.0002175465488107875, 9.0723442554008216e-05, 0.00014166672190185636, 3.0159881134750322e-05, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 0 };
const ALIGN(8) int32_t tensor_data24[48] = { 2179, 2280, 2468, -2479, 7636, 6224, 10954, 8518, 6166, -2309, 20633, 8687, -3794, 12212, 14774, 3422, 15690, 606, 59492, 16562, 7511, 25367, 16066, 5995, 4526, 29203, 614, 9147, 7831, -3322, 2695, 15549, 224, 6100, 1877, 15490, 3732, 10480, 1354, 3980, -1575, 17270, 13450, 8967, 5589, 12517, 1629, 5848, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 7.3296716436743736e-05, 9.7137482953257859e-05, 8.7000131316017359e-05, 0.00010268198820995167, 8.2271923020016402e-05, 7.4354109528940171e-05, 6.035779369994998e-05, 6.8610330345109105e-05, 6.5621301473584026e-05, 0.00010449458204675466, 3.9706348616164178e-05, 4.2342377128079534e-05, 4.7497720515821129e-05, 5.1794228056678548e-05, 5.4667008953401819e-05, 8.4228944615460932e-05, 4.2630821553757414e-05, 6.9427369453478605e-05, 1.6823632904561237e-05, 4.8577683628536761e-05, 6.3050574681255966e-05, 3.4528064134065062e-05, 5.1959352276753634e-05, 8.6576721514575183e-05, 6.289283192018047e-05, 3.228957939427346e-05, 8.6594882304780185e-05, 7.3326868005096912e-05, 6.2507642724085599e-05, 8.5590814705938101e-05, 6.5451618866063654e-05, 3.3668668038444594e-05, 7.6577176514547318e-05, 8.8184853666462004e-05, 8.6959356849547476e-05, 4.3896521674469113e-05, 7.7119286288507283e-05, 5.991249781800434e-05, 8.9466950157657266e-05, 6.5292573708575219e-05, 6.3697130826767534e-05, 4.1607567254686728e-05, 5.8643276133807376e-05, 8.4036895714234561e-05, 7.7244927524589002e-05, 5.378928835853003e-05, 6.5624444687273353e-05, 6.3485924329143018e-05, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(8) int32_t tensor_data25[48] = { -20368, -4240, 2569, -1846, -4931, -855, -3351, -19759, -16140, -12176, -584, 14728, 3182, 27672, -429, 25688, -13091, -5249, -2653, 12858, -8928, -18708, 10503, -6772, -9267, 28971, -1297, -138, 28948, 85, 5621, -8329, -11135, 28151, -3512, 166, -11534, 9589, -14572, -658, -3053, 18924, -893, 31981, -3847, -1274, -16334, -51, };
const TfArray<1, int> tensor_dimension25 = { 1, { 48 } };
const TfArray<48, float> quant25_scale = { 48, { 5.4949647164903581e-05, 7.9975528933573514e-05, 9.394663356943056e-05, 9.1512134531512856e-05, 0.00018530750821810216, 9.653245797380805e-05, 0.00014504390128422529, 5.840513767907396e-05, 4.3644067773129791e-05, 8.9011809905059636e-05, 7.9658500908408314e-05, 8.8271786808036268e-05, 8.0998317571356893e-05, 5.0713213568087667e-05, 6.4359672251157463e-05, 5.883200719836168e-05, 7.6926968176849186e-05, 9.4482471467927098e-05, 0.00011792941222665831, 0.00010404765635030344, 0.00010434038995299488, 8.6810578068252653e-05, 9.4885115686338395e-05, 7.2698610892985016e-05, 5.3489740821532905e-05, 9.3913491582497954e-05, 0.00011511935008456931, 0.00011227101640542969, 6.0871181631227955e-05, 0.00013798310828860849, 0.00010497829498490319, 6.7577973823063076e-05, 0.00011804012319771573, 4.2114967072848231e-05, 0.00011001933307852596, 0.00010452849528519437, 7.6022515713702887e-05, 4.080049620824866e-05, 6.1513113905675709e-05, 6.7480475991033018e-05, 0.00013141306408215314, 6.2489169067703187e-05, 5.6219119869638234e-05, 5.3205483709461987e-05, 6.9692774559371173e-05, 5.6011460401350632e-05, 6.0715348809026182e-05, 7.0886104367673397e-05, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(8) int32_t tensor_data26[48] = { -645, 4852, 3204, 40597, 12590, 9646, 11791, 2955, 6496, 24376, 3405, 3573, 6107, 41838, 8472, 6277, 11114, 9195, 7817, 37026, 25234, 5687, 3206, 5755, 2934, 16129, 393, 14616, -1697, 2021, 1896, 12584, 5559, 16662, 4493, 21064, -1329, -4040, 22781, 14399, 8704, 4062, 10725, 3891, 8116, 40751, 9535, 1381, };
const TfArray<1, int> tensor_dimension26 = { 1, { 48 } };
const TfArray<48, float> quant26_scale = { 48, { 8.2917809777427465e-05, 9.2786627647001296e-05, 0.00010312670201528817, 2.5316992832813412e-05, 5.653690459439531e-05, 6.0686288634315133e-05, 6.5597218053881079e-05, 8.6251762695610523e-05, 6.8415843998081982e-05, 3.8985162973403931e-05, 5.5886652262415737e-05, 6.1841979913879186e-05, 6.1273538449313492e-05, 2.3455308109987527e-05, 6.8456567532848567e-05, 6.4092302636709064e-05, 4.8522451834287494e-05, 6.0298276366665959e-05, 9.5436982519458979e-05, 2.7158033844898455e-05, 3.9702808862784877e-05, 8.346263348357752e-05, 8.3124119555577636e-05, 6.8088142143096775e-05, 7.6617587183136493e-05, 4.8880356189329177e-05, 7.3511102527845651e-05, 5.2686271374113858e-05, 0.00010630876931827515, 0.00014786908286623657, 0.00010320413275621831, 4.0995037124957889e-05, 8.1766476796474308e-05, 5.2176783356117085e-05, 7.0391623012255877e-05, 4.3141852074768394e-05, 0.00014248715888243169, 8.7184867879841477e-05, 4.2848405428230762e-05, 5.0266775360796601e-05, 4.819648529519327e-05, 6.824544834671542e-05, 6.0898339143022895e-05, 9.7621996246743947e-05, 6.6018539655487984e-05, 2.3807688194210641e-05, 6.5918844484258443e-05, 7.2823022492229939e-05, } };
const TfArray<48, int> quant26_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(8) int32_t tensor_data27[48] = { -4663, 13874, -495, 5596, -16020, 49359, -16398, 34885, 42903, -326, 40860, -2177, 35008, -1273, 20147, -396, -4364, 31394, -12249, 23561, 511, 35319, 2165, 33298, 3849, 3432, -4949, -9958, -2563, 968, -8907, 32304, -3023, 31094, -370, -4500, -209, -342, 21788, -581, 7057, 37364, -19715, -6090, 2873, -14438, -5269, -3310, };
const TfArray<1, int> tensor_dimension27 = { 1, { 48 } };
const TfArray<48, float> quant27_scale = { 48, { 6.2085389799904078e-05, 8.4946979768574238e-05, 5.8706511481432244e-05, 9.0916233602911234e-05, 0.00011643767356872559, 3.1261035474017262e-05, 4.9188045522896573e-05, 2.9309618184925057e-05, 2.9550095860031433e-05, 0.00018144401838071644, 2.8574517273227684e-05, 8.1257152487523854e-05, 3.5926921555073932e-05, 0.00013421602488961071, 6.7900706198997796e-05, 8.305342635139823e-05, 6.2247992900665849e-05, 4.2403680708957836e-05, 6.8352252128534019e-05, 0.00021792956977151334, 0.00013149259029887617, 3.1883631891105324e-05, 3.6411569453775883e-05, 2.7582818802329712e-05, 7.7073003922123462e-05, 8.9897926955018193e-05, 6.7890912760049105e-05, 0.00011361954966560006, 4.6783221478108317e-05, 8.0812278611119837e-05, 5.4509528126800433e-05, 6.971351831452921e-05, 6.6629727371037006e-05, 8.2351783930789679e-05, 6.757758092135191e-05, 8.2110469520557672e-05, 0.00011513495701365173, 0.00010539420327404514, 0.00015821465058252215, 6.5153762989211828e-05, 7.0454472734127194e-05, 3.651328370324336e-05, 5.0695758545771241e-05, 3.8142796256579459e-05, 7.7751923527102917e-05, 0.00010208781168330461, 5.1245766371721402e-05, 6.2922976212576032e-05, } };
const TfArray<48, int> quant27_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(8) int32_t tensor_data28[1280] = { -1890, -165, -472, -1156, 257, -630, -1086, -184, -879, -134, -1344, 80, -930, 301, 217, 16, 692, -415, -186, -614, -2771, -1389, 727, 1023, -3139, -1296, -534, -1361, -212, -833, -595, -440, -3266, -2486, -629, -872, -1152, -966, 180, -386, -1272, 123, -325, 317, -156, -1586, -780, -1168, -996, 146, -1205, 178, -1476, -603, -3114, -554, -1257, -1678, -1623, -643, 72, -2586, -975, 1752, -591, -2304, -546, -7, -1329, -243, -537, -518, -1947, -152, -1054, -240, -741, -1897, 2304, 121, -1381, 135, -1893, -1390, -1003, 601, -1939, 573, -2212, -641, 238, -1587, -1193, -1249, -1779, -1531, -479, 303, -902, -259, -109, -2207, -709, -1596, -16, -184, -1757, -1644, -1332, -1844, -1524, -1964, -492, 1079, -1086, -1738, -1396, -845, -171, -1205, 190, -559, -964, 139, -2245, -825, 546, -1364, -1558, 51, -499, 611, 142, -681, 69, -1029, -1917, -1280, -1830, 42, -170, -1609, 194, 1634, -1884, -155, -375, -711, -1996, 176, -644, -521, -1292, -1354, -1075, -2002, -1185, -1162, 81, -706, -2079, -615, -92, -418, -596, -1197, 155, -329, -1962, -1463, 3, -860, -2452, -147, -721, -1918, -276, -4480, 477, -1797, -277, -305, -272, 668, -1389, -387, -1466, -216, -805, -1211, -1139, -2762, -179, 820, 147, -1526, -1326, -1244, -2002, -425, -2028, -233, -366, -721, -1648, 1312, -1522, -207, -789, -800, -53, -655, -2634, -652, -1314, -892, -206, -544, -293, -304, -1978, 234, -234, -983, -856, -228, -2814, -1101, -1563, -410, 297, -46, 410, -760, -208, -1966, -2082, -1668, -477, 169, -991, -1648, -1134, -409, -1839, -1980, -1448, -879, -1041, -1272, -1069, -702, -1570, -1214, -207, 381, 276, -12, -1752, 1203, -1508, -2241, -1132, -423, -1315, 615, -829, -364, -2577, -1185, -129, -633, -1119, 196, -26, -1129, 462, -1102, -2218, -1100, -780, 206, -1777, -2047, -1396, -1676, -903, 189, 303, -528, -812, -1683, -829, 673, -476, -2938, -2272, -460, -332, 37, 367, -1250, -1835, -1191, -1328, 644, 258, 42, -214, -685, 969, -3031, -2227, 509, -497, -407, -428, -1668, -22, -751, -2115, -1241, -459, -161, -1321, -1874, 607, -749, -455, -664, -1842, 750, -729, -980, 403, -49, -1054, -233, -628, -1399, 409, -875, -1774, -2897, 2001, -1417, -1371, -146, 274, -1607, -1118, -2343, 539, -834, -560, -699, -2175, -660, 559, -1045, 230, -974, -1731, -585, -674, -681, -1682, -518, -2062, -254, -663, -3000, -582, -1371, 926, -390, -693, 119, -1639, -734, -292, -369, -1097, -1118, 349, -1725, -980, -1966, -315, -1751, 371, 91, -1984, -111, -944, 1476, -3443, 1023, 973, -1995, -277, -352, -1043, 641, -88, -520, 604, -934, -1304, -88, -1488, -709, 164, -1492, -1426, 333, -442, -694, -1158, 807, -579, -1347, -3869, -13, 22, -188, -207, -169, -2046, -413, -769, 1241, -260, 587, -258, -1279, -719, 15, 65, -576, -958, 69, 1368, 358, -1206, -772, -1850, 2273, -760, 374, -226, 32, -333, -710, -232, -645, -1203, -454, -2206, -1059, -961, 79, 66, -1106, -325, -1341, -1095, -1269, -996, 426, 1102, 87, 448, 492, 467, -894, -1137, -3008, 1178, -402, -75, 105, -678, 684, -98, -1232, -661, -1606, -1075, -475, -447, -1274, -245, -1269, -1304, -1241, -24, -352, -1271, -986, -590, -98, -1302, -147, -758, -693, 398, -567, -732, 88, -1021, 104, 153, -669, -16, -123, -984, -1120, -2034, -969, -1521, -44, -1840, 689, -1043, -1669, -1984, -1127, -905, -831, 395, 203, 540, 617, -378, 21, -1784, -1796, -2073, 101, 276, -459, 315, -1893, 358, -26, -1871, 328, -1375, -306, 853, 137, 509, -751, -1132, -920, 379, -661, 395, -176, -1007, -1151, -48, -2004, -960, -1351, -1814, -696, -385, -537, 605, -1233, -1028, 162, -167, -1498, -463, -863, -543, -781, -1106, -170, 131, 97, -1669, -831, -3402, -695, -441, -1418, -2806, -734, -318, -496, 618, -836, -359, -2959, 385, -1496, -794, -1976, 902, -494, -2353, 1111, -1395, -353, -2834, -2002, 97, -2450, -700, -529, -1523, -1889, -843, -4356, -613, -490, -1335, -583, -2041, -450, -1605, -1366, -1767, -1040, -1569, -3026, -1331, -1411, -883, 87, -1172, -877, 735, -908, 825, -736, -123, 1322, -837, -309, -829, 1423, -1752, 568, -364, -1301, -752, -898, -1307, 151, -999, -1522, -1193, -1394, -814, -1475, 104, -434, -1140, -1222, -2225, -1275, -94, -1760, 526, 10, -728, -165, -731, -1142, -146, -1450, -892, 14, 236, 590, -1949, -1575, -2102, -1580, -1580, -731, -1200, 52, -2437, -2375, -1667, -954, -473, -1374, 1116, -268, 14, -1675, -1863, -1659, 479, -73, 266, -891, -480, -1475, -875, -301, -1761, -2669, -626, -3063, -154, -435, -1258, -2745, -535, -2666, -2238, -492, 873, -301, -1280, 1092, -2035, -589, -1072, -650, -1004, 813, 1565, -1, -2268, -1828, 558, -1011, -2333, -1878, -204, -1682, -87, 1576, 2902, -112, -1887, -819, 144, 1038, -1093, -1446, -2712, -980, -185, 2766, -354, 301, -2469, -333, -1429, 20, 516, -1508, -1356, 112, -1566, -674, -767, 242, -1270, 575, 742, 164, -682, -1083, 155, -1497, 429, -1937, -347, -388, -1812, 596, 174, -561, -721, 79, -106, 365, -1275, -570, -1344, -905, -767, -676, -294, -445, -2410, 89, 644, 791, 16, -556, -1093, 67, 1468, -1014, -1716, -3251, -579, -1387, -2074, -2437, -1393, -1067, -108, -389, -1776, -2644, -2225, -35, -1364, -294, 272, -599, -1100, -868, 148, -292, -553, -636, -1419, -1436, 733, -1882, -829, -146, -496, -707, 780, -1394, -1100, -337, -1154, -2137, -559, -1877, -2019, -2431, -1222, 308, -357, -1180, -1168, -492, -2499, -691, -690, -2123, -1338, -717, 879, -833, -1337, -2192, -1266, -985, -329, -2168, -163, -261, -801, -1272, -1709, -14, -1230, -152, 148, -1252, -303, 228, -1474, 273, -477, -890, 177, -1675, -330, 514, -4, -872, 348, 212, -579, -1528, -723, 247, -1066, -2151, -264, -1399, -1120, 414, -1109, -618, -822, 9, -370, -1953, -689, 69, -490, 285, -148, -529, -944, -506, -1950, -134, -3881, -834, -2330, -1838, -1951, -3027, -3928, -712, 774, 154, -678, -1678, -1735, -395, 257, -2027, -1221, -1836, -1317, 876, -805, -2687, 1198, -2819, 760, -2391, -408, -9, -1862, -1371, -778, -2726, -427, 1542, -269, -565, -3456, 206, 859, 159, -1386, -1616, 49, -843, -622, -2005, -316, -1344, 173, 561, 38, 517, -1330, -1029, -2348, -357, -1292, -739, -885, -744, 875, -2959, 912, -1897, -1617, -1638, 222, -1302, -948, 555, -1788, -828, -509, -2129, 337, 936, 529, -800, 363, 84, -2409, -213, -1204, -1021, -2242, -1037, -1494, -700, 346, 60, -1190, -823, -720, -1245, -882, -851, 608, -1210, 253, 315, -1159, -767, -693, -1274, 548, -2251, 1331, -1199, -1706, -2187, -1412, -890, -576, -1353, -1537, -407, -903, -1147, -312, 337, -2597, -400, -355, -379, 298, -2069, -840, -866, 14, -1466, -1093, 305, -1231, -1154, -398, -1256, -266, -2154, -1588, -749, -2499, -1308, -2422, -1632, -1628, -1830, -966, 565, -2087, -189, -1474, 1907, -344, -3006, -1353, -836, 141, -1257, -2561, -432, -1868, -383, 295, -514, -925, -973, -135, 49, -3279, -535, -1195, -537, -431, -737, -790, -2794, -15, -995, 232, -481, 294, -3221, -344, -2622, -390, -536, -1586, 242, -864, -297, -1011, -520, -700, 455, -3330, -1675, -1977, 23, -815, 1854, -805, -1187, 1811, -2933, -1974, -980, -1585, -1991, -1920, -2443, -315, -1806, -2119, -343, -923, -1218, 241, 390, -1439, -492, 108, -897, -587, -836, -1182, -1550, -2228, 525, 180, -1051, 48, -894, -4484, 48, -2012, 683, 1092, -513, -1160, 334, 949, 1666, 149, -3479, -485, 964, -1111, -1330, 1019, -2775, -2811, -947, -1651, -860, 1217, -415, -1433, -1689, -73, 695, -1199, -3219, 518, -393, -2426, -1277, -1265, -317, 545, -786, -643, -785, 198, -53, -50, -1551, -977, -997, -853, -540, -1023, -1092, -2389, -1779, -1617, -2317, -197, -351, -1185, -936, -2814, -799, -3760, -1067, 1469, 171, 284, -1506, -2951, -2358, -1638, -2161, -1123, 1095, -734, -1551, -753, -1156, -620, -1097, 275, -436, 88, -898, 260, -545, -254, -2506, 903, -903, 173, 172, -1032, 1126, 1338, -572, -177, -1365, -516, -953, 409, -1744, -1922, -1677, -984, -651, -1333, -1570, -31, -1376, -2155, -885, -452, -750, -133, -1752, 1523, -162, 373, -983, -140, -998, -1137, -787, -1108, 421, -1684, -2482, -922, -1507, 414, 4, };
const TfArray<1, int> tensor_dimension28 = { 1, { 1280 } };
const TfArray<1280, float> quant28_scale = { 1280, { 0.0001635684457141906, 0.00011884231935255229, 0.00015210166748147458, 0.00015842767606955022, 0.00013847900845576078, 0.00020150899945292622, 0.00018900353461503983, 0.00015205235104076564, 0.00019069889094680548, 0.00018732213356997818, 0.00015181690105237067, 0.00016045333177316934, 0.00018449207709636539, 0.00019543401140253991, 0.00013549240247812122, 0.00010888843098655343, 0.000170834333403036, 0.00020402277004905045, 0.00015801560948602855, 0.00011888187873410061, 0.00015493322280235589, 0.0002277750609209761, 0.00020796417084056884, 0.00011254773562541232, 0.00012572872219607234, 0.00022032968990970403, 0.00018402982095722109, 0.00013777906133327633, 0.00014259757881518453, 0.00021309289149940014, 0.00016187227447517216, 0.00014544589794240892, 0.0001333956461166963, 0.00016563151439186186, 0.00015387999883387238, 0.00021551978716161102, 0.00017215849948115647, 0.0001627040037419647, 0.00014477498189080507, 0.0001746579073369503, 0.0001632253552088514, 0.00014658021973446012, 0.0001817638985812664, 0.00017661767196841538, 0.00015464096213690937, 0.00016115368634928018, 0.00014802919758949429, 0.00018058903515338898, 0.00017416436458006501, 0.00013489520642906427, 0.00017084224964492023, 0.00013105056132189929, 0.00014441511302720755, 0.00017384995589964092, 0.00010941335494862869, 0.00015529849042650312, 0.00021364257554523647, 0.00014521907723974437, 0.00015932566020637751, 0.00012741528917104006, 0.00015662449004594237, 0.00014697105507366359, 0.00014283339260146022, 0.00016970468277577311, 0.00011428186553530395, 0.00012477755080908537, 0.00018854880181606859, 0.00017590145580470562, 0.00015880270802881569, 0.0002153944515157491, 0.00012266389967408031, 0.00019753142260015011, 0.00015909163630567491, 0.00016641846741549671, 0.00014587094483431429, 0.0001664131268626079, 0.00014882122923154384, 0.00019557298219297081, 0.00016648853488732129, 0.00013351751840673387, 0.00016938046610448509, 0.00010023135837400332, 0.00010056629253085703, 0.00015735834313090891, 0.00011400456423871219, 0.00019000213069375604, 0.00013405195204541087, 0.00011293607531115413, 0.00020219616999384016, 0.00016581302043050528, 0.00014552375068888068, 0.00021296013437677175, 0.00018318752699997276, 0.00019279352272860706, 0.00011185523908352479, 0.00014257454313337803, 0.0001721787266433239, 0.00015032086230348796, 0.00020869431318715215, 0.00015510088996961713, 0.0002109260531142354, 0.00014827550330664963, 0.00012106093345209956, 0.00013837954611517489, 0.00014728594396729022, 0.00015453384548891336, 0.00014348444528877735, 0.0001567927683936432, 0.00016023890930227935, 0.00014834057947155088, 0.00014781866047997028, 0.00015605564112775028, 0.00015190767589956522, 0.00018605246441438794, 0.00013161372044123709, 0.00016983471869025379, 0.00014175962132867426, 0.00019925633387174457, 0.00014266533253248781, 0.00011509296746226028, 0.00015480798901990056, 0.00015811026969458908, 0.00015476559929084033, 0.00015296971832867712, 0.00013818636944051832, 0.00016993068857118487, 9.8052703833673149e-05, 0.00015621066268067807, 0.00020449231669772416, 0.00015742829418741167, 0.00012941201566718519, 0.00017322511121165007, 0.00014072042540647089, 0.0001954597100848332, 0.00017417258641216904, 0.00018881673167925328, 0.00014444661792367697, 0.00017068831948563457, 0.00011684089986374602, 0.00012886448530480266, 0.00017486127035226673, 0.00015020268619991839, 0.00014429853763431311, 0.00012220785720273852, 0.00011976357200182974, 0.00019879660976585001, 0.0001144978086813353, 0.00010802882025018334, 0.00013183207192923874, 0.00012879619316663593, 0.00012029977369820699, 0.00016404884809162468, 0.0001369213277939707, 0.00013354176189750433, 0.0001596892107045278, 0.000160668816533871, 0.00014064990682527423, 0.00019725694437511265, 0.00017141838907264173, 0.00014860783994663507, 0.00017383035446982831, 0.00013848966045770794, 0.00016865490761119872, 0.00017913237388711423, 0.00014138386177364737, 0.00018294779874850065, 0.00010509396815905347, 0.00016781424346845597, 0.00012157292076153681, 0.00014735967852175236, 0.00025724217994138598, 0.00018175534205511212, 0.00014959814143367112, 0.00014664883201476187, 0.00014346228272188455, 0.00018207423272542655, 0.0001674523955443874, 0.0001445568777853623, 0.00017129555635619909, 0.00011931835615541786, 0.00013345018669497222, 0.00019149291620124131, 0.00014639327127952129, 0.00012685687397606671, 0.00012450854410417378, 0.00023106457956600934, 0.00014012304018251598, 0.00021102032042108476, 0.00020120074623264372, 0.00013462873175740242, 0.0001283289457205683, 0.00015684987010899931, 0.00016084480739664286, 0.00017899248632602394, 0.00016406404029112309, 0.00013049987319391221, 0.00015568360686302185, 0.00014783014194108546, 0.00014624005416408181, 0.00013689497427549213, 0.00020209401554893702, 0.00018728128634393215, 0.00014689780073240399, 0.0001530743611510843, 0.00010137263598153368, 0.00011077327508246526, 0.00017695371934678406, 0.00016779663565102965, 0.00020347842655610293, 0.00013965270773041993, 0.00014275993453338742, 0.00017383310478180647, 0.00013679321273230016, 0.00020626289187930524, 0.00011764921509893611, 0.00015277304919436574, 0.0001612551131984219, 0.00014209111395757645, 0.00013873595162294805, 0.00018610827100928873, 0.00015437741240020841, 0.0001563368714414537, 0.00018789668683893979, 0.00017217357526533306, 0.00016039352340158075, 0.00016223086277022958, 0.00013979649520479143, 0.00013419316383078694, 0.00015401422569993883, 0.00017056211072485894, 0.00015077089483384043, 0.00019775898545049131, 0.00020735521684400737, 0.00017867860151454806, 0.0001896889298222959, 0.00013795333507005125, 0.00015353149501606822, 0.00013395141286309808, 0.00016408250667154789, 0.00015410072228405625, 0.00020023867546115071, 0.00011743274080799893, 0.00016905048687476665, 0.00014477426884695888, 0.00011829305731225759, 0.00016238431271631271, 0.00016517149924766272, 0.00015334243653342128, 0.00020430202130228281, 0.00014549413754139096, 0.00013499564374797046, 0.00016099213098641485, 0.00019197004439774901, 0.00024314133042935282, 0.00015039114805404097, 0.00017577577091287822, 0.0001378850283799693, 0.0001357865403406322, 0.00013368773215916008, 0.00013900274643674493, 0.0001499558420618996, 0.00015599615289829671, 0.00013767999189440161, 0.0001477518817409873, 0.00016714668890926987, 0.00016264017904177308, 0.00014148742775432765, 0.00013046941603533924, 0.00013866351218894124, 0.00011940741387661546, 0.00013579342339653522, 0.00013572693569585681, 0.0001658489927649498, 0.00013779477740172297, 0.00017462043615523726, 0.00015771828475408256, 0.00012237453483976424, 0.00015164975775405765, 0.00013849600509274751, 0.00017321978521067649, 0.00014854315668344498, 0.00013402847980614752, 0.00011086087033618242, 0.00014528230531141162, 0.00019167838036082685, 0.000148750827065669, 0.00013375634443946183, 0.00017175005632452667, 0.00014104327419772744, 0.0001456211757613346, 0.00013531777949538082, 0.0001290277432417497, 0.00022054146393202245, 0.00015450152568519115, 0.00021436125098261982, 0.0001636644738027826, 0.00014549202751368284, 0.00015720777446404099, 0.00015563108900096267, 0.00018730216834228486, 0.0001309038489125669, 0.00015101647295523435, 0.00016348224016837776, 0.00019564293324947357, 0.00012936987332068384, 0.00017521630798000842, 0.00013793815742246807, 0.00018135570280719548, 0.00015553466801065952, 0.00015343679115176201, 0.00014417053898796439, 0.00011600366997299716, 0.00011639948206720874, 0.00016337551642209291, 0.00019740297284442931, 0.00014010787708684802, 0.00017248604854103178, 0.00017038725491147488, 0.00017530241166241467, 0.00016937464533839375, 0.00015272146265488118, 0.00012843147851526737, 0.00017362616199534386, 0.00014561644638888538, 0.00016164941189344972, 0.0001071437873179093, 0.00015508079377468675, 0.00020747107919305563, 0.00014413062308449298, 0.00011655666457954794, 0.00019555923063308001, 0.00013559959188569337, 0.00018492956587579101, 0.00020922278054058552, 0.00013607779692392796, 0.00016794422117527574, 0.00012915155093651265, 0.00014145043678581715, 0.00021020788699388504, 0.00015858864935580641, 0.00014570441271644086, 0.00016949513519648463, 0.00012078390864189714, 0.0001182645937660709, 0.00013883714564144611, 0.00018071151862386614, 0.0001351015962427482, 0.00013564762775786221, 0.00021170893160160631, 0.00015632492431905121, 0.00012955174315720797, 0.00011542046559043229, 0.0001287889463128522, 0.00014642431051470339, 0.00014967595052439719, 0.00011621036537690088, 0.00013330868387129158, 0.00015507247007917613, 0.00012132377742091194, 0.00024137561558745801, 0.00013681048585567623, 0.00016074610175564885, 0.00015132898988667876, 0.00013212331396061927, 0.00019655133655760437, 0.00014246111095417291, 0.00020403442613314837, 0.00017410474538337439, 0.00013894631410948932, 0.00011231206735828891, 0.00020116848463658243, 0.00011102354619652033, 0.00014987593749538064, 0.0001645905285840854, 0.00012800110562238842, 0.00014219911827240139, 0.00016849544772412628, 0.00016904025687836111, 0.00013603777915704995, 0.00017975110677070916, 0.00012528082879725844, 0.00012778870586771518, 0.00011002129758708179, 0.00017361294885631651, 0.00017598828708287328, 0.00014514682698063552, 0.00016113894525915384, 0.00013614512863568962, 0.00017707953520584852, 0.00011605513282120228, 0.00014864998229313642, 0.00013728992780670524, 0.00012151167902629822, 0.00014471716713160276, 0.00013591368042398244, 0.00010990870941895992, 0.00012216877075843513, 0.00012358554522506893, 0.00013263437722343951, 0.00017100121476687491, 0.00019153593166265637, 0.00019759024144150317, 0.00015558574523311108, 0.00014441793609876186, 0.0001969540462596342, 0.00019310777133796364, 0.00014373507292475551, 0.00012814161891583353, 0.00015739575610496104, 0.00017006427515298128, 0.00013164115080144256, 0.00019529789278749377, 0.00018795508367475122, 0.00013259840488899499, 0.00015860499115660787, 0.00011262089537922293, 0.0001361717440886423, 0.00021526764612644911, 0.00012242454977240413, 0.00016884437354747206, 0.00013477371248882264, 0.00014465155254583806, 0.00016130575386341661, 0.00018386206647846848, 0.00023300712928175926, 0.00016673110076226294, 0.0001588668383192271, 0.00012312704348005354, 0.00011436070053605363, 0.00015176224405877292, 0.00017216222477145493, 0.00019982650701422244, 0.0001197719611809589, 0.00015969267406035215, 0.00010373593977419659, 0.00018273305613547564, 0.00017228252545464784, 0.00013403181219473481, 0.00017780820780899376, 0.00017259709420613945, 0.00015645647363271564, 0.00015726905257906765, 0.00012489364598877728, 0.00015460593567695469, 0.00023332647106144577, 0.00012100044114049524, 0.00014044162526261061, 0.00013290018250700086, 0.000212497339816764, 0.00012794019130524248, 0.00017768151883501559, 0.00015298144717235118, 0.00014756601012777537, 0.00017596516408957541, 0.00014528846077155322, 0.00020542928541544825, 0.00015583634376525879, 0.00014576036483049393, 0.00016728240007068962, 0.00015238294145092368, 0.00019769484060816467, 0.00015150259423535317, 0.00019059823534917086, 0.00015808854368515313, 0.00018299139628652483, 0.00011506743612699211, 0.00013387050421442837, 0.00017763598589226604, 0.00011681079922709614, 0.00019387362408451736, 0.00015736045315861702, 0.00018917088164016604, 0.00013991205196361989, 0.00011540845298441127, 0.00019004853675141931, 0.00014705563080497086, 0.0001823298807721585, 0.00012226944090798497, 0.00013754551764577627, 0.00013083795784041286, 0.00015334617637563497, 0.00019224837888032198, 0.00018258884665556252, 0.00012982940825168043, 0.00012057909771101549, 0.00015170915867201984, 0.00020439302898012102, 0.00013572670286521316, 0.00020031990425195545, 0.00012983351189177483, 0.00015780414105392992, 0.00016759504796937108, 0.00016931419668253511, 0.00018089050718117505, 0.00015164709475357085, 0.00015032927331048995, 0.00012232217704877257, 0.00020747767121065408, 0.00016689092444721609, 0.00014131540956441313, 0.00012382287241052836, 0.00021142035257071257, 0.00014746344822924584, 0.00019910166156478226, 0.00023821178183425218, 0.00014881568495184183, 0.00012465871986933053, 0.00017629974172450602, 0.00015264822286553681, 0.00015635242743883282, 0.00013082538498565555, 0.0001854110014392063, 0.00015273432654794306, 0.00015800772234797478, 0.00014553198707289994, 0.00014924102288205177, 0.00013786522322334349, 0.00016555724141653627, 0.00013095086615066975, 0.00015543638437520713, 0.00010962557280436158, 0.00014551723143085837, 0.00016470055561512709, 0.00015838055696804076, 0.0001583078847033903, 0.00012430624337866902, 0.00019448807870503515, 0.00014768373512197286, 0.00015487062046304345, 0.00021174554422032088, 0.00017727723752614111, 0.00020283114281482995, 0.00013587578723672777, 0.00013716635294258595, 0.00013728791964240372, 0.00016485353989992291, 0.00017455614579375833, 0.00014641751477029175, 0.00017910494352690876, 0.00012084619083907455, 0.00012656609760597348, 0.00011986216850345954, 0.00010593437036732212, 0.00013010473048780113, 0.00012796504597645253, 0.00020987239258829504, 0.00015704793622717261, 0.00018058391287922859, 0.00013482713256962597, 0.00021250593999866396, 0.00015024257299955934, 0.00012333983613643795, 0.00016075256280601025, 0.00019087950931861997, 0.00018364618881605566, 0.00013175451022107154, 0.00020204835163895041, 0.0001876684109447524, 0.00016698276158422232, 0.000220331727177836, 0.00015788934251759201, 0.00015476705448236316, 0.00017835876496974379, 0.00013771140947937965, 0.00013798029976896942, 0.0001517648488515988, 0.00013174979540053755, 0.00013321326696313918, 0.00018858604016713798, 0.00016406213399022818, 0.00013414744171313941, 0.00015053142851684242, 0.00016404794587288052, 0.00013305505854077637, 0.00012144983338657767, 0.00015258688654284924, 0.00021645006199833006, 0.00014527719758916646, 0.0001288846688112244, 0.00016097993648145348, 0.0001493980671511963, 0.000125909733469598, 0.00016109982971101999, 0.00019199663074687123, 0.00014213740359991789, 0.0001459154300391674, 0.00010948241106234491, 0.00018166453810408711, 0.00017071685579139739, 0.00013503753871191293, 0.00015198090113699436, 0.00014602672308683395, 0.00019204859563615173, 0.00017089405446313322, 0.0001955301413545385, 0.00020413160382304341, 0.0001494141761213541, 0.00014490095782093704, 0.00013265028246678412, 0.0001226293679792434, 0.00017907671281136572, 0.00011984746379312128, 0.00012535834684967995, 0.00016840852913446724, 0.00015160896873567253, 0.00019475206499919295, 0.00016706722090020776, 0.00013455521548166871, 0.00012911668454762548, 0.00015514851838815957, 0.00018111930694431067, 0.00014672573888674378, 0.0001969557924894616, 0.00014176717377267778, 0.00018891188665293157, 0.00016033016436267644, 0.00016106458497233689, 0.0001202738203573972, 0.00013545826368499547, 0.00014575109526049346, 0.00013710827624890953, 0.00016980170039460063, 0.00013200454122852534, 0.00014072394696995616, 0.00018722652748692781, 0.00013030205445829779, 0.00017448294966015965, 0.00016335200052708387, 0.00016428086382802576, 0.0001364935451420024, 0.00014736475714016706, 0.00015703558165114373, 0.00013761318405158818, 0.00014556426322087646, 0.0002191945823142305, 0.00016508671978954226, 0.00017224940529558808, 0.00023595051607117057, 0.00013892442802898586, 0.0001796271390048787, 0.00015080221055541188, 0.00013132311869412661, 0.00016272946959361434, 0.00014179365825839341, 0.00015960089513100684, 0.0001346471399301663, 0.00016982117085717618, 0.0001887642138171941, 0.00015407080354634672, 0.00014343511429615319, 0.00015443857409991324, 0.0001617018278921023, 0.0002109894558088854, 0.0001861011260189116, 0.00011529366747708991, 0.00021464057499542832, 0.00013736657274421304, 0.00015562390035483986, 0.00014415226178243756, 0.00011132022336823866, 0.00020636386761907488, 0.00010410179675091058, 0.00015857566904742271, 0.00014968855248298496, 0.00016153314209077507, 0.00012114052515244111, 0.00017400724755134434, 0.00017292819393333048, 0.00017530625336803496, 0.00012426458124537021, 0.00020226104243192822, 0.00014180268044583499, 0.00018353901396039873, 0.00012434704694896936, 0.00017577742983121425, 0.00011250460374867544, 0.00016269009211100638, 0.00019825813069473952, 0.00012298981891945004, 0.00019074864394497126, 0.00012632604921236634, 0.00015610965783707798, 0.00012183153739897534, 0.00013924457016400993, 0.00017708379891701043, 0.00018947522039525211, 0.00013587044668383896, 0.00014463171828538179, 0.00011320829071337357, 0.00016792613314464688, 0.00015776487998664379, 0.00012718388461507857, 0.00012188838445581496, 0.00015865797467995435, 0.00016808757209219038, 0.0001667108153924346, 0.00020659819710999727, 0.00022976675245445222, 0.00017151709471363574, 0.0001362674665870145, 0.00015249918214976788, 0.00011672633263515308, 0.000166720972629264, 0.00017860533262137324, 0.00012780938413925469, 0.00013930218119639903, 0.00015169574180617929, 0.00017243933689314872, 0.00014345668023452163, 0.0001137023136834614, 0.00016896496526896954, 0.00012335948122199625, 0.00018005192396230996, 0.00016737420810386539, 0.00016902701463550329, 0.00012638697808142751, 0.00014419676153920591, 0.00015201182395685464, 0.00011927242303499952, 0.00017107157327700406, 0.00015591147530358285, 0.00018864961748477072, 0.00013439690519589931, 0.00012502873141784221, 0.00018929872021544725, 0.00020496474462561309, 0.00015403333236463368, 0.00016922717622946948, 0.00018879148410633206, 0.00012499265721999109, 0.00010614859638735652, 0.0001253218506462872, 0.00011555447417777032, 0.00014615095278713852, 0.00015391512715723366, 0.00016811075329314917, 0.00012021505972370505, 0.00014537763490807265, 0.00014433408796321601, 0.00015094790433067828, 0.00013473056606017053, 0.0001188796159112826, 0.00014259267481975257, 0.00015192558930721134, 0.00018766500579658896, 0.00015011496725492179, 0.00012605050869751722, 0.00018578975868877023, 0.00010141505481442437, 0.00015315042401198298, 0.00014497886877506971, 0.00012974036508239806, 0.00014239511801861227, 0.00010563517571426928, 0.00019845328642986715, 0.00011892768088728189, 0.00013463238428812474, 0.00014052671031095088, 0.0001623478892724961, 0.00020326024969108403, 0.00015569882816635072, 0.000159961506142281, 0.00016581850650254637, 0.00013397616567090154, 0.00019905994122382253, 0.00016722171858418733, 0.00016543938545510173, 0.00015395168156828731, 0.00015437426918651909, 0.00012294636690057814, 0.00014480667596217245, 0.00011811200965894386, 0.00018196854216512293, 0.00011333396832924336, 0.00025412373361177742, 0.00020077744557056576, 0.00017021686653606594, 0.0001372002880088985, 0.00017020908126141876, 0.00012996973237022758, 0.00012602889910340309, 0.00011483702110126615, 0.00019047969544772059, 0.00014907548029441386, 0.00016205359133891761, 0.00016565050464123487, 0.00012106190843041986, 0.00018923028255812824, 0.00014792321599088609, 0.0002009078161790967, 0.00016107129340525717, 0.00013507233234122396, 0.0001725352049106732, 0.00013169350859243423, 0.00011888395965797827, 0.00014521356206387281, 0.00016106656403280795, 0.00014254995039664209, 0.00013100425712764263, 0.00021286153059918433, 0.00020942483388353139, 0.00020218640565872192, 0.0001549260487081483, 0.0001285525067942217, 0.00017424278485123068, 0.00012184040679130703, 0.00014625563926529139, 0.00012778447126038373, 0.0001598382368683815, 0.00013341059093363583, 0.00022208500013221055, 0.00016123861132655293, 0.00015260426152963191, 0.00015225198876578361, 0.00021723388636019081, 0.00013010800466872752, 0.00018091434321831912, 0.00014365921379067004, 0.00017430077423341572, 0.00016809094813652337, 0.00015634177543688565, 0.00014174688840284944, 0.00020886931451968849, 0.00017188163474202156, 0.00015549978706985712, 0.00014327415556181222, 0.00013195635983720422, 0.00019235127547290176, 0.00020072261395398527, 0.0001369267120026052, 0.00014902255497872829, 0.00016205708379857242, 0.00013169563317205757, 0.00013232957280706614, 0.00022464767971541733, 0.00012741240789182484, 0.00015055967378430068, 0.00015006860485300422, 0.000120510310807731, 0.0001185124710900709, 0.00014680974709335715, 0.00011662628821795806, 0.00021929963259026408, 0.00013614133058581501, 0.00019551852892618626, 0.00013218251115176827, 0.00014496062067337334, 0.00010555193875916302, 0.00013502870569936931, 0.0001624404831090942, 0.00011142960283905268, 0.00016908776888158172, 0.00012494860857259482, 0.00018152754637412727, 0.00015893323870841414, 0.00013969989959150553, 0.00013860252511221915, 0.00012362255074549466, 0.00011512305354699492, 0.00013719612616114318, 0.00013578464859165251, 0.00018231869034934789, 0.00018038065172731876, 0.00014057110820431262, 0.00014631265366915613, 0.00016510429850313812, 0.00018732882745098323, 0.00016460915503557771, 0.00016025159857235849, 0.00012393867655191571, 0.0001599335519131273, 0.00016953625890891999, 0.00018333927437197417, 0.00015811411140020937, 0.00016931543359532952, 0.00018140286556445062, 9.5844952738843858e-05, 0.00013250284246169031, 0.00015558135055471212, 0.00010384727647760883, 0.00012101846368750557, 0.00012543547200039029, 0.00013814662816002965, 0.00013126693374942988, 0.00013615375792142004, 0.00010765860497485846, 0.00012962723849341273, 0.00013772460806649178, 0.00022144133981782943, 0.0001594889909029007, 0.00018845406884793192, 0.00018461914442013949, 0.00017229131481144577, 0.00011093592183897272, 0.00011560794519027695, 0.00015878172416705638, 0.00017237101565115154, 0.00011879471276188269, 0.00017297457088716328, 0.00014867555000819266, 0.00017814317834563553, 0.00011390709551051259, 0.00018371775513514876, 0.00018932759121526033, 0.00016843010962475091, 0.00011633776739472523, 0.00016209323075599968, 0.00013048802793491632, 0.00014734524302184582, 0.00013553678581956774, 0.0001438439212506637, 0.00013097195187583566, 0.00014164602907840163, 0.00016316579421982169, 0.00013106768892612308, 0.00015553260163869709, 0.00019745642202906311, 0.00014861092495266348, 0.00014889234444126487, 0.00019299627456348389, 0.00012289789447095245, 0.00012348183372523636, 0.00018596924201119691, 0.00014079778338782489, 0.00011329278640914708, 0.00019291220814920962, 0.00015143457858357579, 0.00013355369446799159, 0.000153910688823089, 0.00017329401453025639, 0.00017400494834873825, 0.00018891799845732749, 0.0001702516310615465, 0.00017322853091172874, 0.00015974663256201893, 0.00017020369705278426, 0.0001399450411554426, 0.00017247152572963387, 0.00015926160267554224, 0.00016393252008128911, 0.00015196306048892438, 0.00011969949264312163, 0.00013277799007482827, 0.00014627572090830654, 0.00015292364696506411, 0.00016194453928619623, 0.00012929571676068008, 0.0001634091604501009, 0.00014242569159250706, 8.4368679381441325e-05, 0.00020451805903576314, 0.00012843524746131152, 0.00013619405217468739, 0.00013500842032954097, 0.00014844530960544944, 0.00011077892850153148, 0.00017251701501663774, 0.00013869913527742028, 0.00010715393727878109, 0.00014549160550814122, 0.00011426818673498929, 0.00015826073649805039, 0.00015846958558540791, 0.0001369856036035344, 0.00012463142047636211, 9.126435179496184e-05, 0.00014272623229771852, 0.00019588509167078882, 0.00016454300202894956, 0.00013331475201994181, 0.00017976785602513701, 0.00016946761752478778, 0.00011711107072187588, 0.00015180633636191487, 0.00011229384108446538, 0.000161131945787929, 0.00014972953067626804, 0.00017619956634007394, 0.00018035754328593612, 0.00015265750698745251, 0.00013047826359979808, 0.00014071645273361355, 0.00014443189138546586, 0.00013795463019050658, 0.00012684296234510839, 0.00017677842697594315, 0.00017178300186060369, 0.00017040269449353218, 0.00011341412027832121, 0.00014062479021959007, 0.00021054134413134307, 0.00014370745338965207, 0.00015337609511334449, 0.00014910011668689549, 0.00018044786702375859, 0.00021427169849630445, 0.0001795376738300547, 0.00014354368613567203, 0.0001436387246940285, 0.00017561829008627683, 0.00016291136853396893, 0.00012762917322106659, 0.00012041682202834636, 0.00014050032768864185, 0.00015517135034315288, 0.00016402473556809127, 0.00018785694555845112, 0.00014438039215747267, 0.00015340748359449208, 0.00020697861327789724, 0.00021507222845684737, 0.00012233498273417354, 0.00018473304226063192, 0.00015574453573208302, 0.00014175599790178239, 0.00012424470332916826, 0.00012907400378026068, 0.00017429221770726144, 0.00023433459864463657, 0.00012703055108431727, 0.00012452497321646661, 9.5135430456139147e-05, 0.00019102060468867421, 0.00015649889246560633, 0.00015197870379779488, 0.00017079387907870114, 0.00014245188503991812, 0.00010394810669822618, 0.00013367025530897081, 0.00013473264698404819, 0.00019348032947164029, 0.00016423860506620258, 0.00018880443531088531, 0.00016855415015015751, 0.00016773225797805935, 0.00013853471318725497, 0.00011909267777809873, 0.00016332218365278095, 0.0001394253340549767, 0.00019897191668860614, 0.00018481393635738641, 0.00016679252439644188, 0.0001090186633518897, 0.00016905616212170571, 0.00018154057033825666, 0.00018421362619847059, 0.00014476288924925029, 0.00016636228247079998, 0.00017260281310882419, 0.0002076670789392665, 0.00015874466043896973, 0.00017832680896390229, 0.00016165802662726492, 0.00010936612670775503, 0.00011276792065473273, 0.00011354118032613769, 0.00015209957200568169, 0.00011129519407404587, 0.00016977573977783322, 0.0001953940954990685, 0.00016951316501945257, 0.00015921409067232162, 0.00013153064355719835, 0.00012957447324879467, 0.00022452455596067011, 0.00018082154565490782, 0.00013580266386270523, 0.00016074831364676356, 0.00015875903773121536, 0.00011160491703776643, 0.00015818905376363546, 0.00015732244355604053, 0.00013425837096292526, 0.00013581555685959756, 0.00013086597027722746, 0.00016372084792237729, 0.00012028711353195831, 0.00011735985026462004, 0.0001745635672705248, 0.00016573540051467717, 0.00015580726903863251, 0.00015830645861569792, 0.00020986642630305141, 0.00013119033246766776, 0.00014329768600873649, 0.00011431680468376726, 0.00012353397323749959, 0.00014325306983664632, 0.00017292627308052033, 0.00016101800429169089, 0.00016402741312049329, 0.00013212066551204771, 0.00011677014117594808, 0.00014214495604392141, 0.00014689673844259232, 0.00017222035967279226, 0.00013169848534744233, 0.00014737152378074825, 0.0001433226716471836, 0.00011987267498625442, 0.00010570776794338599, 0.00017907441360875964, 0.00022251789050642401, 0.0001645239390200004, 0.00013350606604944915, 0.00019801828602794558, 0.0001931338629219681, 0.00012949893425684422, 0.00015645315579604357, 0.00012229327694512904, 0.00015317076758947223, 0.00012332531332504004, 0.00013108701386954635, 0.00012094377598259598, 0.00013764746836386621, 0.00014192431990522891, 0.0001786610228009522, 0.00014673020632471889, 0.00012042143498547375, 0.0001159506500698626, 0.00012779243115801364, 0.00016246203449554741, 0.00012527412036433816, 0.00019001941836904734, 0.00014096018276177347, 0.00015472894301638007, 0.00016061410133261234, 0.00012753761257044971, 0.00016725496971048415, 0.00017457938520237803, 0.00017074911738745868, 0.00015950885426718742, 0.00018348589946981519, 0.00015670798893552274, 0.00015057520067784935, 0.00020266408682800829, 0.00012138383317505941, 0.00017253513215109706, 0.00019226394942961633, 0.00016062104259617627, 0.00015087521751411259, 0.00014049469609744847, 0.00015123387856874615, 0.00016181399405468255, 0.00012908599455840886, 0.00012422504369169474, 0.00012536534632090479, 0.00017648650100454688, 0.00017583541921339929, 0.00014347243995871395, 0.00010704429587349296, 0.00017559222760610282, 0.00010998924699379131, 0.00014598444977309555, 0.0001730749208945781, 0.00014261675823945552, 0.00017151108477264643, 0.00013224782014731318, 0.00018994098354596645, 0.00017214873514603823, 0.00015352619811892509, 0.00013064114318694919, 0.00015865544264670461, 0.00013484066585078835, 0.00015652211732231081, 0.00014482472033705562, 0.00012023434101138264, 0.00013906437379773706, 0.00016934321320150048, 0.00016524993407074362, 0.00016322784358635545, 0.0001605790457688272, 0.00011351460852893069, 0.00012562883784994483, 0.00017748106620274484, 0.00014702095359098166, 0.00022289140906650573, 0.00013127985585015267, 0.00015315748169086874, 0.00013429645332507789, 0.00019986036932095885, 0.00015369082393590361, 0.00016001050244085491, 0.00015945905761327595, 0.00016389830852858722, 0.0001980818051379174, 0.00013817695435136557, 0.00010562044190010056, 0.00016234703070949763, 0.00017022072279360145, 0.00019435900321695954, 0.00012372703349683434, 0.00018068969075102359, 0.00012706393317785114, 0.00013003649655729532, 0.00017463826225139201, 0.00016392764518968761, 0.00018758492660708725, 0.00017664603365119547, 0.00013189690071158111, 0.00011516518134158105, 0.00014796972391195595, 0.00015239520871546119, 0.00013781609595753253, 0.00020658531866502017, 0.00024415412917733192, 0.00014066745643503964, 0.00011661741882562637, 0.00016294546367134899, 0.00017875767662189901, 0.00014735104923602194, 0.00019618713122326881, 0.00012465534382499754, 0.00015393005742225796, 0.00016699981642886996, 0.00015821064880583435, 0.00015095701382961124, 0.00015767030708957464, 0.00016912889259401709, 0.00014431061572395265, 0.00015739383525215089, 0.00012107928341720253, 0.00014830045984126627, 0.00013394220150075853, 0.00012360367691144347, 0.0001878886396298185, 0.00014307074889075011, 0.00013847323134541512, 0.00018576298316475004, 0.00015213413280434906, 0.00014657610154245049, 0.00014244019985198975, 0.00014960425323806703, 0.00017050087626557797, 0.00014507009473163635, 0.00016403524205088615, 0.00016996698104776442, 0.00022118396009318531, 0.00013234537618700415, 0.0001754205150064081, 0.00019184505799785256, 0.00014001158706378192, 0.00010669127368601039, 0.00016597207286395133, 0.00015785759023856372, 0.00018677534535527229, 0.00017677967844065279, 0.00015130187966860831, 0.00018085897318087518, 0.00013536833284888417, 0.00018766502034850419, 0.00012967757356818765, 0.00017728275270201266, 0.0001357401633867994, 0.00017227292119059712, 0.00014721881598234177, 0.00020221150771249086, 0.00013904842489864677, 0.00015738871297799051, 0.00013256553211249411, 0.00019086129032075405, 0.00015794952923897654, 0.00014292850391939282, 0.00014958722749724984, 0.00013700989075005054, 0.00015269080176949501, 0.00015377241652458906, 0.0001590659812791273, 0.00016343632887583226, 0.00013069027045276016, 0.00011558988626347855, 0.00016010069521144032, 0.00018260144861415029, 0.00015246219118125737, 0.00014320453919935971, 0.0001455303281545639, 0.0002261706831632182, 0.00014784700761083513, 0.00014878752699587494, 0.00014388353156391531, } };
const TfArray<1280, int> quant28_zero = { 1280, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(8) int8_t tensor_data29[10*1280] = {
  11, -71, -6, -80, -47, -84, 109, 11, -72, -8, -2, 47, 87, -41, 15, -69, 11, 82, 14, 70, -21, -91, -110, -99, 91, -43, 3, -6, 8, -45, -6, -30, -114, 93, 15, 40, -95, -55, 63, 32, -37, -38, 82, 102, 3, -65, -30, -45, 52, 5, -96, -90, 15, 31, -78, 67, 68, 4, -47, -4, -45, 26, 91, 77, -21, 12, 65, -28, 51, 63, 57, 66, -82, 68, -24, -47, 42, -61, -8, -112, -101, 82, 115, 52, 8, 22, 81, -111, 28, 41, -3, 64, 89, -24, -74, -93, 60, 6, -52, 5, -5, -87, 46, -94, -59, -34, 31, 76, -35, 43, 12, 21, -63, -83, -39, 37, -111, 14, 34, -61, 78, 93, -111, -89, -82, 75, 57, -84, -79, 62, 85, -5, 21, 39, -33, 62, 70, -41, -110, 32, 49, -38, 38, 75, -15, 40, 29, 96, -32, 75, 3, -21, -44, 25, 110, -82, -95, -39, 80, -7, -63, 71, 125, -71, -6, -77, 22, -71, -31, 76, -107, -109, 85, 21, 80, -17, 41, 71, -89, -83, -1, 81, 77, 2, 102, 22, 84, -47, -29, 119, -107, 92, -6, 63, -13, -40, -17, -9, -13, 74, 14, -89, 74, -1, -30, 83, -87, 76, -99, 100, 80, 98, 14, -76, 73, 26, -26, -41, 36, -87, 58, 12, -104, 103, -14, 76, -79, 82, 65, 69, 115, 68, 80, -84, -9, -67, -103, -19, -22, -68, 99, 66, 115, 18, 81, 36, 38, 50, -35, 9, -50, 65, -13, -56, -66, -48, -81, 0, 15, 46, 96, -51, 49, -32, 5, -27, 14, 27, -30, -48, 62, 56, -51, 80, 27, -55, -28, 100, -59, 106, -99, -85, -16, 54, -84, 83, -90, 95, 29, -58, -112, 41, 54, 114, -69, -71, 31, -36, -2, -96, -45, 82, -95, 73, 48, -1, 57, -69, 31, 86, -73, -12, 55, -25, 32, 77, 48, 110, -106, -75, -68, 107, -47, -96, 46, -6, 7, -108, 81, -69, -72, -10, 93, -103, -60, -89, -10, -51, -71, 80, -42, 84, -92, -36, -19, -72, 6, 9, -57, -113, -106, 16, 32, -84, 51, -65, -50, 24, -33, -14, 44, 22, 39, -54, 23, -19, -75, 18, 35, 36, 80, -79, 95, -53, 56, -97, 71, -107, -19, -113, 73, 55, -1, 17, -79, 27, -84, -47, 98, -97, -39, -66, 62, -45, -16, 54, -72, -54, -51, 109, -101, 33, -88, -86, -3, -112, 44, -38, 59, 59, 50, -65, -42, -36, -38, -23, 66, -4, -59, 111, -30, -96, 50, 39, 98, -34, 60, -27, -27, 31, 8, 28, -29, -19, 71, 12, -82, 71, -41, 47, -20, 86, -72, -24, -85, -91, 47, -30, 15, -45, -97, 83, 36, -71, 41, 89, -23, -2, -37, 11, 93, -53, -48, 21, 28, 29, 56, -45, -12, -99, 14, 24, -13, 71, -11, 22, -72, -63, -82, 2, 54, 40, -64, -40, -32, 16, -23, -87, -16, -101, 96, 68, 110, 97, -62, -71, 50, -56, 48, -27, -70, -52, -90, -73, 29, -20, -38, -9, -74, 13, 61, 46, 69, 63, 63, -35, -11, 98, 50, 87, -106, 79, 94, 48, 24, -46, 80, 71, 69, -60, 55, 38, 91, 62, -91, 92, -33, 100, 41, 103, 71, -101, 109, 72, 87, 36, 3, -58, 90, -59, -63, -76, -77, -3, -97, -109, -80, 8, 7, -65, 57, -62, -38, -12, 77, -70, -19, 39, 74, -85, -6, -23, -77, -2, -31, -57, 66, -49, 15, -50, -54, 84, -32, -12, 39, -118, 12, 2, -45, 53, 12, 28, -6, 83, 29, -87, 48, 84, -84, -13, -61, 86, 72, 75, -81, 77, 93, -88, -60, -34, -22, 26, -100, -63, -106, 90, -30, 28, 12, -62, 9, 70, -77, 19, 71, -12, -11, -55, 4, 52, 16, -63, 114, -109, -102, -42, 3, -94, 79, 91, 82, -26, 60, -89, -28, 43, -68, 12, 34, -28, -21, 55, -36, 24, -29, 42, -67, 11, -98, 51, 18, 31, 72, 46, -14, 38, -95, -45, -57, -86, -30, 1, 111, 70, -32, 76, 86, -18, 46, 14, 103, -66, -48, 5, 82, 81, 88, 86, -54, -10, -110, -88, 1, -33, 96, -92, 17, 78, 47, 58, 23, -23, 90, -51, -72, 65, -9, 56, 84, 23, -62, 72, -96, -31, -50, 77, 8, -34, 35, 94, 61, -78, 34, 96, 64, 66, 23, -79, 81, 73, -51, 83, -41, 107, -9, -45, 53, 21, 48, -48, -83, 83, -90, -22, -3, 68, -29, 0, 75, 38, 3, 79, -31, -70, -12, -78, 53, 33, -26, 76, -95, -63, -32, -109, -94, -34, -75, -89, -65, 2, -98, -59, 72, -87, 41, 66, -91, 91, 72, 16, 12, 55, -56, 112, -99, -7, 80, -75, -4, 30, 92, 66, -66, 94, -32, 88, -81, 74, 14, -76, -84, -90, 29, 30, -43, 51, -48, 24, 55, 84, -71, -74, 21, -35, -56, 90, -85, 58, -96, 37, -65, 47, -41, -67, -72, 95, 30, -106, -4, 40, 10, 89, 31, -73, 79, -50, 13, 34, -78, 70, 23, -80, 1, 86, 73, 13, -53, 3, -25, 56, -43, -43, 34, -42, -65, 78, 58, 42, 30, 54, 104, -5, -11, -61, 52, 93, -107, 19, -37, 51, 35, 7, -89, -42, -106, -67, 114, -90, 14, 34, 51, 42, -44, 63, -25, 54, 15, 26, 46, 73, 100, -96, 38, -71, -52, -49, -13, 69, -3, -15, 67, -9, -89, 82, 113, 108, -25, -19, 28, -106, -18, -73, -69, -4, -83, 83, -15, 22, 7, 8, -55, 104, -75, -83, 10, -87, 82, -48, 60, 20, 105, 63, 86, 38, 82, 67, -71, -56, -83, -80, -43, -8, 15, 88, -26, -92, 46, -1, -54, 112, 30, -15, -58, 26, 43, 3, -57, 69, -21, -50, 123, -63, -44, 18, -120, -14, -35, 83, -73, 13, -52, -22, 6, -76, -22, 113, 54, -90, -4, 18, -65, 58, 57, 77, 48, -23, -31, 16, 3, 89, -13, 46, -33, 73, 29, -100, -69, 109, -83, 18, -49, -19, -72, 86, 14, -22, -25, 34, -86, -20, 52, -103, 23, -70, 14, 35, -81, 29, -104, 56, -73, 113, -8, 3, -61, -87, -52, 82, -42, -83, -26, -92, 64, 91, -51, -45, 56, -19, -58, 13, 36, -100, -10, -65, 0, 94, -19, 57, -109, 51, 34, 88, -41, -10, -96, 76, -8, -16, 11, -74, 83, -67, 50, 80, -4, 24, 113, -18, 65, -28, -66, -24, -51, 109, 92, -63, 27, -61, 5, -39, 2, 53, -26, 40, -23, -28, -79, 13, 101, 35, 50, 43, -77, -91, -98, -31, -46, -41, -84, 76, -6, -8, 97, -90, -47, 3, 79, 56, -34, 58, 84, 38, -63, -59, -35, 4, -31, 5, 39, 21, -19, -55, -100, 93, 76, 3, 40, -20, -71, 47, 51, -85, -35, 19, 65, 1, 84, -94, -91, 97, -40, -4, 84, -90, 34, -59, -67, -79, 26, 98, 1, 34, 33, -45, 72, -19, 37, 86, 93, -111, -1, -18, 45, 7, -29, 65, -5, 65, -47, 95, 69, 76, -20, -72, 62, 51, -53, -12, 51, 28, -79, 79, 96, 68, 27, -22, 107, -46, -81, 42, 11, -40, -44, 29, 50, 31, 43, 74, 18, -18, 48, 89, -70, 11, 30, -55, -31, -78, -69, -27, -30, 39, 21, 84, -47, 36, 95, -66, 103, -117, -44, -44, 5, 15, 4, -66, 101, -29, -91, -1, 9, -72, -49, 101, 97, 27, -56, -68, 21, 100, 84, -10, -19, 53, -13, 16, 51, -106, 62, -89, -37, 37, 52, 52, -20, -62, 29, -102, 4, -22, 45, 26, 95, -10, -61, 11, -105, 90, -34, -103, -62, 1, 93, 29, 85, 45, 50, 54, 76, 69,
  72, 64, 64, 44, -33, 46, -27, -46, -111, -91, -46, -64, 59, 92, 81, -87, -77, -17, -41, 1, 75, -52, 25, -67, 82, -21, -15, -104, -20, 29, -102, -88, -65, 32, 21, 49, 43, -47, -78, -34, -44, -102, 34, -53, 58, 108, 28, 58, -84, -80, -77, 14, -5, 28, 67, 2, 55, -113, 83, -102, -86, 87, 91, 15, 88, -45, -30, -20, 73, -84, -45, 2, -55, 72, 93, -26, 78, 100, 78, 56, 0, 95, 23, 69, -43, 26, -88, 96, -68, 41, -25, -31, 66, 33, -94, 76, -17, -7, 96, 53, 44, -103, 22, -118, 44, 109, 47, 100, -66, 34, 20, 85, -81, -75, 89, 81, -29, -90, -24, 5, -50, 49, -60, -27, -100, -57, 22, -56, -7, 52, -5, -8, 81, 26, -45, -42, -20, -18, -50, -65, 4, -68, 43, -93, 0, 13, 95, 98, 30, -82, -112, -52, -96, -71, 16, 11, -38, 94, 85, 75, -9, -56, -16, -51, -56, -19, 39, -31, -85, 107, -43, -14, -16, 88, -2, 66, -93, -88, -36, -10, -7, 45, 44, -109, 64, -30, -80, 86, 97, -84, -52, -20, 56, -42, 6, 1, -59, 52, 90, -55, 51, -104, 58, -38, 34, 0, -81, 95, -11, -28, 47, -76, 52, -73, -103, -80, 63, -87, 82, -15, 0, -33, -67, 84, 44, -46, -3, 105, 8, 19, -48, -96, -41, 14, 80, 47, 64, -52, 97, 19, 31, -92, 11, 55, 98, 9, -47, -42, -62, -3, 31, -91, 23, -57, -49, -17, -87, -82, -35, -3, -36, -47, -41, 6, 74, 75, -52, -41, 32, 66, 80, -54, 9, -71, -58, 71, -75, 65, -60, -74, 89, -44, 69, 50, -81, -96, -69, -74, 44, -25, -57, 40, 12, 8, -64, 26, -79, 76, 84, -56, 67, 38, -35, -79, 15, 4, -39, 61, 12, -38, -28, -59, 103, 74, -49, 7, 38, -104, -20, -22, -30, 46, 53, -85, -79, -84, -65, 88, -78, 48, 19, 71, 14, 78, 42, -90, -90, 83, 37, 80, 29, 112, -99, 38, 85, -33, 104, 96, 32, 11, 45, -86, 24, -78, -19, -65, 75, 23, -88, -1, -107, -32, 38, 56, -113, -97, 82, 46, 106, -63, -45, 66, -80, -112, 36, 97, 44, 9, -28, 89, 105, -9, 11, -68, -88, -21, 78, 69, -70, 100, -46, -7, 54, -37, 76, -57, -73, -90, -106, 82, -42, 5, -33, 21, 76, 35, -103, 72, -22, 104, 21, 106, -86, -63, 39, 9, 85, -47, -101, -10, -112, -88, 94, 20, -53, -75, -81, 68, -36, -46, 82, -48, -44, 14, 80, -22, 55, -102, 6, 41, 7, 43, -82, 21, -77, 77, -67, 57, 7, 78, 46, 55, -28, -99, 29, -23, -33, -102, 91, -2, -44, -8, -41, 20, 79, 29, -57, -65, 9, 58, 74, 72, -99, -50, 8, -9, 22, -83, -1, -25, -63, 76, -27, 34, -38, -10, 53, -114, -64, -65, 28, 68, -43, 41, 112, -12, -74, 62, -90, 64, 95, -76, -53, 16, 88, -46, 15, 34, 20, 49, 111, 76, 27, -46, 54, 58, 5, -51, 96, -40, 61, 56, 77, 69, 54, 93, 6, -5, -86, 53, 56, 42, -93, 93, -87, 40, 69, -57, -57, 26, 53, 91, 92, 62, -34, 70, -17, 61, 47, 75, -3, -94, -103, -1, -86, 86, -107, 10, -87, 17, -28, -106, 85, -41, -43, 70, 1, 22, 69, -36, 9, 16, -50, -105, 93, 13, 17, -109, -23, -73, -56, -43, 2, 47, -89, 28, 15, -66, 6, -71, 52, -10, -82, -31, 41, 20, -108, -98, 27, -44, 105, -70, -4, -92, -99, 77, 50, -109, -66, 78, -8, -33, -2, 87, -69, -41, 82, 87, 7, 34, 25, -73, -12, -77, -15, 27, -94, 70, -36, -44, 19, -3, 94, 38, -47, 47, -98, 82, 76, -94, 48, 76, -94, -79, 63, -53, -7, -103, 26, 18, 28, 56, 82, -12, 25, -42, 1, 88, 77, -94, -72, -41, -67, 96, -83, -95, 12, -76, -108, 85, -106, -23, 91, -46, 10, 65, -70, -25, 92, -93, 57, 69, -44, -27, 93, 97, 36, -73, 63, -47, 52, -27, 12, -101, -38, -65, 73, 56, -61, 20, 90, -58, 44, 3, 60, -102, -106, -31, -59, -6, -26, -89, 109, 39, 75, -51, -16, 42, 58, 27, -93, -34, -43, -101, -35, 50, -53, -50, 38, 69, 67, 35, 2, 92, 0, -78, -116, -73, -28, 71, -38, -41, 11, -86, -26, -82, 80, -107, -56, 38, 8, 88, 46, -97, -51, -40, -81, -99, -61, 11, -99, -23, -75, -53, 72, 76, -34, -30, 75, -87, -78, -44, -45, -11, -57, -23, -18, -57, -59, -103, 67, 62, 0, -13, 57, 61, 20, -80, 66, 48, 19, -43, 111, -9, 92, 18, -32, -93, 84, 17, 46, -39, -2, 8, 40, -44, 88, -1, -65, -49, 91, -28, -57, 64, 8, 12, 70, 33, -72, 115, 75, -73, 84, 45, -26, 53, -50, -62, 29, -99, -8, 57, -57, -8, -62, -98, -97, -13, -37, 46, -102, 49, 48, 30, 71, 80, -55, 83, -7, 41, -14, 91, 24, 61, 4, 84, 0, -63, 78, -40, -85, -22, -26, -72, -20, 7, 91, -1, -64, -57, 70, -14, 3, 89, -62, 37, -29, -66, -61, 106, 52, -109, -102, -38, 38, 77, -22, -31, -69, -43, 31, -34, -89, 67, -89, -50, -33, 99, -63, 29, 84, 94, 81, 61, 45, -93, -101, -101, -45, 43, -106, -11, 63, 55, 43, -17, -77, -11, 15, -63, 30, 44, 78, 43, -22, 8, 85, -55, -3, -7, -44, 12, -25, -15, -66, -15, 18, 66, -20, 79, 92, 20, -114, -90, 30, 54, -100, -101, -40, -33, -32, 29, -65, -91, -92, 34, 96, -36, 3, -86, 48, 24, -97, 59, 9, 33, 30, 71, -54, 57, 81, 11, -40, 19, 22, 17, -15, 9, -63, -77, 68, -15, -2, 88, 13, 18, -74, -61, 36, 105, 11, 61, -84, 9, -118, -60, -74, -26, 99, -63, 79, 48, 14, 90, -43, 77, -21, 52, -4, 21, -48, 37, -31, 44, -96, -54, -46, 69, -1, -33, 48, 7, -80, 8, -84, 28, 45, 72, -103, -68, 10, 65, -109, -110, 68, -107, -71, 14, 28, -96, 81, -84, 25, -84, -19, -31, -59, 58, 48, 23, 45, -63, 60, -50, -24, 56, -61, 66, -103, -76, 31, 4, 73, -32, 106, -76, 57, 90, -90, -41, 6, 54, 82, -60, 46, 87, 86, -75, -52, 33, -108, -107, 60, -65, -58, -38, -44, -78, 89, -16, 29, 18, 36, -11, 18, -91, 62, -88, -61, -88, -12, -35, 84, -14, 72, 43, -12, 9, -61, 75, 88, -68, -31, 88, 37, -91, -15, 27, 29, 96, -106, 8, 6, -5, -72, -54, 33, -44, -56, 84, -84, -40, -33, 76, -58, -91, -13, -102, -39, -110, 32, 33, -107, -32, 24, 102, 39, 92, 39, -6, -60, -4, -3, -64, -41, 69, 72, 54, 97, -25, -36, -19, 5, -63, 78, -11, 67, -31, 43, 73, 1, -2, -8, 24, 56, -63, -54, -97, 56, 59, 5, 11, 54, 67, -94, -72, -120, 45, 10, 26, -81, -41, 67, 11, -46, -5, -74, -62, -43, 19, -47, -51, -3, -36, 24, 71, -107, -44, -80, 47, 26, 22, 73, 76, -50, 49, 9, 88, 69, 103, -63, 14, -70, -20, -19, 95, -90, -74, -96, 18, 2, 31, 15, 80, -54, 88, 58, -34, -82, 61, -52, -71, -56, 62, 98, 23, -96, 19, -74, 96, 29, -87, 67, 10, 77, -33, 50, 53, -75, -79, 96, 81, -103, 18, 77, 11, -98, 62, 26, 112, -54, -89, 84, -16, -20, 23, 82, 34, 7, -87,
  6, -64, -17, 64, 49, -78, -75, -96, -97, -44, -92, 114, 7, 62, 59, 39, 21, -41, -88, 9, -104, 76, 54, -76, -78, 7, 27, -33, 30, 61, 66, -83, -53, -64, -26, -93, 70, -13, 60, -16, 2, 65, -70, 86, -52, 19, -44, 3, -92, 71, -96, 31, 103, -12, 95, 82, 90, 75, 39, -50, -79, -63, -82, 83, -83, -105, 46, -73, -46, -94, -71, 86, 25, 16, 27, 24, 82, -24, -32, -18, 65, 91, 30, 13, -15, -63, -33, -75, -95, 110, -37, -31, 20, -95, -70, 112, -66, 52, -58, 2, -87, -2, 40, -30, -15, -17, 18, -36, 52, -47, 96, -4, 15, -75, 43, -17, 111, 105, -80, -81, -31, 76, 10, -97, -98, -89, -71, -84, 53, 85, -23, -36, 27, -117, -80, 34, 100, 3, 5, -50, -82, -36, 74, -57, -9, -9, -56, -70, 4, -30, -31, 90, -45, 7, 53, -6, 29, -24, 12, -41, 7, -42, -86, 13, 90, -70, -51, 97, -27, 61, -92, -95, 78, -17, 83, 102, -59, 42, 47, -59, 27, -68, 92, -2, 16, 32, 1, -26, -41, -70, -88, -21, 91, 56, -62, 84, 66, 78, -94, -79, 63, 14, 11, 59, -96, -33, 2, -99, 79, -6, -96, -104, 14, 19, 31, -50, -98, -33, -11, 5, 8, 91, -4, -68, 65, 37, -80, 116, 11, 25, -79, 33, -82, -118, -44, 2, -49, 22, 53, -18, -53, -14, -25, -37, 64, -21, 60, -19, 72, -25, -37, -82, -13, 25, 13, 71, -67, 21, 92, 54, 35, 100, 52, 0, -86, 34, -88, -91, -30, 27, -54, -70, 36, -65, 63, -42, -69, -67, 53, 70, 20, -48, -13, 104, 18, -25, 4, 77, 87, 6, 110, 59, 88, -69, -97, -85, -77, 50, 2, 35, 34, -99, -69, 80, 73, 75, 80, 87, 103, 106, 70, 5, 97, -55, 106, 5, -99, 88, 87, -77, -112, 8, -65, 44, 86, 29, 9, -49, 94, -37, -87, -81, 78, -13, -68, 17, 81, 69, -29, -6, 46, -41, 10, 101, -57, 16, 78, -87, -89, -92, 111, -65, 46, 16, -58, 75, 22, -10, 93, -41, -44, -82, -54, 78, -95, 46, -68, 110, 15, -63, 14, 18, -25, -42, 36, -47, 107, -51, 4, -2, -47, -1, -25, 21, 94, 49, -41, -89, 51, 63, -12, -56, 49, -109, -60, 22, 6, 108, 101, -44, -90, -67, -48, -19, 37, 45, -19, -49, -14, -64, 42, -41, -96, -89, -31, -7, 4, -37, -72, -69, 29, 25, 97, 23, 75, -77, -112, 0, 109, -41, -103, -34, -110, -102, -43, -19, 48, 15, 41, 86, -83, 61, 5, -48, 40, -38, 51, -20, -46, -83, -69, 60, 118, -17, -77, 28, 6, -87, 65, 77, 10, 75, 26, -9, 4, 91, -71, 66, 56, 67, -44, -63, -17, -56, 37, 48, -33, -54, 34, -4, 60, 110, 57, -18, 3, -93, 8, -81, -24, -69, 96, 61, -92, -65, -112, 46, 4, 56, -71, 75, -64, 109, 56, 90, -58, -14, 19, 43, 75, 66, -99, 37, -49, -6, 59, 28, -75, 81, 71, 26, 78, -90, -28, 105, -51, 76, -83, 58, -41, 50, 90, 110, 17, 112, -55, -79, 40, -39, 23, 80, -53, -72, -2, -85, -8, -81, -81, 24, 114, 25, 60, -88, -48, 108, 106, -51, 15, 52, 59, 98, 106, 3, 68, -24, 3, 27, 69, -6, -59, 53, -23, 54, 81, -54, -69, 108, 20, -98, -53, 100, 97, -76, 107, -92, -16, -24, 94, -74, 4, -87, -112, -38, -24, -21, 74, 19, 48, 92, -41, 102, 50, -48, -14, 45, -6, 12, 44, -105, -34, -53, -81, 60, 38, 33, -67, -38, 105, 30, -123, -14, 77, -17, 99, 39, -55, -37, 23, 110, -76, 102, 27, -47, 86, 15, -60, -48, 54, 40, -42, 102, 62, 69, -80, 97, 74, -41, 77, -74, -4, 42, -103, -5, 36, 37, -8, -77, -38, 34, 103, 24, -7, 52, -42, -23, -13, -84, 112, -13, -4, -72, 96, -82, -14, -101, 96, 18, -81, -77, 106, 79, -37, -1, -16, 98, 118, -21, -51, -75, -47, 85, -20, 9, -12, -90, 5, -36, 3, 79, 43, -78, 6, 3, -75, -11, 4, 51, -48, 65, 55, -1, 61, -100, -14, -116, -76, -79, 52, 2, -67, 69, 42, -34, 81, 82, -72, -6, 98, 85, -93, 75, -43, 84, 106, -29, -35, -85, 34, -76, 37, -19, -20, -20, 51, 100, -73, -19, 61, 58, 60, -17, -53, -32, -101, -73, -60, -74, 17, -63, 79, 86, -80, 10, -96, -65, -66, 31, 66, -70, -86, -100, -43, -16, 32, 29, -51, -42, -81, 33, -94, 102, -22, 104, 10, -109, 41, 13, 35, -68, -26, 11, -3, -93, -113, 2, -35, 12, -26, 35, -15, 60, 96, -6, -56, -15, 28, -40, -45, -53, 0, 42, -28, -10, 3, 33, -48, 51, 26, 46, -59, 22, -40, 96, 69, -75, 10, 25, 51, 37, -66, 25, 20, -53, 71, -3, -60, -85, 3, 56, -73, -14, -28, -47, 60, 56, -63, -66, 76, -36, 64, 106, -4, 41, -45, 113, 44, -71, -57, -106, -106, 49, 21, -28, -9, -31, -9, -9, 102, -65, 51, 51, -28, 93, 92, -51, -50, 13, -83, 70, -94, -61, -30, -52, -118, 36, 41, -34, -21, -90, 72, 35, -81, -13, 60, 85, 115, -56, 14, 41, -16, 71, 22, -71, -80, 96, 108, -45, -18, -50, 69, -79, 54, 32, 14, -82, 54, -44, 39, 95, -57, -84, 37, 3, 80, 62, 83, -105, 113, 94, 92, -79, -39, 66, 83, -15, 92, 84, -33, 90, 101, 90, 88, 38, -12, -12, -52, 1, 78, 56, -90, 22, -88, -45, 45, -98, -9, 7, 92, 96, 56, -91, -84, -51, -38, -71, -16, -87, -7, 59, -78, -60, 43, 68, 15, -54, -95, 81, -35, -67, 110, -22, 54, 5, 107, 18, -66, -75, 21, -22, 120, -75, -84, -62, 72, 113, -42, 69, -42, 45, -2, 52, -15, -118, -58, -85, -53, 94, -69, -2, -37, 26, -39, 44, -40, -32, -49, -57, 43, -74, 62, 4, 73, -2, 35, -93, -31, -94, 101, 27, -33, 81, -82, -63, -9, 26, 88, -73, -25, 1, 100, -33, 91, 58, -42, 101, -106, -96, -41, 95, 49, -45, -67, 16, 104, -9, -4, -5, 82, -79, 38, -49, -37, -87, -32, 9, -2, 80, 62, -12, 13, 42, 41, 41, -76, -57, -83, 70, -72, -55, -38, 14, 64, -57, 1, -92, 17, 96, -36, 23, 81, 44, -67, -5, 50, -58, -83, -47, 64, 44, 92, -62, 55, 54, -52, 61, 90, 19, -31, -71, -14, 75, 32, -86, 77, 76, -98, 37, -61, -27, -88, -29, 65, 75, -77, 114, 12, -73, 8, -73, 84, -25, -47, -77, 53, -9, -64, -48, 17, 16, -1, -38, -52, 64, -36, -28, 70, 4, 71, 73, -56, -70, 67, 46, 72, -53, -20, -63, -55, -45, -47, -1, -8, 26, 107, -9, -109, 35, 12, -33, 99, -121, -10, -87, -8, 8, 64, -24, 84, -25, 94, -40, 48, 110, 79, -66, 41, 43, 34, 12, 106, -3, 8, -17, 23, 65, -71, 30, 76, 67, 35, 33, -64, -38, -100, 60, -64, -36, -45, -24, 97, 48, -68, 83, 95, -89, 14, 5, -35, -76, 12, -55, -79, -39, -62, 71, -31, 87, -85, 79, -22, -40, 118, -88, -38, 35, -47, 59, 19, -74, -81, -63, 13, -1, -69, -88, -74, 23, -33, 86, 73, 80, 15, -22, 60, 31, -15, -78, -46, 19, -96, 35, 73, 0, -75, 58, 41, 15, 1, -54, 5, -29, -18, -40, -6, -61, 87, 102, 82, -6, 105, 58,
  -65, 58, -24, 11, 63, 98, 115, 22, -86, 31, -105, -28, 115, 34, -80, -17, 107, 17, 19, 10, -38, -73, 98, 46, 11, -85, 34, 22, -94, -77, -33, 64, 41, 16, 55, 41, -1, -92, -45, 101, 63, 67, 98, 95, 67, 91, -60, 88, 112, 76, -34, -62, -96, -23, 8, -39, -73, 92, -25, -32, -21, -3, 22, 13, -66, 87, 46, 90, -30, 60, -32, 18, 25, -70, -45, -7, -83, -103, 2, 43, 76, -67, -54, -22, 71, 83, -39, 61, -30, -35, -72, -22, 78, 35, -70, 72, -31, -69, 5, -61, 42, -3, 63, -70, 69, -84, -26, -36, -71, 62, -48, 89, -67, -7, -20, 37, 20, -83, 45, 7, -18, -97, 9, -22, -61, -42, -72, 98, -78, -7, 111, 98, -97, 30, 100, -3, 37, -9, 84, -82, 59, 73, 79, -20, -85, -10, -13, -40, -85, -100, 49, -11, 95, 4, 58, 40, -5, 98, -22, 25, -26, -44, -38, -53, 72, -62, 43, -96, 67, -65, 46, 16, 39, 28, 36, -111, -50, 82, 14, 34, -12, -44, 15, -66, -1, -28, 12, -44, -15, 47, -44, 18, -72, -91, -40, -77, 11, -39, -106, 46, 91, -54, -41, 71, -80, 80, -33, -71, 81, 27, -78, -20, 93, -70, 77, 68, 71, 42, 37, -65, 42, -54, -62, 9, 85, -89, -55, 110, 3, 14, -33, 38, 18, -43, 67, -31, -59, 22, 9, -29, -57, -21, -42, 63, -10, -91, 2, -71, 60, 40, -50, 95, 69, -12, -13, -80, 63, 70, -99, 102, -19, 102, -1, 80, 91, 6, 66, -52, -11, 28, -29, 81, -100, -44, -120, -98, -37, 20, 101, 25, -68, 91, 47, 14, 93, 83, -77, 95, 101, 37, -22, -25, -41, 83, -9, -65, -16, -86, -73, -45, 12, -5, 100, 107, -33, -83, 114, 44, 103, 24, 26, -36, 78, -17, 10, -71, 14, -23, 54, -61, -76, -95, -98, 6, -37, 18, -16, -88, -56, 88, -47, 83, -52, -26, 58, 87, -56, 34, 18, -75, 26, 22, 49, 41, -71, -20, -42, -93, 54, 21, -53, -33, 79, 89, 88, -49, -30, 109, -3, -106, -105, 26, 83, 112, -52, -93, 82, 2, 83, 12, -56, 101, 9, 34, 37, 101, -14, 110, -19, 30, 72, -52, 31, -23, 90, 103, 110, -26, 32, 83, -6, 12, 95, -75, -94, -95, 13, 114, 8, 64, -58, -15, 97, -116, -9, -12, 32, 96, -51, -73, 25, -117, 8, -113, -67, -38, 77, 46, 57, 97, -91, -106, -98, -56, 81, -63, 7, 54, 46, -106, -36, -39, 93, 34, 112, -100, 14, 45, -2, 23, -72, 83, -67, -14, 44, -104, -77, -28, 20, -63, -89, 55, 113, -85, 34, -67, 28, -28, -48, 32, -12, 11, -49, -86, 24, 97, -94, 24, -1, -11, -40, 72, 2, -26, 33, -31, -55, -37, -24, -82, 26, 109, -84, -113, -47, -53, 32, 112, 46, 34, 38, -12, 7, -11, -99, -67, -79, 27, 68, -71, 13, 3, -1, -43, -73, 3, 110, 15, 18, 27, 57, 41, 31, -29, 49, -4, 17, -11, -14, -55, -53, 91, -2, -90, -42, 10, -56, -10, -38, 21, -63, 93, -49, 25, -23, 12, 92, -8, 12, 19, -70, -14, -5, 89, 43, 86, -36, -25, 51, 76, 47, -97, -17, -84, -83, 64, 33, 91, -86, -90, 43, -84, 68, -58, -95, -47, -27, -36, -16, 21, -52, 17, -5, -28, 10, -59, 17, 66, 81, -98, 41, 78, 27, -48, -32, 42, 25, -83, -51, -40, -53, 47, -3, 66, 41, -24, 87, -13, 79, -71, -56, -75, 95, 67, -11, 43, 88, 11, 79, 98, 42, 85, 10, 18, -7, -60, -53, 38, -59, 87, -58, -52, 96, -51, 34, -26, 75, -9, -2, 69, -36, 78, -67, -30, -63, 89, 88, -51, 62, -59, 22, 84, 58, 67, 32, 1, -88, -87, -13, -79, 85, 39, -48, -29, -49, -44, -58, -30, -70, -81, -70, 5, 66, 84, -74, 39, 19, -14, 40, 17, -26, -36, 53, 38, -17, 25, -114, 14, -56, -41, 8, -55, -28, -21, 51, -44, 18, -36, 93, 56, 66, -60, 26, 20, -33, -50, 44, -51, -64, -32, 6, 46, 28, -80, 89, -15, -100, 16, -106, 9, 58, 62, 5, -62, 15, 80, -8, 15, 25, -48, 82, -27, 45, 93, 75, -17, 95, -84, -94, -42, -30, 70, -81, -27, -69, -115, 105, 93, -18, -23, 86, 69, 64, -33, -37, 45, 76, -75, -81, -6, 13, -16, 41, -42, -55, 41, 95, -103, -63, 87, -2, 102, -82, -78, 68, -74, 58, -85, 118, -3, -20, 25, 72, -15, -65, -69, 2, 31, 66, 24, -48, 53, 89, -6, 41, 45, 61, -21, 1, 16, 80, 17, -41, 33, 110, -83, 12, -83, 37, -30, -47, -16, -31, 20, 85, -101, -101, -73, 18, 5, 89, 10, 42, 13, 21, 86, -24, -31, 55, 85, -95, 32, -60, -101, 91, 6, 8, -51, -56, 54, 38, -4, -95, -5, -52, -88, 68, -92, -83, -116, -85, -33, -81, -67, -35, -4, -57, -58, -9, 11, 13, 48, -61, 21, 107, -47, 61, 39, -33, 54, 32, -51, 18, 102, -44, -93, -26, 23, -27, -96, -51, 64, 57, 4, 40, 27, 87, 50, -59, 34, -13, -56, -92, 101, 33, -13, -31, -107, 56, -60, -43, -108, -55, 53, -56, 30, 39, 108, -26, -86, 12, 84, 41, 50, -18, -28, -36, -57, -31, 59, -83, -24, 1, -68, 19, 94, 26, 0, 24, -73, -8, 70, 82, -81, 97, 86, 31, 85, -71, 101, 41, -33, 60, -12, 61, 73, -73, 64, 13, -85, -30, 84, 49, 77, -77, 77, 44, 38, 48, -70, -47, 46, 88, 86, 42, 31, 45, 68, 69, 6, -60, 62, 25, 66, 17, -88, 30, -86, 9, -40, 31, -96, -9, -69, -3, -113, 44, -56, 79, -79, 107, 54, -5, 42, 85, 34, -82, 27, -42, -15, -58, -57, 116, -75, -22, 37, -48, 24, -19, -37, 12, 86, -48, 108, -41, -76, -53, 83, -14, 103, 12, 107, -13, -63, -27, -98, -5, 93, 83, 59, -35, -110, 58, -36, -83, -36, 47, 34, 47, 67, -111, -38, 44, 73, 36, -33, -63, 68, -48, 24, 59, -75, -86, -23, 57, -59, -62, 68, -58, 96, -55, 30, 37, 106, -8, -45, 111, -93, -82, 7, -41, 82, -45, 54, 26, -76, 62, 10, -19, 55, 69, -20, -66, 29, 39, -58, 105, 74, 16, -15, 48, -33, -62, -42, 101, -50, -11, 24, 25, -63, 69, -34, 35, -30, 94, -43, -44, -87, -35, -28, -66, -98, 52, -26, 39, -89, -20, -63, 31, -16, -107, 78, 8, -38, 27, -25, 72, 76, -85, -57, -87, -5, -52, 3, 38, -85, 66, 58, -13, 6, -115, 89, 69, 81, 91, 35, 80, -107, -15, 93, 13, 109, 80, -17, 69, -68, 96, 45, -43, 49, -88, -25, -109, -16, -87, -55, 71, -45, 35, 1, 80, -47, -84, 34, -61, -4, -51, -11, -1, -22, -55, -60, 99, 53, -54, 73, 26, 108, 12, 50, 35, -43, -80, 32, 54, 93, -16, -53, 73, -81, 4, -47, -74, 23, -15, -29, -60, 56, 7, -116, -113, 32, 26, 100, 15, 27, -22, 79, -112, -27, -65, -83, -88, 109, 75, -83, 105, 110, -78, 33, -9, -9, -58, 25, 68, -47, 22, -66, -30, -11, 46, 65, -78, -72, -58, 59, 21, -41, -115, 51, 54, 21, -80, -43, -69, -6, 103, 83, -72, 33, -55, 50, -51, -99, -47, -29, 104, -8, 70, 79, 55, 60, 66, 30, 13, -15, -53, 82, -65, 74, -4, -26, 81, -4, 36, -67, -28, -63, -21, 5,
  -77, -53, -12, -52, -44, -69, 19, -74, -28, -73, -4, -21, 62, -106, 68, 72, -5, -83, -23, 66, -53, 91, 70, -104, 37, -16, 81, -49, 45, 71, 39, -25, -89, -37, -79, -52, 26, 8, -94, -2, -34, 78, -83, 78, -79, -17, -111, 33, -102, 19, -48, -92, 30, -103, 70, 12, -64, 86, 64, -87, 28, 67, -9, -74, -85, -17, 101, -50, -35, 87, -19, -26, 84, 99, -54, 29, -87, -67, 92, 10, -101, -13, 48, -49, -85, -75, 96, -26, 18, 3, -71, -33, -47, -95, 85, 5, 104, 59, 84, 30, 63, -86, -73, 40, 25, 10, -19, 79, 8, 62, 8, 35, -61, 8, -32, -81, 0, 24, 12, -66, 18, -37, -48, -46, -45, 37, 44, 115, 81, 97, -7, -36, 80, -19, 97, 37, -71, -61, -18, -65, 54, -108, -92, -12, 76, -76, 72, 52, -59, 113, 82, -11, -51, -43, 53, 65, 106, 78, 51, 38, 89, -29, 9, 74, 46, 74, -24, 93, -12, -96, 11, -9, -49, -72, 49, 63, 33, -104, -28, -47, -9, 96, -73, -21, -113, 40, -31, -103, 41, 64, -42, -15, 71, -93, 85, 73, -34, -33, 28, 70, 57, 36, 80, 114, -98, 93, -3, 48, 23, 50, -9, -66, -13, -102, 47, 53, -69, 54, -78, 87, -94, -83, -54, -58, 25, 23, -11, -13, -33, -30, -57, -93, -94, 17, 82, 100, 52, 70, 45, -76, -66, -23, -35, 84, -104, -101, -45, 83, -89, -28, -10, -10, -20, -83, -43, 52, 12, 105, 61, 95, 67, -83, 56, 4, 73, 82, 47, 93, -32, 57, 75, -20, 91, -64, -64, 38, -15, -44, -44, 21, -99, 17, 46, 59, -75, -96, -100, 8, 70, -60, -47, 104, 2, 11, -98, 38, 70, 1, 94, -19, 41, 88, 59, 30, -100, -58, 82, -9, -99, -39, 5, 50, -75, 100, -69, 94, -67, -15, 29, -23, -40, -101, -11, 17, 15, -57, -73, -17, 35, 29, -93, -27, -25, -43, -98, 11, 50, -73, 62, 47, 14, 109, -53, -96, 89, 20, 85, -82, -103, -58, -102, 36, -21, -50, 77, 92, -33, -49, -38, 79, 46, -2, -28, -73, 37, 69, -88, -99, 91, -30, -36, 41, 72, -22, 34, -43, 67, 5, 89, 94, 16, -38, -57, -106, -16, -103, -42, -16, 53, 93, -55, 8, 100, 23, -90, 60, 89, 61, -32, -69, -43, -40, 39, -53, 82, -103, -34, -70, -71, -36, -4, -89, -101, 44, -51, 55, 94, 20, -102, -34, -21, -68, 43, 37, -3, -31, 58, -83, 55, -82, -23, -12, 66, -5, -40, 30, 54, -108, -84, -104, -51, 62, -99, -55, 79, 75, -59, -40, 59, -108, 92, 58, 77, -51, -4, 13, 68, -75, -49, -3, -44, -36, -68, 5, -107, -43, -3, -16, 41, -89, -21, 30, 86, -89, -5, -84, -102, -84, 32, -65, 18, -96, -86, 91, 49, 72, 89, -67, -90, -70, 88, 59, 21, -100, 79, 66, -99, -32, -70, 17, 82, 49, -56, -53, -106, 54, -47, -25, -68, -11, -66, 43, -30, 26, -28, 3, 65, 110, -27, -21, 100, 84, -48, -47, 38, -2, -90, 65, -105, 13, 74, -40, -40, 88, -19, 81, -33, 86, -30, 72, -97, -62, -2, 78, -11, 67, 18, -57, 18, 46, 46, -99, 5, -22, 27, 77, -34, -48, -69, -115, 56, -60, -84, 4, 51, -119, -12, 45, -90, 18, 7, -12, -16, 30, -65, 53, -79, -18, 11, 82, 85, -47, -1, -54, -35, -65, -96, 84, -43, -69, -55, 60, 92, -10, 83, -36, 66, -115, -4, 2, -14, -34, 15, 3, -50, 5, 52, -1, -18, -75, -71, -92, -61, -1, -66, 113, -7, -29, -29, -112, -75, -42, -75, -17, 49, 57, -48, -17, -2, 67, -44, 60, 10, -80, -82, 20, 13, -111, -90, -58, 47, -89, -37, -17, -22, -50, 49, 4, 40, 59, -3, 86, -4, 18, -91, 17, 37, -105, -28, -80, 69, 87, 85, 81, 55, 27, -23, -9, -42, 85, 16, -90, 50, 48, -88, -3, -60, 103, -55, -75, -80, -4, 58, 8, -25, 75, 20, -42, 75, 99, 68, 117, 21, 78, -61, -49, -67, 96, 74, -74, 61, 21, 23, 56, -91, -59, 42, 15, 33, 102, -98, -106, -2, -92, 74, -25, -29, -105, -98, -25, -77, -87, -78, -19, 44, -35, 55, 68, -88, 15, -72, 31, 2, 55, 72, 66, 26, -85, 34, 11, -103, 10, -71, 1, 44, 68, -55, 11, 22, 29, 8, -91, -112, 0, 37, -66, -31, -47, -72, -50, -36, 39, 71, -97, 68, 80, -15, -115, -55, -113, -84, -29, -18, 66, -25, -47, -67, -56, -83, 78, -104, 45, 29, -104, -13, -16, 94, -112, 76, 5, 97, -42, -92, 32, 46, 90, -84, 27, -19, -20, -104, -37, -19, -41, -45, 64, -8, -64, -85, 65, 40, 15, 21, 86, -87, 10, -3, 90, -35, 36, -58, 63, -31, -58, -33, -8, -87, -1, -54, 44, -85, -71, -59, -34, -49, 87, -42, 81, -83, 38, 70, 89, 73, 16, -40, 104, -43, 6, 32, -12, 80, -7, -52, -53, 29, -79, 8, -2, 75, 59, -76, 80, 38, 68, -80, 16, 103, 70, -26, 8, -96, -34, 25, -35, 61, -90, 15, 85, 48, -61, 22, 27, 57, -52, 43, 53, 61, -48, 34, -75, -43, -71, -24, 91, 42, 4, 3, -111, -36, -92, -100, -21, 61, 75, 88, -35, 74, -32, 70, -82, 88, 92, 66, 64, 61, 61, -31, -23, -1, 59, 38, 28, 83, -16, -100, 35, 95, 66, -65, -65, 3, 26, -108, 104, 9, 35, 9, 19, 32, 13, -109, -85, 76, 84, -17, -88, 98, 35, 67, 77, -74, 26, -10, 15, 64, -98, -16, 36, -55, 27, 52, 90, 92, 82, 35, -54, -33, 81, 26, 53, 1, 59, 45, -30, -6, 61, -38, 96, 64, -99, 4, -91, 85, 36, -25, -79, 22, -24, 101, -55, 6, 37, -61, -44, -79, -65, -47, -13, -75, -30, -79, -59, 46, 37, -3, 8, 87, 69, 8, 26, -90, -55, 83, -70, -42, -28, 40, -74, 4, 76, -24, 70, -52, 87, 69, -18, 66, 25, 90, 33, -41, -39, 18, 30, 94, 90, 33, 43, -92, 35, -36, 97, -86, -37, 44, 42, -72, 86, 46, 18, 39, -94, -48, -94, -42, 5, -37, -4, 82, -54, 67, -91, 93, -36, -60, -22, 22, -82, 0, -96, 57, 66, 86, 25, 99, -70, 36, -36, -107, -97, 41, -78, -31, 94, 77, -16, 64, -99, 77, 37, 84, 24, 75, 37, 104, 87, 33, -1, 13, -71, -87, 124, -54, -91, 83, -67, 69, 21, 2, 86, 70, -18, 39, -37, 104, 48, -69, 65, -71, -3, 92, -70, 30, -17, 21, -52, 30, 108, 71, 25, 62, -20, -76, -66, -30, -47, 78, -43, -51, -16, -78, -33, 1, -58, -85, -68, -104, -99, 70, -100, 47, -68, 64, -104, -82, 31, 85, -19, -31, -101, -32, 81, -54, -95, -5, 70, 7, 106, 81, -80, 29, -59, 1, -88, -62, 34, -9, 31, 101, 21, -14, -13, -98, 87, 0, 2, 11, 24, -74, 47, 40, 37, 69, -27, -32, 81, -85, -37, 45, 75, 11, 42, -14, -94, -22, -32, -85, 30, -29, -63, -56, 39, 7, 6, -43, 78, -33, 22, -96, 65, 39, 83, -110, 88, -12, -104, 75, 99, -91, 1, -6, 56, 99, 27, -47, -34, -87, -92, -101, -39, -1, 83, -49, 82, -56, -75, -81, 72, -90, -10, -69, -23, -71, 11, -18, 73, 77, 45, -36, -112, -87, -41, 0, 100, 85, 91, -31, 6, -6, 22, -15, 66, -59, 76, 44, -75, 14, -83, -105, -46,
  -98, 33, -10, 84, 45, 7, 72, -59, 109, 56, 63, 73, 28, 101, -18, -26, -14, 90, 22, 69, 31, 49, 98, -63, -30, -54, 13, 80, -49, -73, -34, 77, 42, 100, 62, -45, 36, -89, -100, 16, -34, -67, 43, 72, -7, 84, 31, 72, 108, -22, -93, -98, 69, 27, -20, 64, 0, 60, -49, -26, -60, 60, 44, -93, 97, -18, 63, 77, -16, 101, -95, 49, 102, 90, -15, 103, -74, 96, -95, -114, 37, -17, -62, -77, 4, -66, -64, 77, -12, -43, 58, 84, -46, -20, 36, -65, 55, -101, -81, 102, -11, 103, -81, 62, -66, 58, -41, -26, 108, 56, -24, 40, 62, -11, 114, -69, 69, -5, -63, 98, -72, 101, -59, -64, 32, -77, 50, -55, 78, -63, -75, -26, -63, 43, -12, 85, -40, -81, 4, 49, 31, 17, 100, 64, 102, 61, -84, -27, 55, -99, 42, -15, 76, 5, -17, 118, -33, -36, -104, -48, 91, -32, -65, -82, 1, -20, -11, 47, 76, 20, 29, -63, -5, 63, 38, -110, -38, 18, -99, -66, 36, 31, 32, 80, -49, 34, 30, -91, -58, -91, -70, 8, 48, -90, -55, 32, -7, 48, -36, 119, 6, 108, 72, -55, 27, 11, -60, 25, -58, 29, -77, -48, -23, 15, 80, -7, -1, -52, 93, 91, 77, -96, -57, 6, 30, -76, 23, 2, 89, 85, -1, -75, -23, 73, 18, 68, -109, -18, -7, 0, -82, 82, -7, -107, -33, -110, -73, 67, 108, 76, 12, -76, 8, 0, -91, 21, 80, -23, -77, 98, 42, 9, -60, -104, 8, -88, -59, -90, -23, -49, 73, -90, -22, -32, 11, 91, -105, 109, 23, -19, 29, -67, -58, -62, -25, 105, 121, 22, -20, -80, -55, 86, -36, -68, -21, 79, -34, -37, 26, -26, -3, 76, 71, 72, 93, -62, 66, -18, 46, 6, 54, -48, -79, -42, 114, 84, -57, -59, -20, 60, 1, 9, -84, -23, -18, 0, -62, -58, 45, 64, 103, -114, -57, 44, -54, -66, 15, 60, 17, 7, -78, -118, -76, 72, 37, 51, -89, -20, -63, -62, -11, 48, 75, -45, 81, -25, -57, 28, -75, -46, -50, -71, 86, -78, 76, -12, 118, 33, 22, 29, 0, 59, -29, 1, 59, 4, -6, 46, -98, 90, 90, -97, -93, -71, 8, -61, 41, 71, 18, 3, -70, 18, -99, 78, -44, 82, -68, -36, 44, -50, -96, -96, -37, 47, -69, -66, -63, -13, -32, 14, 3, 77, -61, -91, 84, 27, 111, -59, 37, 7, -44, 17, -41, -14, 100, -7, -20, 11, 20, -110, -35, -44, -67, -77, 96, -33, 73, 31, -36, -53, -4, -85, 71, 41, -60, 4, -96, 55, 55, 35, -32, 84, 109, 96, -11, 29, 35, -104, 42, 18, -107, 6, 88, 47, -51, -72, -91, -17, 60, -24, -46, -28, -1, -3, 17, -17, 3, 24, 86, -51, 8, -83, 75, -67, -62, -40, 105, 94, -63, -92, -89, 47, 103, 20, -11, -64, -86, -61, 1, 107, -43, 72, -45, 24, -89, -94, -13, -50, -34, -24, -52, 2, -18, 22, 33, 28, 107, 17, 73, 5, -105, -101, 93, -56, 65, -67, -54, -50, 92, -80, -41, 81, 67, -45, -92, 92, -76, 104, 94, 34, 65, -2, 6, -57, -36, 1, -15, -89, 32, 14, -42, -56, 84, 1, -1, -112, -46, -85, -31, -13, 87, 28, -51, -62, 19, -27, 116, -34, -83, -71, 49, 18, 4, -56, -66, -58, -104, 70, 43, -30, 18, 6, 39, -49, 47, -82, -72, -86, 23, -31, 0, 27, 23, 87, -24, 54, 34, 98, 19, -7, 63, 69, -50, 8, 12, -52, -59, -46, -21, -86, -6, 62, 101, -14, 113, -43, 49, 4, -81, -58, -15, 18, -12, -58, 39, 81, -56, -49, 82, -110, -54, -41, -13, -100, 25, 84, 102, 113, -103, -74, -105, 75, -56, 67, 17, 85, 45, -75, 13, 15, 19, 62, -75, 28, -67, -98, -60, 25, -49, 24, -18, 96, -61, -38, 91, -26, -15, 56, -44, 67, -74, 29, -52, 6, -62, 57, 40, -41, -31, -93, 0, -14, 103, 19, -53, 50, -51, -112, 89, 90, 71, -59, 109, -45, 9, -81, -72, -88, 95, -86, -95, 17, 101, -92, -60, -89, 78, 67, 61, 86, 55, 38, -65, 31, -107, -45, 28, 8, -16, 63, 69, 100, 32, 98, -74, 55, 61, -24, 93, -36, 13, -78, -29, -37, 15, -69, 78, -82, -27, -50, -42, 65, 49, 35, -95, 89, 23, -101, 38, -82, 29, -66, -40, -56, 5, 79, -53, -28, -84, 101, 95, -57, 64, -87, -11, 86, -10, -60, 23, 82, -69, -45, -52, 70, 31, -42, -22, 56, -25, -14, 80, -73, 97, -100, -50, 80, 81, 33, 91, -90, 75, -21, -116, -47, -56, 68, 74, 86, 97, 5, -9, -69, -41, 43, -79, 74, 68, 21, -18, -61, 103, 31, -70, -24, -36, 19, 51, -61, -45, -110, 111, -92, 80, -94, 46, -95, 105, 33, -74, 94, -16, 27, 49, -66, -79, 21, 5, 64, 54, -35, 102, 46, 21, 97, 24, 91, -22, -77, 82, 92, 87, 62, -48, 16, 73, 88, -52, 79, 101, -82, 42, 112, -36, 59, -11, -78, 44, -8, 17, -1, 89, -8, -48, 88, -26, 101, 64, 95, -19, -4, 23, 54, 69, -106, 69, 13, -62, 95, 72, -24, -70, 100, -87, 111, 42, 54, -51, -20, 87, 13, -66, 5, -100, 31, -22, -82, 44, -7, 83, 1, 103, 14, 80, 64, 69, 95, -26, 74, 5, 12, 31, 78, 14, -20, 106, 13, 12, -1, 31, 99, -89, 59, 8, 4, 13, 52, -46, -69, -41, 6, -27, -57, 64, 22, 93, -11, 54, 96, -43, -66, 35, -57, 46, 94, 84, -25, 45, -50, -89, 39, 18, -51, -101, -14, 99, -19, 37, -6, -38, -74, 79, -30, -97, 5, -28, 1, 85, 54, -54, -48, -18, 30, -82, 56, -14, 7, -103, 60, -4, -5, -13, 103, 48, 19, 13, -100, -28, -95, 48, -102, 74, 30, 48, 18, 31, -14, 114, -13, -44, 79, 107, 44, 58, -66, -98, -75, -53, -93, -44, 9, -55, 80, -72, 23, -78, 58, 93, -33, 42, 100, -51, -59, 8, 1, 18, 98, -14, -49, -101, -45, -70, 94, -85, -26, 94, 18, 9, -18, -14, 36, -41, -83, -45, 87, -47, -26, 69, 83, -41, -27, -14, 11, -34, 14, -26, 55, 61, 42, 73, -68, 67, -95, -23, 80, 36, -66, -68, 50, 61, -56, -31, -32, 116, 52, 88, 68, 12, 21, 6, 99, 76, 14, 69, -8, -86, -14, -103, -28, -11, 29, 37, 66, 69, 62, 85, 122, -10, -38, -61, -57, 112, -115, -88, -59, -16, 5, -54, 97, -21, -43, 42, 54, -50, -27, -6, -15, 51, 87, -3, -63, -85, -59, 112, -81, -54, 68, 44, -74, 13, -81, 102, -18, -4, 71, 56, -6, 107, -38, 19, -6, -88, -79, -34, 118, -52, -41, 71, -84, -8, 74, 62, 4, -115, 37, 30, 14, 16, -88, 68, -89, -3, 30, -26, -96, -29, 110, 62, 74, 100, 25, -6, -3, -19, 105, -26, 114, 88, -20, 35, 76, 115, -38, 21, -69, -5, -87, -103, -70, -74, 96, 24, 54, 24, 94, -17, -40, 110, -72, -20, -87, 65, -26, 21, -2, -79, 99, -97, -45, 17, 76, 24, -27, 67, -28, 29, 71, -62, -61, 31, 9, 90, -59, 89, -13, 52, -97, -93, 106, -23, -86, 64, -87, 28, 24, 90, 20, 102, -106, -22, -10, -61, 62, 10, 16, 84, -2, 95, -14, 75, 95, -40, 11, 111, 57, 42, -26, 0, -77, 22, 26, -14, 80, -68, -90, 67, -27, 13, 51, 115, 61,
  99, -14, 58, 21, -66, 74, -84, -78, 53, -63, -80, 51, -60, 43, 39, 16, -41, -58, -98, -30, 14, -93, 3, -92, 47, -33, 69, -48, -69, -97, 37, -61, 25, 79, -83, -52, -72, 77, 41, -69, -71, 101, 35, -82, 38, -98, 21, 15, 88, -36, -17, 65, -85, -22, 20, -46, -28, 9, -79, 94, 67, -69, -26, 77, -102, -100, 40, 55, 30, -33, 40, 67, -24, 18, 71, -28, -66, -67, 16, 70, 38, -54, -36, 66, 51, -64, -39, -9, 54, 46, -98, -10, 74, -81, -110, 20, -1, 101, -54, 26, -45, -24, 44, 12, -104, 89, 19, 95, -36, -78, 95, -39, 51, 3, 95, 67, 15, 12, 21, -85, -100, -81, 36, -92, 61, -72, -87, 125, -96, 44, 77, 74, 103, 100, 99, 53, -73, -62, 51, -27, -81, -6, -27, 99, 67, -18, 58, -35, -5, 51, 16, 70, -86, -101, -78, 60, -64, 73, 15, -6, -13, 83, 70, 95, -61, -14, -74, -49, -102, 78, -91, 77, -27, -15, -34, 26, -84, 3, 35, -105, 16, 63, 25, -87, 90, 1, 53, 63, -7, 20, 64, 75, 45, 27, 6, -31, -96, 38, -59, 85, -19, -114, 47, 87, 75, -33, -10, -72, 77, 28, -30, -98, -10, -61, -71, -61, -29, 43, 4, 33, 67, 30, -37, 42, -49, 67, 25, -10, -59, 40, 30, -109, -7, 32, -93, -82, -103, 98, -6, 109, 89, -77, -67, -28, -81, 31, 105, -16, -102, -33, 65, 41, -15, -20, -26, 65, 7, -24, 97, -102, -32, -45, 64, 83, -101, 31, 18, -39, 32, 65, -6, 43, -13, -58, -33, 7, -57, -19, 35, -72, 101, 12, -12, 99, 106, 56, 6, 10, -103, 85, 78, 52, -32, -26, -57, -107, -98, -87, 61, -65, 70, 106, -5, -29, -93, -87, -54, -14, -29, 27, -54, -107, 38, -85, 66, -88, 17, 99, -17, 7, -16, -102, -74, 47, 32, 89, -9, 101, -47, -47, 32, 48, -66, 97, 39, -58, 65, -97, 65, -114, 18, 92, -16, -24, -88, -47, -17, 7, 5, -107, 83, -4, 74, -43, -41, -6, -77, 58, 46, 50, 53, 61, 75, -17, -29, 24, 90, 44, 32, -21, 15, 40, 90, -55, 30, -6, -93, 73, -75, 46, -95, -87, -98, -47, -63, -49, 14, -67, 55, -102, -96, -8, 25, 48, 37, -51, 66, 62, -32, 72, -92, 85, 34, 2, 62, -24, 67, 79, -45, 99, -38, 74, 95, -90, 33, 75, -117, 64, 4, -9, -64, -68, 101, -75, 28, -27, 8, 0, -107, -82, -31, 3, -26, 35, -30, 58, -88, 40, 41, -108, 93, 34, -86, -88, 45, -93, 5, 25, -114, 21, 89, -65, -76, 5, -103, -109, -86, 73, -118, 99, -75, 91, 75, -89, -25, -114, -37, 66, 35, 14, 36, 77, -7, -6, -20, -22, -111, 29, -23, 72, -66, -101, 25, 75, 48, 75, 46, -5, 92, 85, -14, 104, 96, 20, 76, 25, -50, -29, 64, 50, 33, 25, -22, -107, -2, -75, 44, -116, -35, -7, -16, 73, -13, 50, -22, 26, 53, 101, -71, -24, 57, -98, 43, -49, -107, 57, -35, -37, 9, -116, 12, -47, -93, -89, 28, -88, 35, -90, 1, 37, 55, -5, 22, 44, -47, 36, -14, 5, 39, -56, -1, 89, 44, 28, -36, 41, 35, 52, 99, 4, -7, -24, 65, -103, -47, -55, -63, 7, 107, 16, 0, 33, 15, 68, 76, -7, 54, -101, -3, 56, -97, -51, 59, -18, 27, -71, 30, -49, 105, -5, 5, -57, -63, -91, 46, 17, 27, -50, -71, -74, 47, 26, 87, -105, 59, -26, -86, 71, 45, 20, 72, 40, 71, 15, 32, 31, -21, 16, 75, -26, -13, -51, -24, -37, -33, -104, -6, 0, 76, -66, 82, 99, 53, 64, 90, 45, -105, 25, 53, -31, 98, 32, 73, -91, -95, -98, 6, -61, 96, -71, 88, -72, 100, -85, 33, 49, 86, 9, -77, 47, 46, 54, -84, 2, 53, 41, -54, -57, 54, -45, -48, 59, 82, 100, -2, -73, 68, 26, -1, 54, 1, -61, 74, -48, -85, -89, -3, -2, 10, 36, -26, -3, -14, -93, 67, -86, 1, -59, 24, -86, -99, -7, 5, 12, 31, 1, -99, -64, 81, 24, -112, 13, 37, -20, 83, -77, -102, 0, 63, 62, 31, 13, -88, 79, 22, 29, -51, 25, 5, 0, 40, -17, -90, 57, -9, 32, -56, 65, 19, 7, -84, -95, -69, 48, -99, -31, -22, -10, -72, 38, -66, -70, 20, -63, -46, 66, -50, -109, 89, -7, 86, -52, -37, -62, 37, 76, 78, 9, 80, -93, 1, 3, 103, -44, -74, 72, -61, -87, 53, -9, 71, -96, 66, -17, -102, -104, -80, 31, -6, 75, -19, -75, 23, 11, -26, 99, -75, 25, -91, -35, -43, 87, -87, -10, -32, -2, 89, -3, -1, -43, 104, -104, -105, -14, -42, 1, 52, 27, 44, -56, -89, -98, -65, -7, 87, 2, -55, 89, -61, -3, -14, -100, 66, -106, -46, 70, -112, -82, -99, -15, 4, -42, -32, -81, 35, 66, 2, -82, -90, -73, -101, 51, 91, -33, -29, -105, 34, 49, 15, 53, 24, -108, -111, -53, -81, -51, -97, -4, 45, 54, -37, 39, -42, 58, 14, 15, 21, 28, -24, 92, 24, -101, -37, 49, -16, -88, 6, 60, -104, 63, -87, -51, -88, -66, 99, -86, -100, 90, -17, 58, -101, -6, -102, -26, -7, 0, -39, -111, 29, 82, 50, -100, 18, -62, 45, 38, 79, 98, -28, 39, 57, -43, -73, -54, -100, 50, -76, 5, 71, -109, 43, -1, 56, -53, -99, 52, -82, 72, 109, -18, -74, -92, 69, -33, -9, -16, 13, 82, -53, 50, 45, -70, 99, 63, 74, -50, -86, 63, 21, 36, -49, 38, 70, 84, 51, -80, 25, 94, -64, -60, 91, -80, 104, -25, -68, -52, -7, 16, -22, -76, -38, -86, -61, -86, 26, -11, 87, 85, 4, 0, -80, 80, 80, -96, -90, 9, -42, -90, 32, -43, -82, 21, 94, -72, -80, -51, -105, 4, -97, -77, -17, 0, 88, -99, 84, 15, -14, 89, -81, -70, 7, -84, 14, 63, -108, -45, 74, 101, -13, -9, -98, 82, 38, 12, -50, -84, -77, -50, -88, -12, 108, 81, -12, 91, -8, 69, -95, -7, 20, -64, -80, -93, -90, -14, -50, 88, -5, 24, -49, 53, 35, -117, 48, 40, -41, 0, -98, -99, -30, 61, 71, 102, 14, 11, 4, -45, 72, -81, -69, -12, -63, -55, -5, 59, -90, -15, 51, 84, 8, 8, -42, 1, 34, 41, 102, 4, -101, -86, 8, 88, -41, -18, 28, -71, 66, -18, 111, -6, 55, -105, 75, 51, 110, -68, 42, 35, -76, -41, 22, -88, 100, -31, -7, -29, 20, 73, -31, 6, -22, -56, 95, -11, -28, 1, -3, -59, -18, -9, -83, 14, 25, 99, 27, 8, 39, 28, -2, 73, -27, 53, -41, 99, 105, -47, 56, 0, 50, -95, -108, -16, 34, 68, -64, 34, 79, -4, -69, 100, -62, 42, 88, -5, -12, 97, 41, -31, -21, 46, 42, -22, -10, -77, 35, 102, 26, -80, -32, 55, -61, -33, 57, 76, 47, 82, -103, -92, 91, 66, 32, -28, 0, 18, 93, -70, 38, -76, -96, 54, -26, 12, -24, -40, -100, -61, 18, -95, -44, 98, -26, -95, -60, -74, 87, -26, 87, -9, 42, 50, -57, 22, 50, -42, -90, 55, -49, 67, -85, -73, 6, 48, -48, -4, -88, -65, -26, -65, 36, -77, -21, 47, -42, -20, -62, -79, -75, -15, -52, 73, 6, 54, 97, 80, 100, -3, 45, 51, -50, 45, 27, 15, -94, 61, -61, 65, 66, -43, -27, 48, 78, -49,
  72, -10, 65, 107, 54, -1, 69, 74, 13, 30, -79, -64, -20, 37, 104, -42, -3, 27, -13, -35, 10, -85, 77, -41, 18, 40, -70, -20, -75, 39, -30, -26, -6, 75, -21, 23, -26, 38, 106, -9, -92, -92, -70, -55, -64, -32, 85, -64, 65, -48, -37, -107, -27, -47, 83, 58, 50, 16, -6, -65, -29, -61, 99, 95, 65, 2, -18, 20, -74, 101, -70, -14, 54, -61, -66, -33, 8, -66, 65, 79, -58, 9, 67, -19, 104, -50, 18, -58, -62, 84, 12, -35, -19, -93, 34, 83, -8, 43, 71, -3, 28, 52, -88, -4, 83, -76, 87, 29, 39, 99, -84, 104, -16, 38, 99, 108, -16, -89, -32, -96, 99, -54, -42, -91, -3, -51, 29, -38, -85, -34, 40, -1, 106, 84, -49, 56, 82, 34, -87, 17, 37, 22, -28, -85, -49, 23, -91, 4, -67, -95, -21, 66, 99, 18, 51, 77, -80, -34, 27, 69, -28, -7, 63, 37, -90, -49, 4, -38, -64, -94, -61, -33, -73, 15, 75, 72, 38, 21, -77, 99, 55, 22, -88, -51, -9, 77, -78, 89, 36, -3, -40, 6, 21, 100, 39, 60, -78, 91, -76, 88, 74, -19, -44, 58, -89, -89, 89, 73, -52, 27, 109, 30, -2, -85, -22, -98, -18, 75, 77, -2, -85, -51, -3, 1, -104, 9, 41, 10, 5, 55, 77, -45, 94, 14, -38, -83, -49, 67, 20, -27, 67, 42, -77, -50, -29, 5, -42, 75, 13, 117, -57, 102, 57, -41, 113, 64, -83, -57, -54, 104, -60, -1, -55, -6, -81, 60, 91, -17, -74, 42, 49, 21, -68, 29, -92, -83, 101, -23, -78, 75, -104, -42, -71, -30, -66, 72, 10, 37, 117, -25, 54, 101, 98, -8, -63, 64, 7, 19, 27, -54, -42, 22, 74, -44, -98, -30, -79, 8, 20, -41, 92, 50, -62, 42, -5, -18, -109, -67, 11, 18, -53, -56, -74, -51, 24, -84, -44, 59, 107, -48, -22, 91, 16, -4, 20, -16, 94, 20, -85, -54, 6, -38, 31, -66, 9, 33, 24, 68, 8, -86, 15, -18, 91, 70, -30, -1, -35, -4, -57, -81, 64, 57, -84, 17, -66, 29, -77, -55, -72, 22, -39, -4, 64, 54, -50, -34, -80, 66, 53, -96, -67, 109, -97, -73, -16, 101, 91, 64, 69, -47, -31, -14, -97, 9, 88, 1, 52, 6, 90, 71, -85, -42, -39, 35, -57, 26, 74, 24, 104, -83, -24, -103, -45, 11, 60, -6, 4, -95, -33, 70, 49, -52, -30, 34, 75, 116, 7, 102, -62, -81, 20, -96, 50, 80, -85, -1, -47, 43, -40, 90, -9, -54, 75, 21, 81, 107, 19, 72, 1, -76, 13, -61, -39, 32, -43, 8, -90, -78, -32, -94, 101, -59, -20, -36, -74, 48, 33, 49, 37, -17, -50, -21, -71, 4, -27, -67, -81, 68, 92, 70, 15, -10, 81, 85, -29, -4, -73, 55, -33, -59, 88, 76, -95, 8, 66, -67, -97, 77, 6, 75, 92, -82, 70, -94, -58, -107, -1, 15, 60, 110, -3, -84, 79, 30, -94, 42, -25, -14, -62, 29, -61, -96, -59, -58, 42, -39, -52, 81, 92, -1, 82, 24, -70, 106, -39, -79, -49, -85, 26, 37, -55, -38, 4, 1, -85, -92, 67, 36, -10, 85, -54, -91, -58, -10, -80, -63, -87, 30, 64, -81, -77, 80, -37, -16, 67, -7, 96, 63, 27, -28, -71, -52, -106, 32, 90, 54, 16, 30, 43, -55, -35, 97, -40, 81, 5, -36, -76, -26, -84, -96, 67, -99, -25, -95, -23, -19, -91, 0, 97, 13, -88, -76, -68, 59, -81, 97, 92, -36, 82, 65, 64, 111, 86, -54, 87, -14, -58, 75, -112, 112, -19, 46, -25, -80, -80, 88, 38, 98, -33, -89, 60, 66, 3, 87, 58, 71, -67, 93, 93, -34, 10, -28, 107, 11, -25, 31, -74, 21, 73, 0, 12, -121, 22, 95, -20, -37, -23, 93, -93, -70, 21, -12, 85, -62, 42, -71, -46, -17, -32, 40, 25, -16, -101, 89, -60, -111, -62, 91, -46, -56, 97, 39, -50, 85, -29, 16, 15, -22, 30, -65, 37, 44, -48, 47, -94, 73, 14, 54, 33, -49, 50, -104, -3, -1, 40, -91, -46, 95, -58, -79, -49, 65, -3, -92, -62, -54, -38, 47, 92, -29, 79, -8, 49, 107, 108, 5, 33, -46, 86, 37, -93, 50, 38, -6, -10, -13, 55, 102, -88, 86, -98, 88, -85, -17, -57, 44, -15, 53, -90, 32, 99, 50, 3, -47, 70, -93, -32, 42, 24, -100, 74, -50, 33, 40, 44, -33, 40, -79, -59, 20, 61, 104, -96, 92, 46, 92, 36, 14, 81, 14, -69, -9, -53, 92, -79, -23, 82, -11, -96, 62, -20, 83, 50, -12, 14, 91, 93, -87, -89, -48, 79, -63, 37, 79, -45, -46, 41, -44, -84, -17, -74, -87, -11, -9, 10, 102, -3, -1, -64, 26, -83, 103, 81, -98, 58, -85, -25, -14, 48, -19, 99, -53, 68, 115, 96, -16, 103, -58, -7, 94, 106, 38, 88, 42, 24, -27, 0, -11, 87, -85, 97, 76, -83, 72, -96, 5, 107, -111, -33, 8, 94, -2, 125, -4, -77, 36, 37, -59, 104, -54, -43, 0, -64, -72, 80, 40, 54, -102, -58, 43, 48, 9, 16, -62, -83, 27, 94, 73, 15, -23, -74, -29, 0, 32, 44, 15, -79, 33, 47, -25, 21, 60, -75, 86, -31, -49, -6, 84, -64, -52, 30, 85, 85, -97, -28, -47, 96, -21, -25, 71, 72, -99, 24, -85, 71, 14, 111, -53, 20, 79, -54, 72, 44, -32, -30, -21, 79, 64, -88, 19, 49, 96, 87, -57, 94, 46, -25, -79, -89, 7, -39, -11, -69, 73, -103, -15, 5, -96, -15, 87, 59, 14, 98, -107, -32, 91, 3, 95, -74, 7, -26, -7, -77, 91, 49, -42, -9, -12, -4, -40, -84, -18, 4, -64, 40, -83, -5, 29, -3, 26, -27, 30, -72, 72, -33, 37, 80, 68, 28, 67, -12, 5, -49, 75, 104, 92, -39, 53, 87, 92, -91, 0, -81, 18, -76, -64, -50, 93, -88, -87, 52, -14, -18, 77, -45, -90, -86, -22, 27, 109, 1, -32, -95, -62, 20, 93, 1, 71, 99, -25, -72, 3, 38, 63, -74, 90, 86, -27, 52, -24, -77, 82, -94, -30, 98, 6, 41, -34, 42, -10, -9, -40, -49, -47, -93, -66, -59, 28, 32, -46, -65, -10, 53, -11, 81, 28, -69, 25, 54, -39, 62, 78, 37, 100, -38, -30, 107, -42, -76, -4, -35, -47, 42, 36, -20, 35, -17, 53, 2, 78, 95, 54, -114, 108, -20, -2, 46, 66, 16, 85, -38, 22, -77, 82, 26, 43, -71, 55, -55, -31, -83, -34, -8, -45, 46, -40, -99, 78, -1, 76, -18, -30, 6, 40, 44, 12, -105, -54, -90, -96, -4, -80, 37, -62, -13, 94, 61, -22, -35, 85, -22, 44, -54, -23, 102, -51, 86, -10, 17, -22, -9, -88, 99, 11, 26, -58, -97, 62, 92, -120, 74, -11, -34, -42, 37, -17, 106, -61, 34, 97, 100, -34, 45, -74, 3, -6, -52, 34, 74, 43, -71, 67, 64, 21, -28, 82, 6, 86, 18, -56, -16, -55, -62, -97, -90, -20, -54, 28, -102, 81, -52, -74, 72, 61, 37, -2, -96, -81, -67, 67, 67, -14, 72, 13, 92, 40, -19, 71, 57, -77, -77, 7, 1, -76, 26, 56, 3, 109, -12, -109, 19, 20, 17, 4, -24, 8, -81, -121, 101, -93, 37, 47, -51, -112, 46, 100, -14, -2, -77, 25, 19, 65, -88, -21, 99, 78, 30, 72, 10, -87, 33, 12, -43, 112, -83, -5, 89, 89, 51, 62,
  -41, 55, -110, -15, 17, -83, 63, 70, 88, -93, 105, -41, -72, -37, 77, 42, -15, 7, 90, 53, 91, 90, -29, -22, 101, 25, -6, 41, -39, -84, -55, 38, 116, -86, -88, 85, -58, -6, -57, 4, 9, 71, -80, 20, -59, 74, -10, -91, -4, 17, -80, -80, 35, 88, 42, -18, 27, -47, 21, -98, -4, 38, 54, -4, 82, -88, 81, 104, -17, -64, -90, -36, -24, 18, 40, 82, 69, 26, -98, 28, -86, -6, -72, -113, -70, 51, 29, 24, -52, -21, 98, -57, -72, -73, -70, -31, -87, 16, -15, 39, 29, -45, -104, -37, 88, -45, -32, 113, 19, 102, 63, 22, 104, -68, -64, -117, -2, 12, -19, 72, -32, -73, 67, -61, -14, 90, 6, -6, -28, -80, -85, 23, 31, -4, -86, 110, -64, 85, -66, -16, 58, -24, 32, 55, -51, 23, 85, -85, -79, 118, -56, -54, -73, -24, -89, -87, 99, 94, 5, 79, -44, -37, -127, -35, 52, -14, 64, -8, -65, -52, -102, 109, -7, 72, 24, 86, -78, 18, 68, -78, 31, 69, -14, -95, -53, 62, -91, -95, 44, -22, 31, -8, -88, -95, 25, -51, -22, 98, -27, 6, 38, 101, -22, 30, 78, -41, 44, 103, -35, 17, 0, -34, 50, -104, -68, 1, 98, 11, -119, 60, -80, -9, 76, 56, -90, -72, 72, -9, 5, 54, -68, -106, -14, -2, -61, 85, -31, 28, -28, -87, 80, 91, 24, -42, 74, -18, 84, -22, -59, -82, 88, 50, -25, -2, -55, -31, 16, -53, -65, -28, 21, 18, 51, 96, 41, 19, -27, -46, -48, 3, 42, 54, -63, -67, 4, -12, 12, -18, -61, 60, -54, 59, -81, 16, 50, 23, 6, 24, -69, -30, 85, -31, -86, 92, 65, -22, -47, -34, -92, 77, -58, 22, 18, -72, -42, -113, 92, -56, -38, 87, 67, -23, -89, -13, 58, -2, 16, 27, -31, 7, -4, 9, 18, -51, 84, 3, -112, 73, -34, 82, -64, -14, -53, 106, 41, 43, -33, -44, -74, -70, -21, -57, -39, -85, 2, 13, -72, -85, 37, 100, -17, 48, 68, -37, -69, 21, -65, -81, -95, -4, -96, -54, 106, -13, 76, 62, -41, 81, 3, 3, 0, 13, 38, -67, -36, -78, -3, 61, 32, 112, -11, 75, -60, -95, 95, -35, -6, -60, -26, 74, 77, 28, 47, 38, -32, 19, -52, -33, 47, -79, -21, -13, -37, -119, -89, -60, -109, 69, -98, 82, -5, 97, 103, 93, -23, 29, 3, 88, -40, 59, -27, 67, 92, 91, 53, 107, 49, 45, 94, -72, -79, 16, 38, -65, 99, 68, -38, -50, -74, 14, -16, -105, 46, -61, 13, -51, 50, 45, -15, 100, -63, -70, 19, 42, -99, 82, -33, 29, 66, -5, 53, 19, -21, 54, 7, -79, -37, -52, 41, -20, 76, 68, 48, -32, -102, 7, 100, 79, -109, -53, -18, 103, 75, 49, -99, 96, 53, -67, -66, -95, -71, -13, -70, 41, 68, 37, 73, -37, 14, 8, 50, 30, -49, 34, -50, 78, 77, 9, -96, 86, 89, 86, 81, 77, 37, -11, -25, -52, 62, -24, 55, -48, -1, 91, 23, -44, 20, 84, -74, -90, 56, 92, 66, -30, -10, 14, 50, -94, 59, -67, 1, -73, 35, -43, 5, 98, -10, 28, 75, -93, -19, -36, -71, -31, -78, 34, 98, -65, 5, 34, 58, -107, 9, -34, 10, -95, 31, 106, 26, 7, 72, -77, 8, 89, 43, 86, -7, 23, -119, -34, -3, -19, -16, 74, 87, -3, 69, -9, 33, -73, -24, 39, 42, -92, 76, -76, -31, -15, 111, -88, -30, -58, 42, 68, 10, 43, -77, 6, 81, -86, -51, 7, 85, 115, 85, -80, 64, 50, 11, -74, -72, -38, 48, -44, -1, -24, -97, 8, -91, 59, -114, 88, 83, -73, 8, -49, 10, -108, -7, 96, -40, 30, 73, 47, -27, 8, 38, 86, -26, 69, 4, -34, -87, -60, -64, 18, -63, 63, -85, 46, 71, -12, -21, -65, -48, -27, 37, 104, -83, 41, 4, 22, -76, 51, -105, -28, -42, -29, 26, -58, 31, 95, -109, -57, 72, -18, -71, 49, 65, -8, -78, 46, 26, 41, 33, -96, -34, 38, -30, -17, 71, -41, 45, 113, -80, -107, -68, 105, 89, -69, -98, -105, 23, -47, -63, -58, 91, -48, 19, 52, -96, -71, -2, -41, 86, -94, 38, -60, -24, -78, -25, -21, -29, -23, -44, -26, -53, 33, 51, 84, 0, 5, -39, -54, 7, 49, -88, 62, 32, 103, -59, -78, -84, -24, -65, -102, -94, 73, 120, -53, -27, 9, -6, -49, 28, 26, 3, 13, -13, -69, 107, -9, -88, -45, -74, 53, -27, 37, -14, -25, -58, -19, -55, -38, 102, 22, -28, -64, -38, -54, -64, 79, 38, 56, 39, 114, -17, -1, -64, 43, -88, -107, -88, -90, 39, -32, 16, -25, -50, 19, 71, -18, -47, -56, 87, 52, 41, 50, -42, 83, -110, -117, 78, -41, 7, -43, -78, 37, 10, -53, 63, -21, -64, 16, 29, 62, 17, -60, 51, 85, 68, 90, -4, -55, 84, -55, -17, -1, -53, -98, -84, 80, -19, -79, 45, 83, 98, -63, -72, 19, -113, 6, 24, -14, 54, 23, 112, -47, 28, -86, 8, -67, 70, 90, 103, -87, -59, 10, -80, 89, -18, 80, 2, -10, 3, 0, 97, -117, -89, 59, 52, 81, -97, 82, -68, 35, 75, 16, 64, -95, 16, 27, 45, -41, -10, -103, -33, 11, -45, 25, 76, 13, -17, 47, 64, -15, -68, 102, -113, -56, 18, -43, 52, 14, 19, -59, 15, 27, -80, 37, -23, -81, 8, 47, -28, -21, -18, -52, 86, -87, 5, 63, -1, 41, -46, -27, 94, -23, 22, -59, 57, 47, 80, -35, 48, -28, 23, -33, 87, -84, -8, 20, -16, 59, -14, -30, 64, 71, 65, -89, -89, 25, 67, -81, 56, -41, -86, -85, 3, -25, 115, -30, 48, 47, 25, -80, 81, 83, -1, 16, -43, 17, -80, 35, 27, 84, -69, 70, -1, -54, 85, -83, 93, 44, -55, -21, -3, 18, 57, -12, -46, -45, 40, 20, -21, 48, -16, 3, 103, -34, 53, -26, -53, -23, -2, -47, -26, -58, -62, 56, -23, 36, -58, 90, 44, 9, -11, 64, 11, -1, -63, 104, 100, 54, -89, -74, 27, -28, 73, 15, -85, -41, 80, 22, 38, -34, -50, 56, -70, 50, 92, -106, -60, -26, -38, 74, 32, -72, -10, -68, 10, -55, -93, -112, 96, 15, -94, 99, -71, -30, 49, 74, 35, 15, -103, 33, -70, 62, 80, 17, 43, -45, -99, -61, -87, -42, -61, 52, 34, -70, -7, -36, -58, 43, 65, 57, 76, -67, 90, -96, 28, 92, -23, -32, 74, -56, -64, -46, 52, -72, 17, 76, -3, -48, -33, -61, 11, 90, -96, 12, 9, 69, -108, 77, 13, -57, -79, -78, 41, -83, -84, -53, -50, -10, -47, -16, 37, -30, 93, 65, 43, -67, 58, 0, 23, -36, 0, -71, 47, 9, -70, 26, 117, -71, -2, -118, 120, -96, 79, -85, 69, -78, -77, -38, -17, -27, 53, -80, -39, -83, 8, 27, 14, 53, 70, 101, 67, 13, -57, 42, 5, 114, 0, -72, 87, 16, -17, -88, -66, -26, -109, 60, -23, -19, 18, 20, -68, 79, 45, -11, -43, -42, -45, 12, 90, 4, -94, -30, -90, 13, 61, 17, -88, 41, -56, 72, 34, -3, -57, 57, -63, 20, -43, 41, 52, -13, -55, -77, 4, 100, -58, -44, -71, -26, 5, -66, 96, -21, 42, 97, -98, -111, -21, -96, -60, 1, -91, -96, -72, 88, 69, 41, 79, 11, 19, -98, -74, -31, 61, 41, -22, 78, -89, 77, 34, 13, -26, 107, -91, -21,
  -37, 65, 19, 30, 74, 53, -42, 9, 7, -83, -58, -36, 8, 72, -17, -38, 51, 68, -6, -35, -43, 14, 40, 45, 36, 87, 5, 16, 63, 33, 86, -54, 52, 18, -51, -9, -25, 5, -84, -21, -81, 35, 73, 75, 23, 40, -64, 72, -25, -37, -37, 85, 11, 48, 95, 71, -19, -52, -11, 59, -20, -51, -104, 31, -64, -60, 33, -96, -23, 66, -59, -63, -25, 5, -66, -16, 43, -81, 92, 47, -61, -24, -42, 52, -47, -49, -45, 86, -42, 49, 13, -93, 43, 39, -84, 60, -33, 110, -66, 14, -99, -90, -56, 48, -76, 18, -106, -69, -84, -110, 109, 47, -31, 87, 11, 118, 20, 85, -56, 83, 41, -60, 57, 59, 5, -51, 20, -82, 105, 42, 93, 40, 100, 66, -25, 93, 54, 10, 68, -75, 36, 92, -51, 45, 46, 54, 66, -85, -88, 83, 5, -78, -98, -34, -78, 26, -114, 90, -112, -4, -71, 59, 36, 112, -87, 83, -63, -71, -12, 34, -96, 93, -39, -24, -100, -9, 55, 106, 70, 62, -63, 99, -54, 2, -13, 79, 68, 36, -9, 81, 74, 106, 4, -40, 117, -60, 79, -56, 2, -93, -78, -38, -54, -116, 92, 41, -48, 15, 69, -5, -89, -78, -84, 32, 35, -85, 93, -42, -73, 84, 79, 77, -50, 44, -104, -76, -46, -4, -6, -105, -80, 77, 12, 95, -24, 28, 35, 10, -56, -16, -98, 92, -77, -68, -105, -63, 39, 102, 2, 62, -27, -90, -6, -1, 73, -75, -85, -93, -5, 36, -1, -84, -95, -42, -43, -61, 113, -80, 40, 15, -106, -6, -48, 26, -93, -20, -52, 64, -6, -32, 37, -33, -40, -32, -69, 52, 40, 86, 28, -28, -76, -82, 41, 104, -15, -1, -29, -39, 116, -55, 54, 107, 115, -106, 49, -74, -64, -96, -45, -54, -44, 49, -65, 35, -44, -36, -31, 45, 18, -100, 38, -77, -12, 70, 34, -54, 16, -84, -94, -22, 48, -51, -69, -8, -59, -10, -94, 86, 29, -68, -44, 30, -10, 81, 26, -92, -52, 92, -2, -34, 39, -35, -4, -49, -66, 15, -31, -99, -2, -60, 3, -60, 66, 40, -48, 87, -4, 29, 68, 12, 69, 44, 41, -34, 40, 91, -1, 95, 107, -38, -41, -25, 21, 18, 69, 29, -22, 39, -72, 35, -18, 47, 39, 121, 94, 72, -79, -9, 104, -52, -24, -37, -63, 98, -65, -35, 31, -83, 51, -98, 107, 11, 4, -97, -5, -91, 62, 90, -45, -70, -57, 46, 20, 72, 54, -40, 21, 38, -2, -27, -37, 50, -44, 76, -41, -37, -78, -65, -85, 89, -62, -69, 60, 0, -28, -100, -32, 4, -75, -92, -84, -21, -7, 75, 103, 84, -52, -63, -28, -40, -19, 28, 45, -83, 44, -2, -28, 37, -29, 70, -24, -30, 58, 116, -60, 94, 3, 41, 35, -74, 30, 36, 11, -32, 55, -39, 42, 85, -17, -44, 58, -24, -21, 6, -68, 76, 13, -86, 95, 108, 25, -75, -7, -53, -33, -7, -97, -75, 69, -86, 89, -43, -35, -85, -77, 31, -79, 59, -10, -58, -55, -18, -78, 34, -40, 3, 121, 88, -46, -11, 33, 78, 23, -57, -65, 50, -14, 91, -92, -52, 35, -56, 23, -19, 27, 70, -61, 75, -59, 33, 64, -112, -48, 7, -23, 53, 48, 51, 47, 52, 26, 54, -92, 62, -17, -77, -62, 58, 69, -107, 59, -39, 47, 35, 35, 64, -35, -12, -75, -86, 116, -67, 91, 44, 51, 41, 125, -42, -74, -90, 98, -26, -4, 20, 76, 20, -79, 101, 40, 9, 59, -85, 7, 105, 46, 50, 31, 53, 34, -94, 29, 29, -88, 1, -79, 70, 78, -5, -25, 84, -81, -47, 71, 65, -79, 37, 13, 16, -66, 7, 6, 20, 92, -99, -11, 14, -113, 38, 80, 67, 86, 96, 5, 68, 10, -108, -55, 3, -39, -7, -86, -54, 101, -44, -29, -41, -36, 99, 3, 20, -76, 38, -114, -45, -67, 1, -56, -4, -11, -54, 53, 22, -27, -49, -62, 114, 62, -96, -90, -79, -91, 78, 48, 54, -54, -14, -20, 73, -58, 34, -25, -91, 47, -6, -10, 61, -94, -82, 84, 32, 80, -50, -68, 69, -52, -105, 45, 64, 17, -57, 21, -9, 20, 15, 5, -78, 22, 73, -99, -9, 98, -64, -50, 22, 14, 23, 34, -42, 4, -2, -16, -53, -49, 10, -55, -93, 62, 24, -13, 29, 94, 86, -84, -63, -17, -56, 68, 100, -66, 47, -2, -45, -34, -20, 55, 42, -22, 19, 16, 11, -74, 4, -111, 72, 1, 34, -56, -70, 31, 96, -86, 25, 120, -93, 23, 51, -118, 47, 61, 71, -105, -84, 62, 48, 84, -18, 112, -21, 30, -60, -88, 82, -52, 67, 16, 22, 78, -78, 25, -22, 70, -35, -42, -82, -1, -33, -112, -39, 50, -5, -113, 52, 86, 0, 64, -8, -85, 94, -63, 43, 79, -16, -58, -21, -29, 53, -34, 54, -33, 81, -90, -35, 90, -42, -3, 9, 30, 7, 120, 105, 33, 63, 74, -46, 44, 91, -79, 5, 57, 1, -13, 101, 14, 27, 19, -4, -95, 16, 3, -94, 78, -46, -98, -42, -13, -9, -6, -4, 67, 94, -82, 35, 57, -35, -51, 109, -39, 15, -19, -4, 6, -91, -85, 20, 4, 77, -92, -45, 32, 43, -8, 11, -7, 41, 69, -104, -38, -52, -34, 70, -76, 49, 6, -108, -27, 38, -95, 112, 89, -18, 35, 78, -97, 41, 91, -80, -28, -95, 103, -113, 4, -89, 71, -1, -101, -4, -49, -108, 92, -11, -60, -79, -71, 14, 12, -96, 57, 71, 65, -10, 18, 46, -66, -34, -29, -51, -66, -25, -106, 27, 32, 83, -43, 81, 96, 18, -17, -43, 123, -61, 38, -80, 63, -82, -116, -95, 19, 93, -59, 119, 96, -41, 9, 108, -32, 82, 30, 89, -20, -68, -66, 81, -48, 64, -74, -40, -97, -74, -34, -73, 33, 63, -67, -18, 108, 64, -101, 121, 65, 72, -11, 102, -74, -70, -43, -103, 46, -112, 91, 109, -13, -54, 86, 50, 112, 101, -63, -30, 60, 84, 101, 93, -71, -74, 31, 65, 100, 33, -51, 112, -56, 52, 19, 59, 13, -60, 24, 31, 66, 16, -44, -103, -43, 78, 75, -48, 3, 89, -91, -64, 101, 22, -7, 17, 16, -27, 86, 6, 1, 92, 43, -57, 53, 58, -111, -85, 80, 63, -114, -6, 60, -58, -80, -86, -52, 86, -33, -110, -54, 59, -62, -24, 89, -58, 5, -83, -98, -63, -79, 86, -70, -94, 18, -115, -48, -19, -35, 94, 82, -65, -34, -97, 6, -8, 3, -84, 63, 69, -47, -117, 99, -97, 82, 5, -58, -110, 72, -60, 0, -14, 35, -59, 92, -80, 0, 27, 1, -68, -79, -84, 52, 71, 8, 30, 26, 9, 109, 84, 81, -45, 3, 25, -86, -87, 72, 60, 21, -81, 116, -26, 55, -46, -108, 110, -111, -8, 20, 58, 71, 87, 30, 104, 14, 24, 58, 112, 59, 74, 33, -19, 95, 47, 94, -56, -38, 92, 102, -22, -60, -45, 116, 59, -103, 42, 86, -81, 102, 0, 40, 10, 37, 75, 68, 44, 19, -113, -68, 21, -13, -29, -88, -22, -26, 50, 72, 53, 38, -109, 114, 14, 51, 19, -39, -100, 9, -51, -20, -45, 101, 80, -41, 112, 33, 68, 31, -74, -48, -106, -82, -69, 6, 62, -91, -2, 28, 57, 34, 87, 76, 59, 113, 7, 38, -74, 49, -22, 62, -99, -23, -73, 63, -23, 87, -45, -42, 75, -19, -92, -37, 44, -70, -80, 70, 55, -84, 17, -105, 13, -34, 7, 37, -51, 92, -76, 18, 91, -92, 26, -15, 94,
};
const TfArray<2, int> tensor_dimension29 = { 2, { 10,1280 } };
const TfArray<1, float> quant29_scale = { 1, { 0.00063921906985342503, } };
const TfArray<1, int> quant29_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 0 };
const ALIGN(8) int8_t tensor_data30[3*10] = {
  -52, 127, -61, 15, 112, -57, -100, -96, 73, 1,
  96, -59, -81, 6, 17, 46, -104, -59, -65, 123,
  -11, -93, 110, 103, 2, 73, -109, 58, -30, 33,
};
const TfArray<2, int> tensor_dimension30 = { 2, { 3,10 } };
const TfArray<1, float> quant30_scale = { 1, { 0.0053518051281571388, } };
const TfArray<1, int> quant30_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(8) int32_t tensor_data31[48] = { 10020, 11942, -6, 1867, 68515, 4793, -4359, 17717, 6511, -1963, 15498, -72, 621, 2474, 496, 3499, -2876, -8723, 12859, 33197, 9833, -858, 2003, 15184, 10996, 5415, 1222, 8569, -1477, -4614, 14341, 4114, 3865, 4772, 11065, 7305, 2827, 2866, 17085, 14817, 2761, 21953, 7433, -4431, 2024, 2986, 9788, -1293, };
const TfArray<1, int> tensor_dimension31 = { 1, { 48 } };
const TfArray<48, float> quant31_scale = { 48, { 7.7300639532040805e-05, 6.4573658164590597e-05, 9.8526972578838468e-05, 0.00014744262443855405, 1.886230347736273e-05, 0.00011204401380382478, 0.00012290276936255395, 4.8449324822286144e-05, 7.6929034548811615e-05, 0.00015453928790520877, 5.699199391528964e-05, 9.77554009296e-05, 7.6131851528771222e-05, 0.00015843339497223496, 0.00011065763101214543, 0.00015322354738600552, 0.00015887166955508292, 8.0743659054860473e-05, 6.5871368860825896e-05, 2.9362330678850412e-05, 8.1445396062918007e-05, 0.00013651265180669725, 0.00020974005747120827, 5.9101548686157912e-05, 7.1574082539882511e-05, 0.00011005491978721693, 0.00015788248856551945, 8.2540420407894999e-05, 0.00013008389214519411, 7.6799202361144125e-05, 6.5882544731721282e-05, 0.00010668375762179494, 0.00016398774459958076, 0.00010585136624285951, 6.6151980718132108e-05, 9.7225209174212068e-05, 0.00016954301099758595, 0.00017045139975380152, 5.3465028031496331e-05, 6.2409475503955036e-05, 0.0001008091276162304, 4.3010622903238982e-05, 0.00010463909711688757, 0.00014826131518930197, 8.6481224570889026e-05, 0.00012137662270106375, 9.1082678409293294e-05, 8.9191213191952556e-05, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(8) int32_t tensor_data32[48] = { -18433, -1050, -4586, 30304, 28685, 10056, -27, 3581, 702, -5452, -4148, 11415, -76, 10513, -4298, -6868, -2371, 4, 5824, 1103, -199, 11758, -2328, 242, 38, -40, -273, -6144, -9, 337, -2650, 59, -2, -16168, -608, 12533, -1055, 675, 37, -1557, 229, -609, -160, -902, -45, -86, -13394, 7205, };
const TfArray<1, int> tensor_dimension32 = { 1, { 48 } };
const TfArray<48, float> quant32_scale = { 48, { 9.1098016127943993e-05, 0.00014865539560560137, 0.00010042131907539442, 5.7568755437387154e-05, 0.00015738671936560422, 9.7517266112845391e-05, 0.00047543694381602108, 0.00025032937992364168, 0.0001529284636490047, 0.00015848588373046368, 0.00041969944140873849, 0.00011081159027526155, 0.00034946933737955987, 8.296236046589911e-05, 0.00040032027754932642, 0.00016728002810850739, 7.7164273534435779e-05, 0.0028257227968424559, 0.0002040277177002281, 0.000647608598228544, 0.00017310901603195816, 0.00011773793085012585, 0.00013589480658993125, 0.00016868405509740114, 0.00024028074403759092, 0.00017046765424311161, 0.0001907783153001219, 0.00040191737934947014, 0.00017704445053823292, 0.00090104673290625215, 0.00039198546437546611, 4.5097043766872957e-05, 0.0001780358434189111, 0.00020532646158244461, 0.00022811400413047522, 8.5204410424921662e-05, 0.00011000994709320366, 0.00015351617184933275, 0.00038294619298540056, 0.00025473791174590588, 9.0841560449916869e-05, 0.00059052999131381512, 0.00023088839952833951, 0.00055317120859399438, 0.00029431903385557234, 0.00013696948008146137, 0.0001939184294315055, 0.00010738129640230909, } };
const TfArray<48, int> quant32_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(8) int32_t tensor_data33[48] = { 502, -1517, 2388, 5613, 10523, 1736, 7493, 7625, 8437, -1718, -146, 4164, 6559, -564, 4270, 2757, -866, 5690, 8700, -4709, 8783, -1909, -3447, 4963, 11479, -7687, -466, -9482, -19, 515, 2551, 1665, 2554, 1701, 11417, 3168, 9312, -3311, 834, 1689, 3137, 1536, 5736, 9052, -193, 1266, 1515, 2928, };
const TfArray<1, int> tensor_dimension33 = { 1, { 48 } };
const TfArray<48, float> quant33_scale = { 48, { 0.00014698797895107418, 0.0001283083256566897, 0.00013723912707064301, 9.8930264357477427e-05, 6.7947315983474255e-05, 0.00012605592200998217, 8.8048051111400127e-05, 8.0123405496124178e-05, 8.4116232756059617e-05, 0.00018636410823091865, 0.00018274079775437713, 0.00010339471191400662, 0.00010900824418058619, 0.00010762295278254896, 0.00013711237988900393, 0.00016891694394871593, 0.00018007479957304895, 0.00012784537102561444, 9.6594332717359066e-05, 9.8432799859438092e-05, 8.7648637418169528e-05, 0.0001258198608411476, 7.9103447205852717e-05, 0.00012270417937543243, 6.5218053350690752e-05, 7.2804301453288645e-05, 0.00010199718963121995, 7.1603077230975032e-05, 0.00012468649947550148, 0.00011869792797369882, 0.00011945151345571503, 0.00027739533106796443, 0.00013618142111226916, 0.00011014538176823407, 7.4080766353290528e-05, 0.00012570957187563181, 8.6197760538198054e-05, 9.8091928521171212e-05, 0.00013710813072975725, 9.3790840764995664e-05, 8.4913917817175388e-05, 0.0001055219181580469, 0.00010131022281711921, 8.45848917379044e-05, 0.00012828776380047202, 0.00023636280093342066, 0.00010124278924195096, 9.669827704783529e-05, } };
const TfArray<48, int> quant33_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(8) int32_t tensor_data34[8] = { 2942, 30859, 1778, -11470, 14491, 2021, 23821, 9939, };
const TfArray<1, int> tensor_dimension34 = { 1, { 8 } };
const TfArray<8, float> quant34_scale = { 8, { 0.0002207842335337773, 0.00010644800204318017, 0.00031818897696211934, 0.00019123463425785303, 0.0003242918464820832, 0.00017077800293918699, 0.00014544258010573685, 0.0001791543181752786, } };
const TfArray<8, int> quant34_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(8) int32_t tensor_data35[48] = { 12248, -4444, 8107, 443, 7338, 10382, 14605, 12542, 34963, -525, -8626, 22464, 1, -2140, 12704, 24786, -263, 23602, 27052, -1007, 22944, -10524, -677, 3193, 23489, 169, 211, -336, 16152, 13216, 20303, -7709, -9719, 10285, 22343, 14643, 18947, -1884, 15263, -289, 41682, -6402, 26446, 25090, 22678, -23346, -7050, 12347, };
const TfArray<1, int> tensor_dimension35 = { 1, { 48 } };
const TfArray<48, float> quant35_scale = { 48, { 9.869210043689236e-05, 0.00011220318992855027, 9.6558178483974189e-05, 9.3072092568036169e-05, 0.00010174111957894638, 0.000100624245533254, 9.8621268989518285e-05, 7.9662182542961091e-05, 5.6223485444206744e-05, 0.00011875145719386637, 0.00011606272892095149, 7.9580859164707363e-05, 0.00015293592878151685, 9.107086225412786e-05, 8.9636581833474338e-05, 6.5434185671620071e-05, 9.8666256235446781e-05, 0.00010909545380854979, 8.7108906882349402e-05, 0.00025515910238027573, 9.1115311079192907e-05, 0.00014317125896923244, 0.00019229532335884869, 7.3104958573821932e-05, 0.00010951930016744882, 0.00048788194544613361, 0.00010077869956148788, 0.00051364157116040587, 9.275393676944077e-05, 0.00012832017091568559, 9.2470581876114011e-05, 3.6722292861668393e-05, 0.00011502840789034963, 7.9917888797353953e-05, 0.0001333129039267078, 0.00010102435044245794, 0.00011051896581193432, 0.00011179134889971465, 0.00010246313468087465, 8.4937120846007019e-05, 5.5673252063570544e-05, 7.826380169717595e-05, 5.7299188483739272e-05, 0.0001008515027933754, 7.245037704706192e-05, 5.8205099776387215e-05, 6.8047054810449481e-05, 0.00010777970601338893, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 0 };
const ALIGN(8) int32_t tensor_data36[48] = { 14, 16891, -1698, -7336, 9824, -3932, 3826, 17451, 14637, -431, 3259, 11056, 11092, 3188, 12940, -687, -665, 25684, 2192, 10535, -1086, -7486, 17933, 4000, -1581, 11645, 12652, 498, 8386, -6872, 1239, 7557, 16066, 6401, 929, 2584, 3020, 13009, 8600, 2895, 6288, 581, 12640, -8499, 1768, 3926, 10046, -4029, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00012352454359643161, 5.3084211685927585e-05, 0.00013807993673253804, 6.1224440287332982e-05, 9.8052310931961983e-05, 9.1414003691170365e-05, 0.00010833418491529301, 5.3193252824712545e-05, 5.9539994254009798e-05, 0.00013749957724940032, 0.00013309756468515843, 7.3433118814136833e-05, 6.5718100813683122e-05, 0.000108472173451446, 6.1145146901253611e-05, 8.1248632341157645e-05, 0.00011337640899000689, 3.7628746213158593e-05, 0.00011227447976125404, 6.79786317050457e-05, 0.00011122891010018066, 7.307686610147357e-05, 4.7924837417667732e-05, 0.00013296709221322089, 8.2644874055404216e-05, 6.7155327997170389e-05, 5.6592009059386328e-05, 0.00013530475553125143, 7.5037591159343719e-05, 3.8767917430959642e-05, 8.8869674073066562e-05, 6.3436680648010224e-05, 5.4459593229694292e-05, 7.5848955020774156e-05, 8.8753040472511202e-05, 0.00013279446284286678, 9.0292698587290943e-05, 6.1401355196721852e-05, 9.0257643023505807e-05, 0.0001046269026119262, 8.966142195276916e-05, 0.00016476921155117452, 5.6060540373437107e-05, 6.7177621531300247e-05, 1.459761642763624e-05, 0.00010034722799900919, 7.3615272413007915e-05, 8.9126304374076426e-05, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(8) int32_t tensor_data37[48] = { -1857, -1782, -2063, -427, 37568, -6149, -13889, -328, 0, 5910, 20821, -899, -659, 18895, 20767, 12592, -3246, 11644, 16516, -1995, -77, -1427, -222, -9297, 19918, -2371, 15396, 24668, 28527, -1469, -393, -2664, 25104, -24283, 13557, 18618, 15936, 20484, 19, 19475, 13938, -4762, -2928, -56, -838, 2387, -121, -44, };
const TfArray<1, int> tensor_dimension37 = { 1, { 48 } };
const TfArray<48, float> quant37_scale = { 48, { 7.7132768637966365e-05, 0.00016054420848377049, 0.00019439328752923757, 0.0004041050560772419, 7.4323084845673293e-05, 0.00017982619465328753, 6.7665489041246474e-05, 0.00027985268388874829, 0.00018652125436346978, 4.6221317461458966e-05, 4.8540776333538815e-05, 0.00018267730774823576, 0.00016686617163941264, 6.312432378763333e-05, 9.6884657978080213e-05, 7.9745572293177247e-05, 0.00016800951561890543, 0.00019959761993959546, 8.9504093921277672e-05, 0.00016630090249236673, 0.00021822257258463651, 0.00034460928873158991, 0.00028785294853150845, 9.8782649729400873e-05, 5.5088028602767736e-05, 0.00027842249255627394, 6.0856706113554537e-05, 4.6226963604567572e-05, 5.0984639528905973e-05, 0.00018020760035142303, 0.00021385899162851274, 0.00012418047117535025, 9.678186324890703e-05, 4.6469383960356936e-05, 8.5052844951860607e-05, 6.8450877733994275e-05, 8.891696052160114e-05, 7.5311749242246151e-05, 0.00017502892296761274, 5.524381049326621e-05, 7.1434842539019883e-05, 0.00014500984980259091, 0.00013197943917475641, 0.00029779574833810329, 0.00087090139277279377, 0.00013230480544734746, 0.00021381615079008043, 0.00023111056361813098, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(8) int32_t tensor_data38[48] = { 1555, -283, 930, 4592, 1588, 6287, 8688, 8847, 32155, 1674, 12679, -699, 779, 6424, 1966, 4663, -94, -42, -631, 3274, 5017, -1658, -329, 13116, 20540, 4899, -1085, -7186, 12140, 5650, 5977, 178, 3924, 16174, 6150, 1063, 10549, 3426, 6951, 17483, 4624, 1619, 4378, -294, 18008, 1552, 10857, -2669, };
const TfArray<1, int> tensor_dimension38 = { 1, { 48 } };
const TfArray<48, float> quant38_scale = { 48, { 0.00010970604489557445, 0.00015044611063785851, 0.00018348840239923447, 9.5935480203479528e-05, 0.00013254287478048354, 0.00010220288822893053, 9.4660012109670788e-05, 8.6999847553670406e-05, 2.991665132867638e-05, 0.00015862754662521183, 6.612737342948094e-05, 0.00013756859698332846, 0.00023403111845254898, 0.00010028287215391174, 0.00011706133227562532, 0.00012734568736050278, 0.0001109688455471769, 0.00016929180128499866, 0.00022354237444233149, 0.00012753576447721571, 0.00012141731713199988, 0.00016951934958342463, 0.00021410729095805436, 5.8820132835535333e-05, 4.592329787556082e-05, 0.00013999770453665406, 0.00021569510863628238, 7.7300064731389284e-05, 7.3797462391667068e-05, 0.00012152612907811999, 9.1561101726256311e-05, 0.00012653644080273807, 0.00011364493548171595, 5.5687865824438632e-05, 0.00012140233593527228, 0.00014999858103692532, 7.2844341048039496e-05, 0.00017682429461274296, 0.00010702280269470066, 5.2337243687361479e-05, 0.00011610084766289219, 0.00014182415907271206, 0.000121825207315851, 0.00017752317944541574, 5.1745257223956287e-05, 0.00021073257084935904, 8.3975050074514002e-05, 9.5219918875955045e-05, } };
const TfArray<48, int> quant38_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(8) int32_t tensor_data39[48] = { -7169, -64, -5490, 776, -3895, 25897, 9836, -5296, -5625, -3319, 23112, 11358, -10751, -3305, -3761, -7857, 13818, -22896, -6459, -9462, 24880, -3474, -2621, -1346, 553, 4190, 25993, -634, 1256, 1261, -264, -11691, -8769, -719, -5410, -8377, 10947, 20536, 46, 3327, 21558, -5572, 415, -5857, 13098, 26916, 1253, -1719, };
const TfArray<1, int> tensor_dimension39 = { 1, { 48 } };
const TfArray<48, float> quant39_scale = { 48, { 0.00012189599510747939, 0.00010915355960605666, 6.061641761334613e-05, 0.00010871597623918205, 0.00013005897926632315, 5.8698937209555879e-05, 0.00015261794032994658, 0.00019146827980875969, 0.00026045014965347946, 0.00012312147009652108, 0.00010515374015085399, 7.2498820372857153e-05, 0.00015489755605813116, 0.00017726709484122694, 0.00012912038073409349, 4.6127515815896913e-05, 7.7409313234966248e-05, 5.9118527133250609e-05, 0.00015384501602966338, 0.00011642046592896804, 6.5952583099715412e-05, 0.00017012050375342369, 0.00010353081597713754, 0.00017728364036884159, 0.00045279870391823351, 0.0001496950862929225, 4.7213343350449577e-05, 0.00024356463109143078, 0.00023954109929036349, 8.2005513831973076e-05, 0.00014627176278736442, 9.6388677775394171e-05, 9.0565714344847947e-05, 0.00023904500994831324, 0.00014492747141048312, 8.290849655168131e-05, 0.00016319850692525506, 6.0892161855008453e-05, 0.00019167750724591315, 0.00018122112669516355, 7.9736455518286675e-05, 0.00013861720799468458, 9.1575617261696607e-05, 9.4912975328043103e-05, 0.00014528020983561873, 4.9537124141352251e-05, 0.00021921251027379185, 0.00028087329701520503, } };
const TfArray<48, int> quant39_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(8) int32_t tensor_data40[48] = { 2167, 783, 6773, 4831, 11058, 481, 2983, 1218, -2916, -2846, 1885, 11905, 4846, -7271, 832, 8420, 8511, -5592, -360, 5573, 9719, 969, -80, 1440, 902, -5580, 1133, 74, 3180, 8329, 12206, 75, 5627, 3565, -3417, 3966, -1682, 4116, 10079, -3563, 1981, 354, -2258, 3650, -3169, 4358, 709, 2456, };
const TfArray<1, int> tensor_dimension40 = { 1, { 48 } };
const TfArray<48, float> quant40_scale = { 48, { 0.00013171053433325142, 0.00015619043551851064, 9.8834039818029851e-05, 0.00013502698857337236, 7.8855067840777338e-05, 0.00012988389062229544, 0.00012413483636919409, 0.00015393127978313714, 0.00012508958752732724, 0.00017055573698598891, 0.00014561106218025088, 7.7687109296675771e-05, 0.00014017554349265993, 9.8601536592468619e-05, 0.00013672441127710044, 8.6187414126470685e-05, 8.9155189925804734e-05, 0.00010454707080498338, 0.00013910362031310797, 0.00011167627963004634, 8.7037464254535735e-05, 0.00012642572983168066, 0.00013658675015904009, 0.00013668682368006557, 0.00015922817692626268, 0.00011359977361280471, 0.00011427358549553901, 0.00014088908210396767, 0.00013380969176068902, 9.4843839178793132e-05, 7.1053553256206214e-05, 0.00019840629829559475, 0.00012603530194610357, 0.00014221129822544754, 0.00014020442904438823, 0.000135853435494937, 0.00017806379764806479, 0.00011024338164133951, 8.0425139458384365e-05, 0.00013363233301788568, 0.00013562654203269631, 0.00015903927851468325, 0.00015320471720770001, 0.0001653793005971238, 0.00016156730998773128, 0.00012385318404994905, 0.00017171079525724053, 0.00016600440721958876, } };
const TfArray<48, int> quant40_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(8) int32_t tensor_data41[48] = { 50267, -13249, 59984, 33894, 32510, -12206, -21304, 1919, -1637, -11, -32047, 35961, 35679, -1536, 35515, -17186, 29291, -7498, 40447, 28098, 36850, 56579, 19137, 32864, 1737, -2294, -9628, 53, 554, 35107, 34770, 25093, 40071, 1488, -249, 11133, 29, 37180, -598, -3531, 28079, 1721, -7432, 41872, -92, 28035, -8672, -3374, };
const TfArray<1, int> tensor_dimension41 = { 1, { 48 } };
const TfArray<48, float> quant41_scale = { 48, { 3.8155954825924709e-05, 6.2415463617071509e-05, 3.2402775104856119e-05, 5.0544502300908789e-05, 9.3433729489333928e-05, 6.6573025833349675e-05, 5.2575254812836647e-05, 4.7687797632534057e-05, 9.1705442173406482e-05, 9.5972565759439021e-05, 5.7342200307175517e-05, 9.5433133537881076e-05, 6.1387705500237644e-05, 0.00016499588673468679, 4.7998670197557658e-05, 8.3340113633312285e-05, 7.6186137448530644e-05, 0.00010544509859755635, 3.6444434954319149e-05, 5.6664848671061918e-05, 7.4830881203524768e-05, 3.3482236176496372e-05, 6.4935280533973128e-05, 5.5181488278321922e-05, 4.9510977987665683e-05, 0.00015685173275414854, 6.3415413023903966e-05, 5.668657468049787e-05, 5.46592018508818e-05, 5.8109668316319585e-05, 7.3099465225823224e-05, 5.3766754717798904e-05, 5.251756010693498e-05, 0.00010215882502961904, 9.7834643383976072e-05, 5.7837918575387448e-05, 8.1336642324458808e-05, 4.7830199036980048e-05, 0.00010047810064861551, 0.0001231584174092859, 5.4737967730034143e-05, 5.465443609864451e-05, 9.6084528195206076e-05, 4.8087189497891814e-05, 9.6661795396357775e-05, 5.5888198403408751e-05, 6.838022090960294e-05, 5.3857122111367062e-05, } };
const TfArray<48, int> quant41_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 0 };
const ALIGN(8) int8_t tensor_data42[8*3*3*1] = {
  /* [0][0][][] */ 97, -118, 10,
  /* [0][1][][] */ -113, 127, -4,
  /* [0][2][][] */ 14, -15, 0,
  /* [1][0][][] */ 20, 27, 54,
  /* [1][1][][] */ -25, -127, 32,
  /* [1][2][][] */ 3, 6, 20,
  /* [2][0][][] */ -127, 102, 18,
  /* [2][1][][] */ -31, -20, 61,
  /* [2][2][][] */ -3, -4, 5,
  /* [3][0][][] */ 54, 51, 9,
  /* [3][1][][] */ 47, 66, 9,
  /* [3][2][][] */ -85, -127, -19,
  /* [4][0][][] */ -38, 60, -18,
  /* [4][1][][] */ -82, 127, -45,
  /* [4][2][][] */ -13, 17, -4,
  /* [5][0][][] */ -77, -66, -4,
  /* [5][1][][] */ 127, 105, 7,
  /* [5][2][][] */ -47, -43, -3,
  /* [6][0][][] */ 57, 119, -71,
  /* [6][1][][] */ 48, -44, -127,
  /* [6][2][][] */ 27, 27, -22,
  /* [7][0][][] */ -45, -127, 36,
  /* [7][1][][] */ 93, 61, 11,
  /* [7][2][][] */ 14, -11, 3,
};
const TfArray<4, int> tensor_dimension42 = { 4, { 8,3,3,1 } };
const TfArray<8, float> quant42_scale = { 8, { 0.018473751842975616, 0.020399753004312515, 0.020062800496816635, 0.015465610660612583, 0.018865054473280907, 0.019704878330230713, 0.012503535486757755, 0.0092278299853205681, } };
const TfArray<8, int> quant42_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(8) int8_t tensor_data43[8*1*1*8] = {
  /* [0][0][][] */ -61,110,5,-3,7,7,-127,-4,
  /* [1][0][][] */ 91,-18,23,46,13,127,-2,-14,
  /* [2][0][][] */ 127,-58,52,18,104,-56,75,3,
  /* [3][0][][] */ -14,38,1,-22,-1,-83,-50,127,
  /* [4][0][][] */ -127,-98,-107,-56,-35,49,111,9,
  /* [5][0][][] */ 57,4,-2,-127,-9,64,-4,-15,
  /* [6][0][][] */ 102,57,127,71,109,28,-77,2,
  /* [7][0][][] */ -43,-58,24,-127,35,-125,53,34,
};
const TfArray<4, int> tensor_dimension43 = { 4, { 8,1,1,8 } };
const TfArray<8, float> quant43_scale = { 8, { 0.013249308802187443, 0.0038006382528692484, 0.0071859173476696014, 0.0053968396969139576, 0.0025548273697495461, 0.0066342405043542385, 0.0028770735953003168, 0.0040036365389823914, } };
const TfArray<8, int> quant43_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const ALIGN(8) int8_t tensor_data44[48*1*1*8] = {
  /* [0][0][][] */ -43,-22,-47,13,-127,-6,9,31,
  /* [1][0][][] */ -52,19,26,-74,127,3,-62,28,
  /* [2][0][][] */ -7,-127,26,-59,-67,9,-33,-42,
  /* [3][0][][] */ 40,127,-10,119,43,-27,54,-34,
  /* [4][0][][] */ 5,-3,-36,-127,-5,-118,-9,-15,
  /* [5][0][][] */ -23,104,-13,-20,10,127,53,-109,
  /* [6][0][][] */ 27,-8,-12,-91,32,17,-127,74,
  /* [7][0][][] */ -10,127,36,-26,90,71,118,18,
  /* [8][0][][] */ -4,-127,16,-48,-72,16,-33,-21,
  /* [9][0][][] */ -33,80,3,71,15,-95,41,-127,
  /* [10][0][][] */ 39,-78,15,-95,-1,11,-32,127,
  /* [11][0][][] */ -127,4,-4,-11,57,-48,-43,3,
  /* [12][0][][] */ -6,-22,23,-46,-46,12,-10,-127,
  /* [13][0][][] */ -50,120,111,61,-46,127,29,-16,
  /* [14][0][][] */ -126,-77,-28,-6,27,14,127,1,
  /* [15][0][][] */ 127,-24,-44,5,-74,1,13,-15,
  /* [16][0][][] */ -76,-77,-127,31,-19,-8,-36,30,
  /* [17][0][][] */ -45,-23,-107,7,-127,5,57,20,
  /* [18][0][][] */ -6,-62,127,7,41,29,106,-38,
  /* [19][0][][] */ 54,-77,4,-68,-9,-35,-56,127,
  /* [20][0][][] */ -77,71,45,-3,116,-17,-127,-15,
  /* [21][0][][] */ -22,-127,9,8,-61,-71,-37,-46,
  /* [22][0][][] */ -36,-77,-20,5,-127,15,78,0,
  /* [23][0][][] */ 127,-37,-21,7,-75,-14,3,-19,
  /* [24][0][][] */ -18,-127,18,5,-14,27,-78,-34,
  /* [25][0][][] */ -47,107,-106,-59,5,29,32,-127,
  /* [26][0][][] */ 68,-34,-49,16,-127,11,31,-8,
  /* [27][0][][] */ 40,-20,1,-127,18,0,-24,55,
  /* [28][0][][] */ -105,44,-6,2,127,-28,-69,4,
  /* [29][0][][] */ 35,-100,-48,83,-70,27,-100,127,
  /* [30][0][][] */ 18,-127,3,-30,-97,51,-76,-18,
  /* [31][0][][] */ -30,-61,-127,23,-61,-85,-82,40,
  /* [32][0][][] */ 34,-33,-78,2,-127,-1,27,13,
  /* [33][0][][] */ -17,-13,-7,30,-24,-127,-9,-58,
  /* [34][0][][] */ 36,-3,127,10,20,9,-9,20,
  /* [35][0][][] */ 37,-127,-9,-67,-89,4,44,108,
  /* [36][0][][] */ 21,-5,-4,-127,8,1,3,31,
  /* [37][0][][] */ 9,-127,4,8,-102,23,98,-2,
  /* [38][0][][] */ -97,30,10,-22,127,-44,-56,1,
  /* [39][0][][] */ -36,24,-35,3,-127,0,-39,19,
  /* [40][0][][] */ -22,-56,-6,26,-127,14,70,6,
  /* [41][0][][] */ 27,-74,-17,-109,-14,73,-36,127,
  /* [42][0][][] */ 47,-42,62,-14,127,-18,7,-12,
  /* [43][0][][] */ 127,-22,18,3,126,-30,-55,-22,
  /* [44][0][][] */ -93,42,41,-22,92,-29,-127,-56,
  /* [45][0][][] */ -20,-1,-30,96,23,-25,8,127,
  /* [46][0][][] */ -3,29,-27,37,3,-127,-12,-73,
  /* [47][0][][] */ 37,127,109,-35,56,90,71,-36,
};
const TfArray<4, int> tensor_dimension44 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant44_scale = { 48, { 0.0087279202416539192, 0.0060267974622547626, 0.0052753970958292484, 0.0022775873076170683, 0.010649227537214756, 0.011772763915359974, 0.0087567325681447983, 0.0077295703813433647, 0.006117724347859621, 0.011880208738148212, 0.0088518159464001656, 0.006810399703681469, 0.022011538967490196, 0.0028363761957734823, 0.010187190026044846, 0.0069075040519237518, 0.0076169976964592934, 0.0096847033128142357, 0.0097068678587675095, 0.010592611506581306, 0.0051663578487932682, 0.0057390215806663036, 0.002074450021609664, 0.0064075230620801449, 0.0037294900976121426, 0.013057484291493893, 0.0076279947534203529, 0.0031685794238001108, 0.0080545553937554359, 0.0027380988467484713, 0.005321490578353405, 0.0091237183660268784, 0.010431429371237755, 0.0028746956959366798, 0.010077964514493942, 0.009003104642033577, 0.010372706688940525, 0.0062954393215477467, 0.0059377965517342091, 0.025137970224022865, 0.0019473471911624074, 0.0095100011676549911, 0.0061209346167743206, 0.0085374815389513969, 0.0056208330206573009, 0.010272287763655186, 0.010278577916324139, 0.016511589288711548, } };
const TfArray<48, int> quant44_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const ALIGN(8) int8_t tensor_data45[8*1*1*48] = {
  /* [0][0][][] */ 36,69,35,-33,18,6,-40,5,-18,53,-74,31,-6,38,9,31,33,89,3,20,-127,48,-32,-46,-26,71,32,-35,103,39,43,-19,-3,-31,31,34,19,25,19,41,-30,100,44,56,43,-11,79,-32,
  /* [1][0][][] */ -60,-18,-45,-32,36,-70,60,53,-31,14,68,-77,21,9,122,-57,18,77,27,70,52,-16,-23,15,-23,39,-38,-26,60,-68,-49,-88,63,25,40,-47,-7,42,-105,-22,-38,57,-32,-80,18,-40,127,-99,
  /* [2][0][][] */ 34,87,-29,-41,127,87,-17,-49,-57,-2,-10,39,-57,34,-12,23,10,16,-2,9,30,-31,-47,12,-47,-43,56,-50,-8,-17,-18,-23,-15,58,14,40,-19,65,60,17,-24,36,25,33,68,-31,18,-28,
  /* [3][0][][] */ 14,-10,-44,-24,6,-13,21,16,-45,-82,23,23,-16,30,-53,2,-43,27,-48,-45,-44,-5,-25,-9,-27,9,-12,-26,39,-65,-58,68,32,-29,-27,1,-63,-74,-8,124,-15,3,3,127,-62,107,-13,68,
  /* [4][0][][] */ -41,-67,-24,-16,-38,-12,-11,-42,-16,-38,72,-57,-34,-7,74,-58,-31,-45,73,10,24,-17,-14,88,-16,15,-49,-16,45,-22,-28,69,-51,28,2,-20,-14,-21,-71,-92,-27,-31,-1,-127,-21,29,-14,66,
  /* [5][0][][] */ -38,-24,-49,67,20,-36,73,23,41,-29,-14,-42,29,-83,-111,-70,26,-12,-34,5,2,-67,70,79,52,-127,-34,66,-48,-64,-61,-44,-75,-3,-64,-65,-27,44,-59,59,63,-39,-107,3,69,-38,2,-46,
  /* [6][0][][] */ 21,60,13,-12,6,-20,-52,-27,-18,36,-49,17,-6,-4,-69,10,-26,26,52,108,-61,-3,-13,11,-11,-43,46,-13,-14,31,25,127,74,12,-72,51,18,-90,27,31,-16,39,8,48,60,-17,75,121,
  /* [7][0][][] */ -6,-18,-2,32,51,93,53,-95,26,-16,-83,-5,-127,-11,-29,16,101,10,-8,-56,-67,-9,33,-118,27,-4,-45,26,-28,5,0,-23,42,-47,36,-56,-17,25,-19,20,35,42,-5,16,-23,-65,15,-28,
};
const TfArray<4, int> tensor_dimension45 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant45_scale = { 8, { 0.0070832832716405392, 0.0047227968461811543, 0.0069609633646905422, 0.0065438835881650448, 0.006282399408519268, 0.0065269949845969677, 0.0078062508255243301, 0.0048903441056609154, } };
const TfArray<8, int> quant45_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const ALIGN(8) int8_t tensor_data46[48*1*1*8] = {
  /* [0][0][][] */ 25,91,-127,-94,50,-23,3,-12,
  /* [1][0][][] */ 16,49,-106,28,-127,37,-58,-85,
  /* [2][0][][] */ -95,78,127,-40,-127,85,-30,-85,
  /* [3][0][][] */ 73,-45,-36,14,82,52,-66,-127,
  /* [4][0][][] */ 91,0,-7,-61,-75,-27,-34,127,
  /* [5][0][][] */ -17,7,-102,-127,61,-63,7,-7,
  /* [6][0][][] */ 127,13,2,49,110,51,-15,12,
  /* [7][0][][] */ -9,82,-127,-100,82,-62,-37,79,
  /* [8][0][][] */ -109,-123,108,127,25,17,-109,-100,
  /* [9][0][][] */ 55,27,-7,-36,-37,36,45,127,
  /* [10][0][][] */ 47,12,123,53,-39,-14,-127,122,
  /* [11][0][][] */ -54,43,31,69,102,92,6,127,
  /* [12][0][][] */ -38,73,127,-90,124,-86,-96,32,
  /* [13][0][][] */ -34,-97,127,-15,-61,-11,-38,-8,
  /* [14][0][][] */ -20,98,-65,-49,127,-21,-1,41,
  /* [15][0][][] */ -127,68,-31,12,-110,-83,43,62,
  /* [16][0][][] */ -51,-36,-19,-26,27,33,127,-64,
  /* [17][0][][] */ -10,-18,43,29,127,-41,48,100,
  /* [18][0][][] */ 5,22,-51,-6,-126,39,-9,-127,
  /* [19][0][][] */ 44,25,-41,12,-127,43,-5,-92,
  /* [20][0][][] */ 126,-47,58,-59,127,122,54,-34,
  /* [21][0][][] */ -92,90,87,-19,127,6,66,-50,
  /* [22][0][][] */ -45,-127,-51,-57,33,20,5,25,
  /* [23][0][][] */ -21,-1,127,-101,-19,13,99,48,
  /* [24][0][][] */ 39,19,-127,-12,-39,-35,25,-101,
  /* [25][0][][] */ -21,-127,7,51,81,18,-109,-70,
  /* [26][0][][] */ 20,-58,127,14,-63,-9,-18,-21,
  /* [27][0][][] */ -62,-25,127,54,40,40,25,74,
  /* [28][0][][] */ -127,57,-69,20,-10,-108,51,99,
  /* [29][0][][] */ 9,40,127,76,94,-67,-7,93,
  /* [30][0][][] */ -82,-58,37,-127,119,-31,24,-48,
  /* [31][0][][] */ 72,81,88,51,-67,-127,-19,41,
  /* [32][0][][] */ -127,40,1,-10,-94,-74,35,38,
  /* [33][0][][] */ -37,-69,-25,127,66,-42,-104,11,
  /* [34][0][][] */ 18,-3,-127,65,-58,67,29,-84,
  /* [35][0][][] */ -95,6,127,29,-22,86,8,-46,
  /* [36][0][][] */ -127,82,-15,-36,-84,-86,18,1,
  /* [37][0][][] */ 88,-62,-8,-16,127,53,-51,-64,
  /* [38][0][][] */ 18,-26,-10,89,-127,61,39,-92,
  /* [39][0][][] */ -46,-20,127,-9,-2,44,53,30,
  /* [40][0][][] */ -35,-127,74,113,-67,47,-91,2,
  /* [41][0][][] */ 42,25,53,-23,39,-46,-97,127,
  /* [42][0][][] */ 127,-115,34,-29,115,91,-25,-66,
  /* [43][0][][] */ 127,-82,-21,3,108,64,-44,4,
  /* [44][0][][] */ 58,127,-95,-63,74,-70,-25,88,
  /* [45][0][][] */ 19,-24,-53,-127,45,-121,17,-77,
  /* [46][0][][] */ 127,-83,13,-12,89,74,-24,-43,
  /* [47][0][][] */ -123,-27,-127,51,-79,-107,-104,-62,
};
const TfArray<4, int> tensor_dimension46 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant46_scale = { 48, { 0.0024387016892433167, 0.0020371873397380114, 0.0031083559151738882, 0.0046515604481101036, 0.00059507309924811125, 0.0035347952507436275, 0.0038773701526224613, 0.0015284925466403365, 0.002426978200674057, 0.0048754476010799408, 0.0017979990225285292, 0.0030840141698718071, 0.002401828533038497, 0.0049983002245426178, 0.0034910570830106735, 0.0048339385539293289, 0.0050121266394853592, 0.0025473230052739382, 0.0020781280472874641, 0.00092633086023852229, 0.0025694617070257664, 0.0043067382648587227, 0.0066169365309178829, 0.0018645517993718386, 0.0022580386139452457, 0.0034720427356660366, 0.0049809198826551437, 0.0026040077209472656, 0.0041039222851395607, 0.0024228822439908981, 0.0020784805528819561, 0.0033656882587820292, 0.005173529963940382, 0.0033394277561455965, 0.0020869807340204716, 0.0030672873836010695, 0.0053487890399992466, 0.0053774472326040268, 0.0016867293743416667, 0.001968911150470376, 0.0031803539022803307, 0.001356910914182663, 0.0033011827617883682, 0.0046773883514106274, 0.002728333231061697, 0.003829222870990634, 0.0028735012747347355, 0.0028138288762420416, } };
const TfArray<48, int> quant46_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const ALIGN(8) int8_t tensor_data47[8*1*1*48] = {
  /* [0][0][][] */ -91,25,23,3,24,-51,-15,73,-15,21,81,56,32,-26,49,68,-9,10,127,-29,-67,43,-79,-33,55,-73,1,83,-19,0,-49,48,-68,-8,-6,18,-30,13,50,20,43,-23,-93,16,46,-3,0,-29,
  /* [1][0][][] */ -49,31,-33,89,51,0,2,28,-26,41,79,-54,-39,96,-68,22,-4,-18,-13,-28,-31,-46,47,-37,-127,43,-73,-51,-13,-27,-5,-30,25,-28,-44,13,-69,-54,-109,71,19,18,34,-25,-12,-38,50,24,
  /* [2][0][][] */ 33,-31,40,35,29,27,56,-88,-2,-11,-22,25,-51,-65,-13,43,27,-38,27,-12,56,-109,59,23,-21,21,13,127,54,-69,9,16,-4,-98,48,-62,31,55,-76,-9,34,-11,9,42,65,18,-9,32,
  /* [3][0][][] */ -43,21,-13,-111,64,-36,10,-26,-56,-37,36,-57,17,-5,-40,-17,13,-13,-59,-18,-18,28,26,-24,-28,-10,-18,33,11,-29,-6,10,-14,127,44,-52,50,12,-15,40,21,-29,-16,-18,50,-7,26,-45,
  /* [4][0][][] */ -23,3,52,-37,22,24,-5,10,-12,-48,-12,14,9,31,5,72,24,13,127,53,-9,-62,-51,19,30,-24,-4,7,23,-16,29,-12,-1,9,23,-2,15,-3,32,8,26,-25,-21,1,-8,-8,74,8,
  /* [5][0][][] */ 73,-48,46,25,28,2,7,-21,-56,18,6,-59,52,-3,-53,96,18,39,31,35,34,-4,-101,-82,35,45,-69,56,-11,24,-64,-63,15,-47,17,-127,-25,-3,5,21,22,51,22,-13,-10,-56,27,24,
  /* [6][0][][] */ 71,-65,-21,127,6,-47,-16,25,40,48,-79,-60,6,24,-109,2,104,-52,2,-76,-31,-18,-50,-20,-6,-26,-34,-97,-29,-49,-88,-7,-60,-75,-76,18,-40,-25,21,-75,-65,-105,-52,81,-50,-32,0,-6,
  /* [7][0][][] */ -10,-4,-19,56,48,-45,-26,35,-22,3,-16,-43,-1,-36,56,-63,-26,-29,127,13,-3,35,23,-15,-8,-7,15,31,-48,-11,-30,-71,-14,-119,-24,9,-21,-33,-15,-27,-12,16,-1,-24,-28,14,-46,15,
};
const TfArray<4, int> tensor_dimension47 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant47_scale = { 8, { 0.0077351555228233337, 0.0069292238913476467, 0.0049433819949626923, 0.0073372721672058105, 0.012884062714874744, 0.0065884613431990147, 0.0050323354080319405, 0.007651893887668848, } };
const TfArray<8, int> quant47_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const ALIGN(8) int8_t tensor_data48[48*1*1*8] = {
  /* [0][0][][] */ -89,-6,0,-9,127,-15,88,67,
  /* [1][0][][] */ -93,59,-127,-41,38,-29,12,0,
  /* [2][0][][] */ -24,-23,-105,0,-17,127,-45,-49,
  /* [3][0][][] */ 51,33,-6,-100,74,81,-93,-127,
  /* [4][0][][] */ 25,-88,-120,-127,55,-103,51,-25,
  /* [5][0][][] */ 33,12,-113,127,-47,-22,-66,-107,
  /* [6][0][][] */ -30,-81,-62,127,-110,21,-5,-26,
  /* [7][0][][] */ -35,-28,-110,-127,-7,-83,-38,-55,
  /* [8][0][][] */ 127,-39,-89,-102,50,44,-78,-77,
  /* [9][0][][] */ 11,127,-51,19,41,20,30,-38,
  /* [10][0][][] */ -25,-46,69,-65,6,34,47,127,
  /* [11][0][][] */ 51,-77,-27,65,-46,96,127,83,
  /* [12][0][][] */ -33,-12,-127,-22,68,54,78,0,
  /* [13][0][][] */ -3,97,-34,-127,88,-97,-124,1,
  /* [14][0][][] */ 49,23,-32,-55,-13,15,-127,-85,
  /* [15][0][][] */ 1,127,57,-23,-13,-18,-32,-111,
  /* [16][0][][] */ 6,6,12,-28,-27,-16,-11,-127,
  /* [17][0][][] */ -36,38,-1,96,2,-57,22,-127,
  /* [18][0][][] */ -4,-127,-60,-5,77,3,94,82,
  /* [19][0][][] */ 0,13,-71,77,23,-54,109,127,
  /* [20][0][][] */ -127,10,7,-80,21,-84,-6,-18,
  /* [21][0][][] */ -26,59,127,9,22,-97,-46,33,
  /* [22][0][][] */ 34,39,127,112,86,41,121,30,
  /* [23][0][][] */ 71,-127,66,-44,-62,-39,-62,-2,
  /* [24][0][][] */ -93,-49,73,94,116,127,62,82,
  /* [25][0][][] */ -26,53,107,-46,45,-55,10,127,
  /* [26][0][][] */ -22,-42,70,127,36,90,-98,97,
  /* [27][0][][] */ -6,101,127,96,34,-38,50,78,
  /* [28][0][][] */ -32,21,84,41,11,-89,28,127,
  /* [29][0][][] */ 59,62,68,-127,35,16,-2,95,
  /* [30][0][][] */ -44,7,52,-32,-127,-12,112,-111,
  /* [31][0][][] */ 121,-13,127,103,-73,-52,-35,2,
  /* [32][0][][] */ 127,0,-5,58,-16,-115,56,-13,
  /* [33][0][][] */ 36,-28,49,5,-77,127,-82,-91,
  /* [34][0][][] */ -18,5,127,-42,-89,-10,124,-82,
  /* [35][0][][] */ -9,-75,42,64,-127,41,-30,-18,
  /* [36][0][][] */ -16,24,127,-74,34,-7,14,-112,
  /* [37][0][][] */ -70,-11,78,126,-98,127,81,-17,
  /* [38][0][][] */ 13,-54,-15,46,103,-35,-48,127,
  /* [39][0][][] */ 127,100,-81,-49,29,-115,-126,107,
  /* [40][0][][] */ -104,-111,-24,127,17,-44,-104,-46,
  /* [41][0][][] */ 13,60,-96,-88,-119,127,-34,-65,
  /* [42][0][][] */ 65,32,-105,127,-94,107,-51,-63,
  /* [43][0][][] */ 46,-8,65,37,101,-119,127,-5,
  /* [44][0][][] */ -127,50,33,-22,-30,96,-105,-9,
  /* [45][0][][] */ -83,127,-2,25,-27,106,-94,-17,
  /* [46][0][][] */ -32,-127,-125,103,-15,-24,53,-71,
  /* [47][0][][] */ 0,36,-85,-62,-100,-126,-13,-127,
};
const TfArray<4, int> tensor_dimension48 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant48_scale = { 48, { 0.003355975728482008, 0.0029294886626303196, 0.0031333935912698507, 0.0022587396670132875, 0.0015513483667746186, 0.0028780628927052021, 0.0020102809648960829, 0.0018293482717126608, 0.0019205110147595406, 0.0042549972422420979, 0.0041722711175680161, 0.0023606703616678715, 0.0024888364132493734, 0.0024572080001235008, 0.0031304997391998768, 0.0038566500879824162, 0.0041114022023975849, 0.0029189188499003649, 0.0022054065484553576, 0.0022473817225545645, 0.0020011616870760918, 0.0028726730961352587, 0.0018060610163956881, 0.0028015370480716228, 0.0014890347374603152, 0.0016622412949800491, 0.0023287625517696142, 0.0016348152421414852, 0.0028467965312302113, 0.0027100676670670509, 0.0027272733859717846, 0.0063333888538181782, 0.0031092443969100714, 0.0025147991254925728, 0.0016913849394768476, 0.0028701550327241421, 0.0019680357072502375, 0.0022395991254597902, 0.0031304026488214731, 0.0021413981448858976, 0.0019387236097827554, 0.0024092379026114941, 0.0023130779154598713, 0.0019312113290652633, 0.0029290192760527134, 0.0053965491242706776, 0.0023115384392440319, 0.0022077797912061214, } };
const TfArray<48, int> quant48_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const ALIGN(8) int8_t tensor_data49[8*1*1*48] = {
  /* [0][0][][] */ -17,-42,127,7,-19,25,2,29,48,-6,-34,17,-30,13,60,66,40,-40,13,-71,-11,32,8,-39,-25,-46,18,-11,-90,55,-49,49,25,14,-2,40,17,-43,1,-35,-95,-56,48,-67,68,-31,-83,38,
  /* [1][0][][] */ -16,32,17,36,-58,-24,73,78,26,-74,22,39,1,-127,27,75,103,-25,45,46,46,-47,-77,-45,32,-9,-33,-44,-26,52,-88,102,-13,41,-22,52,63,123,58,41,-25,84,76,-9,-42,43,35,91,
  /* [2][0][][] */ 29,-8,-1,-31,22,24,-28,36,119,-11,47,-5,-12,71,52,-22,-97,110,97,47,4,73,17,127,14,87,15,21,0,-101,28,28,-21,-16,-28,-86,-25,17,2,-23,106,16,-30,25,-45,21,-72,-68,
  /* [3][0][][] */ -49,47,77,15,1,35,7,71,-63,47,-1,32,-2,-11,-89,-14,17,-18,37,45,10,9,-24,-127,-18,2,23,18,-44,-20,-24,-17,2,-8,4,74,-61,-16,-28,76,26,-2,-21,29,-21,52,-48,65,
  /* [4][0][][] */ -43,50,-24,-19,-15,-51,16,-74,50,-14,-26,87,16,67,-27,27,3,17,33,-12,-97,49,-34,86,62,-9,13,0,13,9,-44,-79,-43,53,86,9,60,35,8,23,-127,-37,13,32,-37,35,21,-68,
  /* [5][0][][] */ 30,35,35,-42,34,-29,-26,46,81,72,-4,-81,26,16,115,-16,-61,-4,7,-11,-4,13,24,-6,-28,-37,66,-35,-16,44,2,-127,-41,72,31,-69,95,26,50,-75,-88,-28,62,41,-50,14,50,14,
  /* [6][0][][] */ 41,-11,22,7,29,52,24,48,-20,-4,-84,-10,-18,24,-28,3,-21,-63,3,26,18,42,5,39,-46,-40,127,14,26,8,-32,53,4,-54,81,-16,33,3,-65,15,-34,8,-37,51,-19,23,16,-1,
  /* [7][0][][] */ -43,-9,-86,0,51,-75,-17,30,-7,0,43,46,22,-2,-51,14,29,12,37,-80,-51,-61,11,10,-63,37,-20,-34,21,-27,10,-10,-127,-47,-6,-4,-67,18,7,-76,-93,-68,-28,-28,-104,59,-26,29,
};
const TfArray<4, int> tensor_dimension49 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant49_scale = { 8, { 0.0063601736910641193, 0.0044879843480885029, 0.0043336953967809677, 0.006300952285528183, 0.0053807245567440987, 0.0052278847433626652, 0.0055707897990942001, 0.0046247825957834721, } };
const TfArray<8, int> quant49_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const ALIGN(8) int8_t tensor_data50[48*1*1*8] = {
  /* [0][0][][] */ -23,22,27,61,44,-127,55,-27,
  /* [1][0][][] */ -1,82,127,75,14,34,76,-112,
  /* [2][0][][] */ 47,24,39,31,127,77,-37,-9,
  /* [3][0][][] */ -71,-123,-83,127,69,118,-115,-108,
  /* [4][0][][] */ 9,-127,45,-40,24,82,37,-38,
  /* [5][0][][] */ -9,51,-31,83,-111,64,127,81,
  /* [6][0][][] */ -93,4,-127,89,0,58,7,-59,
  /* [7][0][][] */ 49,6,127,41,31,-38,3,9,
  /* [8][0][][] */ 66,19,19,-65,-31,127,-67,10,
  /* [9][0][][] */ 127,-25,-12,-91,83,56,-15,-7,
  /* [10][0][][] */ -53,-127,-89,67,-106,42,2,31,
  /* [11][0][][] */ -119,-2,-127,36,-56,-62,72,66,
  /* [12][0][][] */ -80,-2,-127,-96,-45,71,-25,-13,
  /* [13][0][][] */ -119,-127,76,59,-97,28,-13,45,
  /* [14][0][][] */ -93,108,12,127,24,118,12,99,
  /* [15][0][][] */ -15,-90,-109,-37,103,-49,-127,-104,
  /* [16][0][][] */ -53,-127,-22,81,68,45,-46,-23,
  /* [17][0][][] */ 107,23,65,24,-8,95,-127,-101,
  /* [18][0][][] */ -23,115,66,9,35,-2,-97,127,
  /* [19][0][][] */ 14,29,-26,-82,127,-102,-23,47,
  /* [20][0][][] */ -72,-33,-127,-25,25,35,-54,-27,
  /* [21][0][][] */ -29,109,38,127,-68,50,64,24,
  /* [22][0][][] */ 101,-43,50,37,122,2,-100,-127,
  /* [23][0][][] */ -127,59,55,46,-32,42,31,-25,
  /* [24][0][][] */ -125,-9,-9,125,89,127,-51,-35,
  /* [25][0][][] */ 23,-54,-22,42,72,26,-89,-127,
  /* [26][0][][] */ -127,24,-126,-105,-105,84,-15,-18,
  /* [27][0][][] */ 72,-127,13,-82,-4,-64,-34,-38,
  /* [28][0][][] */ -96,10,-127,92,-98,72,-119,21,
  /* [29][0][][] */ 90,29,-127,11,-97,-19,-64,-82,
  /* [30][0][][] */ -8,28,103,23,-127,88,101,-25,
  /* [31][0][][] */ -88,105,-93,-127,-19,-27,28,106,
  /* [32][0][][] */ -63,-25,127,-122,100,120,63,-123,
  /* [33][0][][] */ -100,79,-4,115,127,-24,37,35,
  /* [34][0][][] */ 5,113,127,89,101,-45,-89,-77,
  /* [35][0][][] */ 33,-15,-127,-38,-24,-32,-48,110,
  /* [36][0][][] */ 51,81,22,-41,-89,-17,91,127,
  /* [37][0][][] */ 17,-127,98,-109,120,16,-25,87,
  /* [38][0][][] */ -47,-65,-40,6,-52,-66,127,23,
  /* [39][0][][] */ -105,-106,52,-46,-83,-22,-127,24,
  /* [40][0][][] */ 103,-42,33,10,2,-127,61,27,
  /* [41][0][][] */ -1,15,-33,49,-19,-127,-17,104,
  /* [42][0][][] */ 10,54,-110,-127,-63,23,85,76,
  /* [43][0][][] */ -51,-57,-62,-59,91,-15,-59,127,
  /* [44][0][][] */ -81,6,38,127,27,121,-5,19,
  /* [45][0][][] */ -8,-127,23,-37,-111,27,90,81,
  /* [46][0][][] */ -117,32,-127,-39,-93,31,15,-26,
  /* [47][0][][] */ 18,22,57,-127,-78,-42,55,8,
};
const TfArray<4, int> tensor_dimension50 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant50_scale = { 48, { 0.0041092578321695328, 0.0017659382428973913, 0.0045934682711958885, 0.0020367370452731848, 0.0032618797849863768, 0.0030410450417548418, 0.0036039240658283234, 0.0017695656279101968, 0.001980700995773077, 0.0045741614885628223, 0.0044277207925915718, 0.0024428798351436853, 0.0021862264256924391, 0.0036085145547986031, 0.0020340990740805864, 0.0027028764598071575, 0.0037716624792665243, 0.0012517854338511825, 0.0037350049242377281, 0.0022614267654716969, 0.0037002221215516329, 0.0024310285225510597, 0.0015943027101457119, 0.0044233803637325764, 0.0027493247762322426, 0.0022340381983667612, 0.0018826310988515615, 0.0045011467300355434, 0.0024962553288787603, 0.0012896818807348609, 0.0029564036522060633, 0.0021103310864418745, 0.001811692607589066, 0.0025232466869056225, 0.0029525235295295715, 0.0044176378287374973, 0.0030037430115044117, 0.0020426223054528236, 0.0030025767628103495, 0.0034805950708687305, 0.0029827423859387636, 0.0054813330061733723, 0.0018649508710950613, 0.0022347797639667988, 0.00048561498988419771, 0.0033382242545485497, 0.002448939485475421, 0.0029649408534169197, } };
const TfArray<48, int> quant50_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const ALIGN(8) int8_t tensor_data51[8*1*1*48] = {
  /* [0][0][][] */ 45,-33,-20,-51,69,-9,42,-74,-4,-94,55,-23,-37,35,32,23,-36,113,36,-31,49,-46,-70,100,20,-51,-6,61,50,-13,-8,57,-127,7,-37,-39,25,27,70,-16,44,-3,10,-21,-53,-15,-59,-36,
  /* [1][0][][] */ 52,-41,23,-39,78,12,-45,26,-24,-20,-7,54,-34,54,-106,-127,-42,-22,51,-15,17,-52,67,-3,-93,58,29,-1,75,-32,7,1,-29,-44,-74,-70,-17,19,-23,-36,3,-53,-54,-2,35,-97,-19,15,
  /* [2][0][][] */ 108,-116,81,-45,81,27,-13,-45,-40,-59,-25,-100,-34,-76,61,-23,40,75,25,-98,2,123,-52,78,-29,6,-32,-57,-55,87,-13,-45,110,-34,127,94,55,-94,-7,118,8,-42,-61,-55,52,53,-83,-1,
  /* [3][0][][] */ 70,13,43,1,-27,20,21,16,46,-34,-22,-65,59,-51,-71,-77,35,-58,24,58,-46,66,41,-16,-27,-6,-53,-48,-11,51,-1,68,-60,-64,19,-56,-127,10,25,-52,-5,-1,12,24,117,-10,36,-2,
  /* [4][0][][] */ -95,-80,27,-1,94,65,29,-41,-12,18,32,-23,-127,-18,-60,-2,31,10,99,-71,-23,37,-59,71,9,-20,-86,17,47,24,29,-26,14,-38,-3,34,67,-64,30,71,-5,-93,-37,-65,2,-65,-127,-9,
  /* [5][0][][] */ 53,-6,51,-14,59,54,67,-99,-107,57,-36,-53,-57,-2,-112,-38,53,127,-20,37,-58,27,-73,-29,4,-62,-92,-25,-37,33,-87,-49,88,-16,-12,48,56,-25,2,79,102,-78,-52,-6,11,-21,-37,31,
  /* [6][0][][] */ -26,3,15,3,-30,110,-11,-71,-3,52,32,1,2,-6,53,55,40,-127,58,24,-18,76,43,-24,51,57,-14,-32,-27,62,11,-35,-1,-16,-22,-33,-7,-24,-4,-30,-33,-63,-80,-34,103,43,16,-19,
  /* [7][0][][] */ -26,42,8,8,-37,48,-57,40,-13,-13,-53,14,29,-9,-118,-38,28,-30,127,37,21,0,80,-19,-50,108,57,26,57,-34,-8,-14,-35,54,2,25,18,35,-12,37,-55,1,-8,41,-40,3,28,62,
};
const TfArray<4, int> tensor_dimension51 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant51_scale = { 8, { 0.003862032201141119, 0.0043785553425550461, 0.0023003921378403902, 0.0044295182451605797, 0.0036787074059247971, 0.0044720703735947609, 0.0038620042614638805, 0.0037942896597087383, } };
const TfArray<8, int> quant51_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const ALIGN(8) int8_t tensor_data52[48*1*1*8] = {
  /* [0][0][][] */ -42,-37,-127,120,126,-93,-54,-45,
  /* [1][0][][] */ -16,-11,127,33,-71,-38,27,32,
  /* [2][0][][] */ 22,127,42,1,-50,64,-22,98,
  /* [3][0][][] */ 50,46,79,-86,-99,-67,83,127,
  /* [4][0][][] */ -19,47,-19,51,-5,-127,119,0,
  /* [5][0][][] */ -127,-8,119,35,-39,-87,-37,-20,
  /* [6][0][][] */ -40,5,-36,6,8,-25,-73,-127,
  /* [7][0][][] */ -22,97,127,1,-93,-54,33,52,
  /* [8][0][][] */ -5,88,125,113,-5,-18,-95,-127,
  /* [9][0][][] */ -6,11,6,-90,16,-8,6,127,
  /* [10][0][][] */ 127,-31,112,-19,43,67,42,-113,
  /* [11][0][][] */ 127,-77,-53,89,77,-96,113,-6,
  /* [12][0][][] */ -127,70,-6,19,-35,19,52,-46,
  /* [13][0][][] */ -7,15,-83,13,127,-44,-95,-66,
  /* [14][0][][] */ 4,-77,-89,-24,120,-92,-127,-44,
  /* [15][0][][] */ 33,-33,90,-8,127,-17,-58,-63,
  /* [16][0][][] */ -49,-15,-94,106,127,-8,-101,-39,
  /* [17][0][][] */ 120,37,-99,30,-71,30,-90,127,
  /* [18][0][][] */ 71,127,65,-33,54,6,4,8,
  /* [19][0][][] */ -58,36,-32,-46,25,-105,69,-127,
  /* [20][0][][] */ -72,97,53,-15,-127,102,71,-62,
  /* [21][0][][] */ 28,-49,24,-45,-1,-26,53,127,
  /* [22][0][][] */ 127,-38,22,-5,79,-70,-53,81,
  /* [23][0][][] */ -120,60,-98,32,127,57,-110,-75,
  /* [24][0][][] */ -102,34,-21,-65,26,-26,-127,92,
  /* [25][0][][] */ -46,-16,47,-13,-13,127,-17,-12,
  /* [26][0][][] */ 127,-25,-20,13,60,26,21,-10,
  /* [27][0][][] */ -36,-95,-7,127,122,63,-63,-86,
  /* [28][0][][] */ -58,71,-49,127,49,0,-70,-36,
  /* [29][0][][] */ 28,58,-17,-32,-99,47,-127,0,
  /* [30][0][][] */ 85,11,64,-102,-127,-47,79,20,
  /* [31][0][][] */ 76,17,-20,-127,54,77,-53,-62,
  /* [32][0][][] */ 28,-54,-33,-35,-41,-93,80,-127,
  /* [33][0][][] */ -127,46,-101,79,59,25,-77,-66,
  /* [34][0][][] */ -4,53,-41,-16,37,7,-127,-9,
  /* [35][0][][] */ 127,54,15,98,-78,-26,-79,18,
  /* [36][0][][] */ 83,55,105,-106,-64,-25,127,63,
  /* [37][0][][] */ -37,-46,31,-127,28,-11,31,18,
  /* [38][0][][] */ 40,-40,28,-10,-42,-5,75,127,
  /* [39][0][][] */ 113,21,57,127,48,-78,-28,-99,
  /* [40][0][][] */ -93,39,-66,8,-11,-127,38,28,
  /* [41][0][][] */ -39,-127,-34,-116,120,-73,-28,-14,
  /* [42][0][][] */ -48,-127,-28,57,25,83,-80,24,
  /* [43][0][][] */ -54,-127,-64,99,-7,-39,5,16,
  /* [44][0][][] */ 11,117,-93,92,62,-127,-63,-118,
  /* [45][0][][] */ 29,127,17,-28,-13,44,-55,68,
  /* [46][0][][] */ -30,-13,22,-39,-127,30,11,-33,
  /* [47][0][][] */ -75,-3,-84,72,97,50,-127,81,
};
const TfArray<4, int> tensor_dimension52 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant52_scale = { 48, { 0.0023602743167430162, 0.0032367778476327658, 0.0039476673118770123, 0.0020640071015805006, 0.002851598197594285, 0.0021988474763929844, 0.0020365659147500992, 0.001871761167421937, 0.00064364279387518764, 0.0034127975814044476, 0.0014226996572688222, 0.0029597242828458548, 0.0050350702367722988, 0.0021575391292572021, 0.0025185199920088053, 0.0027397831436246634, 0.002387442858889699, 0.0036422342527657747, 0.0048094098456203938, 0.0027438723482191563, 0.002612236887216568, 0.003647129749879241, 0.0046064183115959167, 0.0012654877500608563, 0.00098801834974437952, 0.0030119852162897587, 0.0046405796892940998, 0.00166307482868433, 0.0015877180267125368, 0.0026145779993385077, 0.0019698943942785263, 0.0027223725337535143, 0.0024450176861137152, 0.0011980984127148986, 0.002611914649605751, 0.0032271496020257473, 0.0015672119334340096, 0.0038042920641601086, 0.0023025455884635448, 0.0011260113678872585, 0.0024978555738925934, 0.0030512805096805096, 0.002621012507006526, 0.0038193282671272755, 0.0011132750660181046, 0.0045338128693401814, 0.001806683954782784, 0.0020486121065914631, } };
const TfArray<48, int> quant52_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const ALIGN(8) int8_t tensor_data53[8*1*1*48] = {
  /* [0][0][][] */ -102,1,-54,3,71,39,63,110,56,-97,-68,8,-127,-13,-10,-42,-11,2,20,-105,65,-72,120,-29,-76,-79,-77,7,-49,48,-125,70,-44,113,-38,17,50,25,-88,89,-53,-53,-60,56,-57,-8,-31,-71,
  /* [1][0][][] */ 1,-29,-11,-56,57,-59,21,34,-2,-44,-36,-8,10,-68,-64,-30,-19,-71,50,11,5,-32,-11,-30,0,-36,-48,-1,-127,31,-114,59,-63,52,9,-63,-100,-29,-32,-25,-55,-81,-32,17,46,-50,-98,-38,
  /* [2][0][][] */ -49,10,35,12,-32,-28,15,-81,127,-97,-89,76,-30,35,1,25,-11,-69,76,-20,-49,37,65,61,-31,-26,12,21,-21,31,-84,36,26,96,-51,34,-45,-40,5,74,-52,-16,-24,62,4,28,-59,31,
  /* [3][0][][] */ 127,64,-11,-56,37,49,-69,-70,33,0,-35,-34,-15,0,-23,36,32,0,-41,63,-82,55,-33,19,-60,-58,-40,-25,-6,7,21,-11,-60,-5,-14,-55,-27,32,38,-73,-87,-18,-1,-42,74,-8,-71,39,
  /* [4][0][][] */ -17,-45,-8,52,40,13,17,-30,-21,-50,52,77,-6,-92,-53,-106,109,-15,71,98,-60,-12,83,-62,-56,-22,17,10,22,-127,63,-21,-47,-59,-94,30,30,-81,-53,3,78,19,-49,94,69,57,-25,38,
  /* [5][0][][] */ 44,-29,109,-11,44,47,88,-66,127,9,41,13,8,12,11,81,63,-6,55,35,13,-1,32,16,-92,-1,-66,-67,-5,44,14,-26,68,-65,-34,67,-39,29,-19,69,103,5,-19,16,-41,80,17,70,
  /* [6][0][][] */ 77,0,73,15,8,36,-58,-40,-127,40,15,20,17,59,19,5,-77,-7,25,7,-36,-58,-12,97,-70,-5,10,35,65,-109,38,-69,36,25,-94,-44,-9,-8,82,-19,9,42,35,-34,-7,22,3,42,
  /* [7][0][][] */ 11,-24,93,-46,39,-45,0,-61,-97,48,127,-10,41,20,26,-90,73,91,-41,116,39,-72,-13,-37,67,17,-45,-115,-38,6,64,-56,25,-123,-30,-53,80,95,62,7,34,-13,5,-127,-104,8,31,59,
};
const TfArray<4, int> tensor_dimension53 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant53_scale = { 8, { 0.00440172478556633, 0.010688110254704952, 0.0046150581911206245, 0.0041379816830158234, 0.0034910973627120256, 0.0046023726463317871, 0.0046276212669909, 0.0031533222645521164, } };
const TfArray<8, int> quant53_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const ALIGN(8) int8_t tensor_data54[48*1*1*8] = {
  /* [0][0][][] */ -26,-127,37,-30,66,-49,2,-73,
  /* [1][0][][] */ -45,-58,42,-45,-78,91,-127,92,
  /* [2][0][][] */ -118,1,-36,-99,-2,-127,20,-99,
  /* [3][0][][] */ -54,-21,36,-44,122,-84,-127,35,
  /* [4][0][][] */ 70,-12,-98,-65,18,-57,-127,123,
  /* [5][0][][] */ 49,-49,-113,-8,106,-94,-18,-127,
  /* [6][0][][] */ 54,-30,127,81,-35,20,-68,23,
  /* [7][0][][] */ -47,-27,-127,45,16,116,-34,39,
  /* [8][0][][] */ 55,-1,-83,-31,-60,127,-72,-83,
  /* [9][0][][] */ -75,-43,23,-13,57,-36,-127,23,
  /* [10][0][][] */ 65,21,85,-117,127,13,-19,-53,
  /* [11][0][][] */ 38,-8,54,-127,1,37,61,25,
  /* [12][0][][] */ 16,-37,-42,127,-87,-12,9,87,
  /* [13][0][][] */ 53,-127,33,-46,-83,35,72,-4,
  /* [14][0][][] */ -39,110,1,44,45,102,-127,-18,
  /* [15][0][][] */ -23,-22,-17,-102,127,-32,-122,-108,
  /* [16][0][][] */ 62,-8,-13,64,121,71,-127,-31,
  /* [17][0][][] */ 127,-55,76,81,47,39,-16,-33,
  /* [18][0][][] */ 67,9,113,108,127,-108,11,54,
  /* [19][0][][] */ 47,-52,-94,-14,122,-127,-20,-64,
  /* [20][0][][] */ -49,4,-81,76,127,-47,-86,24,
  /* [21][0][][] */ -32,47,-60,-85,127,-8,85,8,
  /* [22][0][][] */ 48,3,40,-89,-127,-40,118,92,
  /* [23][0][][] */ -76,-35,-32,-78,24,82,-127,-79,
  /* [24][0][][] */ -27,-26,55,-65,7,-40,87,127,
  /* [25][0][][] */ 127,-45,-6,74,72,82,-3,25,
  /* [26][0][][] */ 40,-33,-48,-95,-103,-127,-8,-105,
  /* [27][0][][] */ -66,-20,-107,-127,-67,81,-43,-29,
  /* [28][0][][] */ -3,-127,-51,80,71,-50,27,82,
  /* [29][0][][] */ -127,-51,45,-34,-38,-71,-115,102,
  /* [30][0][][] */ 0,-123,21,-54,110,-35,4,127,
  /* [31][0][][] */ -3,20,1,42,-32,51,-11,127,
  /* [32][0][][] */ -95,11,-18,-127,42,37,-24,-43,
  /* [33][0][][] */ 30,50,14,-4,-97,-11,24,127,
  /* [34][0][][] */ -32,2,-36,-31,127,17,-77,86,
  /* [35][0][][] */ -59,8,48,-127,-64,-44,37,82,
  /* [36][0][][] */ -7,-1,-57,16,28,-127,6,69,
  /* [37][0][][] */ 94,7,-90,-9,-70,80,-63,-127,
  /* [38][0][][] */ 25,46,13,127,72,72,-111,-46,
  /* [39][0][][] */ 99,-11,-127,-43,-7,56,64,52,
  /* [40][0][][] */ 53,-27,-127,-69,-32,48,99,69,
  /* [41][0][][] */ 59,10,-120,-38,-12,14,-127,102,
  /* [42][0][][] */ 78,12,7,-10,34,44,-127,-22,
  /* [43][0][][] */ 44,-56,-25,11,-69,-7,46,127,
  /* [44][0][][] */ 72,-58,-2,-19,-2,20,-91,127,
  /* [45][0][][] */ -58,29,53,-10,127,-71,78,49,
  /* [46][0][][] */ -61,25,54,-113,-1,127,-22,-82,
  /* [47][0][][] */ 17,-30,59,-127,17,67,-12,83,
};
const TfArray<4, int> tensor_dimension54 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant54_scale = { 48, { 0.002347797155380249, 0.0027841620612889528, 0.0017617595149204135, 0.0024069144856184721, 0.0014056257205083966, 0.0023152364883571863, 0.0022127572447061539, 0.0027438916731625795, 0.0022297760006040335, 0.0030402299016714096, 0.0025955801829695702, 0.0013848063535988331, 0.0024986898060888052, 0.0017576150130480528, 0.0024371717590838671, 0.0015363279962912202, 0.0015892297960817814, 0.0018635967280715704, 0.0024795823264867067, 0.001990678021684289, 0.0015514804981648922, 0.0022535934112966061, 0.0024347179569303989, 0.0024365019053220749, 0.0028383112512528896, 0.0020249651279300451, 0.0020369761623442173, 0.0025114088784903288, 0.0023852156009525061, 0.0016906324308365583, 0.0012665602844208479, 0.0035366781521588564, 0.0022466338705271482, 0.0025349778588861227, 0.0024992045946419239, 0.0024216463789343834, 0.003174064215272665, 0.0019651360344141722, 0.0014336128951981664, 0.0023820542264729738, 0.002417601877823472, 0.0028349440544843674, 0.002730940468609333, 0.0029479577206075191, 0.0028800072614103556, 0.0022077364847064018, 0.003060819348320365, 0.0029591002967208624, } };
const TfArray<48, int> quant54_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const ALIGN(8) int8_t tensor_data55[8*1*1*48] = {
  /* [0][0][][] */ -12,-43,37,70,-34,117,-101,70,-56,-69,50,-81,31,16,17,4,-29,-20,105,-80,-11,-61,8,25,-63,6,24,72,3,121,35,59,-75,3,0,34,-28,49,-1,107,-127,24,-5,-37,-89,44,2,16,
  /* [1][0][][] */ 62,93,21,64,3,-47,-30,23,3,-57,7,-44,-35,-5,8,28,60,-5,93,64,14,121,-23,-80,36,-34,48,127,-30,-48,29,-30,-40,-29,-74,30,-62,12,-26,-6,2,-20,-65,-65,-10,18,87,104,
  /* [2][0][][] */ 71,17,-44,-24,13,36,-48,67,-32,9,-5,58,-61,-53,88,42,49,-74,32,33,-115,-35,88,-94,71,5,-93,112,127,-21,-51,-35,-107,-22,74,13,-64,-24,-28,-31,16,-81,-63,25,-2,-83,5,4,
  /* [3][0][][] */ 30,22,23,-20,-53,13,-21,55,6,26,-38,42,22,-38,-20,-2,-59,33,-4,-5,-73,58,42,-6,-127,-2,-10,52,-35,-6,62,5,-53,41,11,8,20,-37,-9,-30,4,79,43,43,-9,39,29,-52,
  /* [4][0][][] */ -97,43,99,-20,-103,71,12,-120,-63,35,-85,14,-20,19,120,43,0,-86,95,-62,-15,127,15,-74,-33,-72,95,59,46,-19,-36,-8,38,-82,-102,14,98,65,-23,47,-12,66,-69,-118,9,113,-69,-20,
  /* [5][0][][] */ -127,16,58,-52,41,49,46,-10,-16,8,75,-32,-23,20,25,35,-15,-23,-20,-17,26,54,94,-6,-17,59,19,-40,60,31,-15,87,13,23,-22,48,-111,49,-17,-30,69,-31,-6,-3,-50,27,67,36,
  /* [6][0][][] */ 82,40,77,-2,-127,-18,-3,-15,-87,-43,-31,-65,58,-18,48,-7,-37,34,31,21,-52,38,59,-22,-72,43,-67,-41,14,15,-51,-19,-5,-12,22,-15,-25,-5,-31,43,-38,110,-27,-69,82,18,-26,121,
  /* [7][0][][] */ 4,-17,78,59,43,-54,29,54,72,-46,-62,78,-98,4,55,23,4,28,-41,67,-13,58,16,-86,33,11,-23,-31,127,23,-45,-39,78,-5,-45,29,-20,-101,-13,31,-21,-53,-41,-64,11,-17,9,-43,
};
const TfArray<4, int> tensor_dimension55 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant55_scale = { 8, { 0.004359981045126915, 0.0048525715246796608, 0.0041460362263023853, 0.0052597005851566792, 0.0035572338383644819, 0.0044706612825393677, 0.0046754274517297745, 0.0059349001385271549, } };
const TfArray<8, int> quant55_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const ALIGN(8) int8_t tensor_data56[48*1*1*8] = {
  /* [0][0][][] */ 70,10,80,32,27,-127,-8,-23,
  /* [1][0][][] */ 24,27,-55,127,2,47,-77,-16,
  /* [2][0][][] */ -127,-76,-3,49,5,100,-80,72,
  /* [3][0][][] */ -54,-10,113,-127,-91,-31,-5,55,
  /* [4][0][][] */ -98,-52,102,-127,98,15,65,-91,
  /* [5][0][][] */ -34,97,-94,-103,-25,-53,59,127,
  /* [6][0][][] */ -22,-1,51,-76,-127,-24,58,22,
  /* [7][0][][] */ -101,-22,94,36,54,34,127,-7,
  /* [8][0][][] */ 5,-76,-33,-91,-35,-127,-38,47,
  /* [9][0][][] */ -11,64,85,-5,4,127,-10,62,
  /* [10][0][][] */ 29,-7,87,-34,93,127,-13,6,
  /* [11][0][][] */ -19,74,53,26,54,-11,-127,68,
  /* [12][0][][] */ 12,55,-10,-127,94,-37,-38,-58,
  /* [13][0][][] */ 47,66,19,-72,127,83,-56,12,
  /* [14][0][][] */ 127,-39,17,-5,-10,-81,15,28,
  /* [15][0][][] */ -127,-54,-15,-22,87,-8,40,-21,
  /* [16][0][][] */ -127,24,9,-10,20,123,-57,-65,
  /* [17][0][][] */ 90,52,14,127,-21,-95,18,-21,
  /* [18][0][][] */ -77,-26,39,-33,-123,-76,127,35,
  /* [19][0][][] */ 42,120,13,127,-46,-89,-103,89,
  /* [20][0][][] */ 90,-80,-123,-6,-114,127,15,-124,
  /* [21][0][][] */ -34,-66,92,127,-22,95,-33,101,
  /* [22][0][][] */ -46,-127,59,-14,64,-78,13,-95,
  /* [23][0][][] */ 101,114,-23,22,-125,40,127,-9,
  /* [24][0][][] */ 34,-28,15,58,69,127,-16,-49,
  /* [25][0][][] */ -45,-127,-76,-16,27,11,71,-69,
  /* [26][0][][] */ -101,-12,26,14,-127,94,-120,53,
  /* [27][0][][] */ 40,-95,61,127,-94,57,-76,-68,
  /* [28][0][][] */ 39,20,9,19,52,127,-49,-20,
  /* [29][0][][] */ -127,1,-47,109,38,-7,-38,-13,
  /* [30][0][][] */ 56,59,-16,82,-21,127,12,15,
  /* [31][0][][] */ 127,-73,-64,19,-90,-90,-36,48,
  /* [32][0][][] */ 69,-9,17,72,72,28,-127,-8,
  /* [33][0][][] */ 82,-27,16,-127,17,-82,33,66,
  /* [34][0][][] */ -127,0,59,-11,-49,-34,36,33,
  /* [35][0][][] */ -93,-11,127,8,123,-68,51,4,
  /* [36][0][][] */ -16,88,127,1,21,-90,-69,23,
  /* [37][0][][] */ -126,74,107,-12,-16,117,-93,-127,
  /* [38][0][][] */ 42,110,-50,-127,44,-45,19,-46,
  /* [39][0][][] */ 32,-19,-117,59,127,-32,-18,15,
  /* [40][0][][] */ 27,67,116,-41,0,-79,-127,83,
  /* [41][0][][] */ -53,29,127,-58,87,-105,7,-36,
  /* [42][0][][] */ 34,-127,10,-70,20,-127,0,-19,
  /* [43][0][][] */ -127,6,-118,36,1,37,12,42,
  /* [44][0][][] */ -38,-89,45,127,-61,75,66,12,
  /* [45][0][][] */ 73,85,127,0,-58,-40,-118,-41,
  /* [46][0][][] */ -84,127,81,-99,-22,39,-41,111,
  /* [47][0][][] */ 43,-40,-32,127,31,115,65,-106,
};
const TfArray<4, int> tensor_dimension56 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant56_scale = { 48, { 0.0026049457956105471, 0.0031097012106329203, 0.0010223524877801538, 0.002733355388045311, 0.00096035923343151808, 0.0020037977956235409, 0.0037365993484854698, 0.002041093073785305, 0.0021622679196298122, 0.004731734748929739, 0.0035318478476256132, 0.0011695645516738296, 0.0024122963659465313, 0.0034047265071421862, 0.0029453844763338566, 0.0033084901515394449, 0.0021981608588248491, 0.0017336797900497913, 0.0029045897535979748, 0.00195266492664814, 0.0022063017822802067, 0.0017329775728285313, 0.0019629118032753468, 0.0021084893960505724, 0.0027988320216536522, 0.0016870402032509446, 0.0021035496611148119, 0.0011934946523979306, 0.004503544420003891, 0.0026871927548199892, 0.0022058577742427588, 0.0035743424668908119, 0.003511935705319047, 0.001546656247228384, 0.0035445548128336668, 0.001416715094819665, 0.0016099032945930958, 0.0020814796444028616, 0.0026711591053754091, 0.0040211770683526993, 0.0018769721500575542, 0.001448751543648541, 0.0029661576263606548, 0.00082916335668414831, 0.0027097281999886036, 0.0018664976814761758, 0.0026514288038015366, 0.0026291434187442064, } };
const TfArray<48, int> quant56_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const ALIGN(8) int8_t tensor_data57[8*1*1*48] = {
  /* [0][0][][] */ -29,-17,7,53,-22,-13,-29,-35,-8,-7,0,-42,25,-17,21,11,-63,23,-12,24,-43,6,19,33,-5,-34,53,11,40,21,-50,-56,-19,9,-44,-38,28,-28,14,43,2,-32,-13,-127,-8,-34,5,-10,
  /* [1][0][][] */ -36,-9,53,14,-45,34,-29,4,-41,-27,0,8,57,-5,-58,-53,-13,-17,-14,57,9,2,-111,127,50,-60,-16,-88,-64,-45,-67,20,40,-4,-8,-78,94,22,-6,11,56,6,-24,42,-91,11,23,-22,
  /* [2][0][][] */ -15,42,-55,-21,27,10,48,-4,-33,-45,14,55,-31,-31,-18,-11,19,34,13,9,27,66,11,32,40,-33,-27,-26,-43,2,-25,-42,15,33,43,-38,46,53,27,-19,29,66,-19,-127,28,2,24,-30,
  /* [3][0][][] */ 32,-103,-55,31,-88,-1,-69,29,54,35,51,-11,-34,78,-16,-52,-61,-7,28,90,14,-32,24,8,-68,-61,14,127,93,77,-20,20,-34,-75,-28,65,28,-44,-44,34,-44,-81,29,46,13,-15,-31,-12,
  /* [4][0][][] */ -52,42,64,118,92,-109,-58,80,54,-7,19,78,15,-34,127,0,-10,81,-82,-12,-15,54,60,-25,34,-18,69,-60,-62,60,24,39,17,70,4,58,10,0,50,-5,36,44,-4,114,-3,96,40,-50,
  /* [5][0][][] */ 5,-28,-32,57,15,-17,-3,-5,-66,-22,-10,-46,8,-16,-44,-18,14,-50,-28,-40,-41,59,-55,26,15,22,-6,35,22,-6,-55,63,-23,-2,-24,-95,-16,32,53,17,77,127,-35,67,57,-39,24,-15,
  /* [6][0][][] */ -24,4,87,15,-41,-14,-8,42,62,83,98,2,-75,47,-26,-24,-94,40,15,-116,-12,11,-36,53,-76,127,-10,-49,21,-28,-58,-60,-33,-30,65,-43,-99,-28,20,2,90,-15,-2,88,27,67,-47,62,
  /* [7][0][][] */ -69,40,-69,24,27,96,23,-37,-84,-38,-34,-44,59,-66,1,5,-46,-100,33,64,87,89,-103,-7,123,-8,-55,-120,46,5,-24,-127,77,65,20,-30,122,-45,-2,9,-16,21,-29,-84,41,40,39,-44,
};
const TfArray<4, int> tensor_dimension57 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant57_scale = { 8, { 0.005185490008443594, 0.0035167920868843794, 0.0041805044747889042, 0.0028873507399111986, 0.0028820452280342579, 0.0044631622731685638, 0.002468200633302331, 0.0025851246900856495, } };
const TfArray<8, int> quant57_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const ALIGN(8) int8_t tensor_data58[48*1*1*8] = {
  /* [0][0][][] */ -50,-127,-35,63,-124,118,25,40,
  /* [1][0][][] */ 57,-17,-122,-8,-14,127,48,57,
  /* [2][0][][] */ -70,-121,-127,-19,-93,-12,18,28,
  /* [3][0][][] */ -98,69,109,-31,56,-121,51,127,
  /* [4][0][][] */ -39,-90,99,-31,-1,0,127,33,
  /* [5][0][][] */ 23,-8,127,-8,-34,-53,-8,86,
  /* [6][0][][] */ -38,-31,31,16,-51,-127,-70,-49,
  /* [7][0][][] */ 26,42,-99,-13,127,78,-9,-28,
  /* [8][0][][] */ 8,14,-127,7,-25,-16,-100,64,
  /* [9][0][][] */ -33,29,23,-73,91,-127,-48,2,
  /* [10][0][][] */ -66,-127,-95,7,-113,-18,-1,21,
  /* [11][0][][] */ -11,-122,123,127,11,-7,-10,-10,
  /* [12][0][][] */ -127,55,-13,14,36,-30,-23,-20,
  /* [13][0][][] */ -29,-11,-8,2,127,-51,20,28,
  /* [14][0][][] */ 33,70,-127,73,46,-26,-71,-93,
  /* [15][0][][] */ -67,111,-45,-127,-51,-97,21,46,
  /* [16][0][][] */ 127,-19,91,-3,22,-7,-20,9,
  /* [17][0][][] */ -35,19,-127,-60,-45,96,81,55,
  /* [18][0][][] */ -17,83,-28,-42,-24,78,127,91,
  /* [19][0][][] */ -22,43,-21,48,-113,66,127,-126,
  /* [20][0][][] */ 62,3,-27,-25,127,0,-85,-74,
  /* [21][0][][] */ -39,-11,-15,-105,-16,127,59,21,
  /* [22][0][][] */ 0,113,74,-38,127,-45,-21,36,
  /* [23][0][][] */ -49,99,-80,-86,-45,-127,35,-25,
  /* [24][0][][] */ 19,43,-42,61,31,32,41,127,
  /* [25][0][][] */ 19,-127,-123,83,-104,36,-6,-62,
  /* [26][0][][] */ 12,-28,42,51,25,33,-127,-75,
  /* [27][0][][] */ 87,-92,-25,-73,-40,-127,62,-13,
  /* [28][0][][] */ -40,89,-50,-127,-34,-73,-95,-36,
  /* [29][0][][] */ 127,-80,-24,-17,47,33,34,68,
  /* [30][0][][] */ -30,-11,127,-78,31,-110,36,-17,
  /* [31][0][][] */ -37,-29,110,-29,127,12,-4,105,
  /* [32][0][][] */ 71,61,-72,-127,-82,49,11,61,
  /* [33][0][][] */ 3,-54,127,-29,102,116,42,94,
  /* [34][0][][] */ -29,-22,72,-117,34,42,-127,-44,
  /* [35][0][][] */ -18,-14,-36,-127,-30,-88,29,8,
  /* [36][0][][] */ 37,-42,-52,102,26,127,20,0,
  /* [37][0][][] */ -46,-44,-23,-10,12,81,127,-45,
  /* [38][0][][] */ 33,103,-77,-51,-127,94,33,26,
  /* [39][0][][] */ 75,22,-69,102,127,35,64,-77,
  /* [40][0][][] */ -66,25,-127,26,-2,92,-57,-10,
  /* [41][0][][] */ -11,43,-18,89,-27,93,127,72,
  /* [42][0][][] */ -117,-27,-86,69,-84,-127,49,61,
  /* [43][0][][] */ -55,-112,115,127,-64,7,56,49,
  /* [44][0][][] */ 40,-75,-117,83,-81,-63,-2,-127,
  /* [45][0][][] */ -89,8,-122,94,-4,8,-59,-127,
  /* [46][0][][] */ -59,-12,107,9,62,-27,18,-127,
  /* [47][0][][] */ -18,-22,-127,-13,-37,-41,-77,83,
};
const TfArray<4, int> tensor_dimension58 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant58_scale = { 48, { 0.0019083534134551883, 0.0019616165664047003, 0.0023082289844751358, 0.0017398061463609338, 0.0025569384451955557, 0.0021677128970623016, 0.0034390729852020741, 0.0026001236401498318, 0.0026262036990374327, 0.0018613064894452691, 0.0024053442757576704, 0.0019307913025841117, 0.0039323335513472557, 0.0033327843993902206, 0.0016667814925312996, 0.0018945980118587613, 0.0022711623460054398, 0.0012652006698772311, 0.0021715136244893074, 0.0018086861819028854, 0.0029910707380622625, 0.0029155509546399117, 0.0021685785613954067, 0.0019269585609436035, 0.0021846296731382608, 0.0020820403005927801, 0.0020469976589083672, 0.0025957142934203148, 0.0016305921599268913, 0.0033501924481242895, 0.0018988425144925714, 0.0014240586897358298, 0.0015513279940932989, 0.0023293348494917154, 0.0014704305212944746, 0.0028777059633284807, 0.0023961262777447701, 0.0033727970439940691, 0.0017163441516458988, 0.0022965106181800365, 0.0023013788741081953, 0.0022379430010914803, 0.0023151058703660965, 0.0021767746657133102, 0.0019374489784240723, 0.0021092602983117104, 0.0021857188548892736, 0.002493624109774828, } };
const TfArray<48, int> quant58_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const ALIGN(8) int8_t tensor_data59[8*1*1*48] = {
  /* [0][0][][] */ 16,31,24,47,31,98,-41,-35,-22,18,-53,-28,-127,-39,-5,-25,-65,-15,-59,-30,20,-78,57,9,-39,35,42,95,6,0,-53,-14,63,0,45,19,-35,-49,76,5,25,5,-15,-5,-4,-12,-41,4,
  /* [1][0][][] */ 44,-32,63,-52,-46,6,15,1,-3,120,-122,-53,8,-8,48,31,-56,-62,-20,-12,-25,-5,-95,-127,-36,88,-46,-16,4,-12,-4,40,-8,-34,51,-36,37,-55,72,-15,-26,-42,0,93,-25,8,51,30,
  /* [2][0][][] */ -29,6,52,17,-15,30,-5,7,33,10,-60,-31,-3,69,11,15,59,73,-81,-34,-72,21,-11,15,-34,21,-79,4,-76,-27,-38,108,-62,18,-72,-88,31,70,17,-38,-3,-4,-34,-127,-56,-47,20,34,
  /* [3][0][][] */ -7,21,36,-7,-3,-62,-38,10,4,-127,-32,38,17,-32,-31,-69,-12,65,15,48,29,39,1,102,-2,-29,54,-21,2,23,3,17,-8,15,33,11,-59,-7,-38,-6,20,-27,-1,19,-5,19,-4,18,
  /* [4][0][][] */ 14,-58,40,3,-1,-74,20,60,-24,127,-29,-33,50,-43,43,3,11,23,-12,-28,24,12,-22,-33,-33,18,-18,6,15,13,7,40,-31,19,-14,10,27,31,59,-39,-58,-10,-42,-35,-29,-62,52,-4,
  /* [5][0][][] */ -63,-55,8,44,-7,-83,-85,-71,122,-84,6,-78,1,102,-39,-35,-14,-42,-43,65,-59,28,40,-55,4,93,68,-24,-127,-32,-101,51,40,81,-5,-90,10,0,12,84,-40,-18,71,-97,-91,21,-14,127,
  /* [6][0][][] */ -53,43,4,-66,-127,-7,62,-48,23,-88,-4,-23,-58,-39,-24,-17,-11,-68,-9,30,-62,-6,-71,-1,46,12,16,10,0,12,105,-48,-13,-31,120,76,10,122,53,-16,20,-58,95,-14,33,26,1,50,
  /* [7][0][][] */ -40,-5,-17,-73,-41,127,10,-82,-10,70,-8,9,-94,-20,-73,-5,-70,-68,-7,-35,-39,-69,22,-9,1,37,-14,67,-46,36,-67,99,7,20,74,-75,28,-21,-37,-59,75,-47,50,-3,10,-45,4,-22,
};
const TfArray<4, int> tensor_dimension59 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant59_scale = { 8, { 0.0025433660484850407, 0.0027978990692645311, 0.0035734407138079405, 0.0044661457650363445, 0.0053973393514752388, 0.0024109345395117998, 0.0020156423561275005, 0.0034391027875244617, } };
const TfArray<8, int> quant59_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const ALIGN(8) int8_t tensor_data60[48*1*1*8] = {
  /* [0][0][][] */ 66,-32,17,-67,-43,51,18,-127,
  /* [1][0][][] */ 81,-69,58,12,3,-35,-127,20,
  /* [2][0][][] */ -70,38,-108,-127,-46,-9,-73,-66,
  /* [3][0][][] */ 34,39,104,-26,37,-37,-127,-49,
  /* [4][0][][] */ -15,30,40,-115,77,-127,24,-30,
  /* [5][0][][] */ 30,-9,-69,-127,-28,-42,-86,-50,
  /* [6][0][][] */ -14,16,28,-27,9,-127,-79,1,
  /* [7][0][][] */ -118,114,45,127,46,60,-7,93,
  /* [8][0][][] */ -57,-12,14,-64,-29,-127,-2,-46,
  /* [9][0][][] */ -11,15,-4,33,127,-66,25,-9,
  /* [10][0][][] */ 106,-45,-127,79,-19,90,-109,26,
  /* [11][0][][] */ 127,41,42,62,4,-14,-64,-125,
  /* [12][0][][] */ -104,20,127,3,-72,-77,59,105,
  /* [13][0][][] */ 62,78,82,-52,-15,17,-127,-13,
  /* [14][0][][] */ 89,-54,48,-98,68,-127,9,-33,
  /* [15][0][][] */ 84,76,29,-8,-127,24,44,-65,
  /* [16][0][][] */ 26,57,127,65,81,-77,27,-1,
  /* [17][0][][] */ 127,62,-60,108,96,-29,-65,7,
  /* [18][0][][] */ 36,-26,17,-105,-33,-127,62,-48,
  /* [19][0][][] */ -37,-4,127,0,50,-101,55,-4,
  /* [20][0][][] */ 47,-35,-1,-33,33,-127,7,0,
  /* [21][0][][] */ 35,-123,62,127,-67,77,-52,2,
  /* [22][0][][] */ -31,61,-85,23,-127,10,-16,124,
  /* [23][0][][] */ 68,-37,-54,-26,31,127,-117,-20,
  /* [24][0][][] */ -116,44,111,-20,127,52,-56,-44,
  /* [25][0][][] */ -71,5,-127,-9,-45,76,-39,63,
  /* [26][0][][] */ 127,-58,-3,11,79,68,-54,24,
  /* [27][0][][] */ -29,-127,-21,105,-45,32,-55,-44,
  /* [28][0][][] */ -37,62,28,-18,80,-127,92,91,
  /* [29][0][][] */ -43,-103,-72,-72,15,-127,120,30,
  /* [30][0][][] */ -29,-39,-127,6,6,125,72,16,
  /* [31][0][][] */ 11,-35,-20,47,-92,81,127,-68,
  /* [32][0][][] */ 27,43,-25,-123,11,-43,-127,-85,
  /* [33][0][][] */ -90,127,28,76,-45,51,19,38,
  /* [34][0][][] */ 26,-8,30,14,-99,-39,127,14,
  /* [35][0][][] */ 98,-64,1,10,32,47,-127,-40,
  /* [36][0][][] */ -43,-6,127,-24,76,58,50,-109,
  /* [37][0][][] */ -43,-43,124,-25,39,9,127,68,
  /* [38][0][][] */ -8,45,-16,127,-79,-6,22,61,
  /* [39][0][][] */ 78,-45,-67,37,-88,-82,-38,-127,
  /* [40][0][][] */ -7,11,-43,-95,-15,-127,-68,-45,
  /* [41][0][][] */ -59,12,-29,-32,-45,-119,-127,-82,
  /* [42][0][][] */ 101,-127,59,17,36,26,-51,-18,
  /* [43][0][][] */ -51,-32,-43,17,-23,-127,-50,-13,
  /* [44][0][][] */ 55,-127,24,0,16,36,-27,4,
  /* [45][0][][] */ -51,-10,127,96,-48,-33,26,98,
  /* [46][0][][] */ -9,67,127,-27,-110,16,8,6,
  /* [47][0][][] */ -62,25,-59,-127,-111,2,-51,100,
};
const TfArray<4, int> tensor_dimension60 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant60_scale = { 48, { 0.0027069512289017439, 0.00089632684830576181, 0.0022387334611266851, 0.0022654912900179625, 0.001929737045429647, 0.0027242971118539572, 0.0029447055421769619, 0.00065988703863695264, 0.0018829511245712638, 0.0033308041747659445, 0.0016013770364224911, 0.001599443145096302, 0.0020173883531242609, 0.0026327562518417835, 0.0018333244370296597, 0.001995783532038331, 0.0013577977661043406, 0.0022716114763170481, 0.0011648890795186162, 0.0020630606450140476, 0.0028182922396808863, 0.0016476248856633902, 0.0017522358102723956, 0.0023258039727807045, 0.001732875476591289, 0.0020162663422524929, 0.0028862378094345331, 0.0015515002887696028, 0.001733836717903614, 0.0021493176463991404, 0.0012179899495095015, 0.002123804297298193, 0.0016631317557767034, 0.0015105021884664893, 0.0024404511786997318, 0.0025421618483960629, 0.0023265224881470203, 0.0024088204372674227, 0.0022907056845724583, 0.0024310587905347347, 0.0024912592489272356, 0.0023513000924140215, 0.0020050443708896637, 0.0038928512949496508, 0.0029615440871566534, 0.0023996043018996716, 0.0021038716658949852, 0.0019429416861385107, } };
const TfArray<48, int> quant60_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const ALIGN(8) int8_t tensor_data61[8*1*1*48] = {
  /* [0][0][][] */ -76,107,-55,8,-17,-2,31,-127,-29,57,16,92,-7,-32,23,-54,24,-1,37,0,4,55,-29,-93,-91,51,-76,-86,43,27,53,5,70,55,-78,1,-3,-42,-27,63,-1,26,61,-53,84,-14,-11,-39,
  /* [1][0][][] */ 14,-26,-2,42,-11,-42,10,51,-46,61,-19,-13,-50,-41,-39,-127,117,21,-46,37,-41,-94,-1,-19,55,-40,31,-21,101,7,-12,30,48,-46,23,-10,-31,-58,-70,45,-48,2,-17,-37,-34,48,-31,-25,
  /* [2][0][][] */ 1,-59,20,60,30,-16,-29,26,-53,41,43,82,-118,-21,-44,-71,46,-96,-43,114,-61,-37,-59,1,30,36,-40,127,55,-65,-37,27,-47,-37,-26,-2,-64,41,15,41,-66,74,39,-90,48,31,49,-46,
  /* [3][0][][] */ 8,-20,-72,-65,-27,84,45,-3,61,77,-6,-23,8,3,43,-27,70,34,-19,-3,18,95,16,25,-13,-2,54,98,68,-53,-126,-53,-127,34,21,81,34,-22,-112,-24,-34,-82,-49,36,-74,8,61,50,
  /* [4][0][][] */ 74,-11,91,-27,29,-80,-58,-98,-46,114,54,54,21,11,-86,74,66,0,35,56,-105,-77,-84,-45,108,96,-33,56,127,-18,4,21,14,21,31,38,-78,-3,103,49,-68,72,28,-90,93,-116,21,42,
  /* [5][0][][] */ -24,-5,-54,-33,-93,42,19,127,-33,-11,76,-23,19,-60,-28,-45,-85,-23,-46,6,14,7,38,-62,43,-17,-37,-5,-29,-38,-50,-12,-2,-70,23,39,22,10,8,-6,4,-6,49,-6,-20,9,-24,-31,
  /* [6][0][][] */ -44,-25,-80,-85,18,27,-71,50,-34,35,65,-20,-4,29,30,-27,69,-35,-98,88,40,-10,38,75,-56,73,55,-24,95,43,-43,-57,-120,-23,-90,-13,15,114,17,1,-40,-26,-39,-4,-34,-12,23,127,
  /* [7][0][][] */ 127,-90,-30,-43,-20,-52,43,16,-28,34,13,-47,4,-52,6,68,-14,-19,57,17,-24,-36,26,-62,-42,-1,-47,-11,47,18,-84,62,12,-52,-27,-53,-49,17,13,-20,0,17,58,-58,38,-14,-56,-63,
};
const TfArray<4, int> tensor_dimension61 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant61_scale = { 8, { 0.0021428856998682022, 0.0030355865601450205, 0.0035665272735059261, 0.0027872133068740368, 0.0028776510152965784, 0.0042688800022006035, 0.0027986648492515087, 0.0033926309552043676, } };
const TfArray<8, int> quant61_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const ALIGN(8) int8_t tensor_data62[48*1*1*8] = {
  /* [0][0][][] */ -4,-127,-7,119,-40,109,-51,90,
  /* [1][0][][] */ 55,99,23,2,-15,-127,-7,-51,
  /* [2][0][][] */ 34,-31,9,-28,74,-19,14,-127,
  /* [3][0][][] */ 127,-59,-38,-32,32,-122,69,94,
  /* [4][0][][] */ -127,9,-107,41,-2,49,44,-52,
  /* [5][0][][] */ 25,-21,-59,127,-82,-106,-66,27,
  /* [6][0][][] */ -42,-5,127,27,33,-109,-64,24,
  /* [7][0][][] */ 1,-40,80,-127,20,-52,-23,80,
  /* [8][0][][] */ 26,98,35,26,127,-59,90,71,
  /* [9][0][][] */ 48,-21,82,-127,44,-63,1,60,
  /* [10][0][][] */ 54,22,53,27,99,-18,-127,-95,
  /* [11][0][][] */ -11,122,23,27,82,-37,53,127,
  /* [12][0][][] */ -46,53,37,105,65,-81,-127,60,
  /* [13][0][][] */ -44,-127,-26,20,35,27,-82,-56,
  /* [14][0][][] */ -20,58,-17,10,21,-127,-24,37,
  /* [15][0][][] */ -73,-43,-127,8,-85,30,39,94,
  /* [16][0][][] */ 16,-127,-80,-46,-9,22,25,-86,
  /* [17][0][][] */ -18,-9,41,-78,11,-16,-127,-89,
  /* [18][0][][] */ -2,-121,49,42,-45,84,-127,11,
  /* [19][0][][] */ -104,66,-13,127,49,36,-15,-97,
  /* [20][0][][] */ -45,120,-57,95,99,-7,78,127,
  /* [21][0][][] */ 25,97,-47,82,4,-42,-127,55,
  /* [22][0][][] */ -17,123,-36,-127,40,-87,-3,0,
  /* [23][0][][] */ 64,-69,127,1,-60,-43,-74,-112,
  /* [24][0][][] */ 112,-65,-127,-60,-97,-49,43,0,
  /* [25][0][][] */ 31,13,-52,-51,83,-112,4,-127,
  /* [26][0][][] */ -53,-45,-121,-97,-9,103,127,-44,
  /* [27][0][][] */ -114,-18,-27,58,-23,-19,60,-127,
  /* [28][0][][] */ 89,111,34,-127,-40,62,-79,-38,
  /* [29][0][][] */ -21,22,10,25,127,-35,-22,13,
  /* [30][0][][] */ -109,127,-43,-54,68,55,25,-34,
  /* [31][0][][] */ -73,127,123,-7,84,87,-4,-23,
  /* [32][0][][] */ 23,-31,-38,15,-55,127,92,-39,
  /* [33][0][][] */ -12,127,-52,-73,17,-38,37,-28,
  /* [34][0][][] */ -17,127,34,109,-18,125,54,-72,
  /* [35][0][][] */ -41,127,21,-34,45,-69,3,-10,
  /* [36][0][][] */ -17,-105,-89,-127,19,51,16,57,
  /* [37][0][][] */ 52,-127,103,37,-3,9,-81,4,
  /* [38][0][][] */ 62,-71,104,-101,-15,27,-124,-127,
  /* [39][0][][] */ 24,78,55,-41,-45,-102,127,-94,
  /* [40][0][][] */ 19,-124,127,23,-101,-74,-27,-90,
  /* [41][0][][] */ -2,-15,-62,-35,-127,127,-100,-61,
  /* [42][0][][] */ 105,43,124,-18,56,-8,12,-127,
  /* [43][0][][] */ -20,126,42,98,43,-127,-75,-31,
  /* [44][0][][] */ -7,95,127,-75,93,74,-52,-4,
  /* [45][0][][] */ -44,-61,83,127,-5,25,94,73,
  /* [46][0][][] */ -86,114,-8,-13,127,-23,-24,64,
  /* [47][0][][] */ -39,97,127,53,8,58,-125,-39,
};
const TfArray<4, int> tensor_dimension62 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant62_scale = { 48, { 0.0019094839226454496, 0.0023249329533427954, 0.002518742810934782, 0.0020354371517896652, 0.0021263323724269867, 0.00091041717678308487, 0.0019776979461312294, 0.0020149156916886568, 0.002163466764613986, 0.0015130661195144057, 0.0015773430932313204, 0.0024018511176109314, 0.0026197277475148439, 0.001575821079313755, 0.0032214529346674681, 0.0017312730196863413, 0.0026755607686936855, 0.0026986536104232073, 0.0021708044223487377, 0.00089940236648544669, 0.0023262272588908672, 0.002036260673776269, 0.0022386137861758471, 0.0022415413986891508, 0.0011937348172068596, 0.0024701496586203575, 0.0015397298848256469, 0.0024339063093066216, 0.0021755164489150047, 0.0021457015536725521, 0.0017691199900582433, 0.0016967349220067263, 0.0025398654397577047, 0.0031295348890125751, 0.0018869751365855336, 0.0029528050217777491, 0.0014735268196091056, 0.0022478839382529259, 0.0020240815356373787, 0.0019452190026640892, 0.0020706942304968834, 0.0008401254890486598, 0.001217795186676085, 0.00089816527906805277, 0.0017318297177553177, 0.00066581193823367357, 0.0029181037098169327, 0.0021978940349072218, } };
const TfArray<48, int> quant62_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const ALIGN(8) int8_t tensor_data63[8*1*1*48] = {
  /* [0][0][][] */ 0,63,32,-35,103,-127,-78,41,16,93,-14,8,26,-72,-16,96,0,-1,-9,-34,-23,11,-25,-24,-109,19,-110,11,38,-36,-53,-6,23,37,-29,8,-40,55,8,29,-36,-24,9,-55,-10,-17,-67,-15,
  /* [1][0][][] */ -29,16,1,38,-19,-31,-46,20,11,-48,-71,23,7,-81,-35,107,68,24,22,105,0,10,71,68,61,39,-123,15,27,-18,52,118,-65,29,30,127,-97,-30,-35,-38,-108,-29,-13,126,47,-76,19,30,
  /* [2][0][][] */ 2,13,57,56,42,-17,-48,24,4,98,-93,-11,-58,23,-33,59,72,-2,-44,127,16,-8,-54,-35,124,-68,-110,-27,34,-46,1,63,20,-61,49,25,-5,57,23,25,79,-14,14,57,76,43,-23,26,
  /* [3][0][][] */ 5,2,17,-30,-38,114,88,-109,23,-112,-42,23,41,40,33,-21,-9,23,-11,9,-3,-5,-32,14,58,23,-36,22,-31,-15,5,9,-16,-4,39,-47,-68,-38,-23,7,4,76,-16,60,-31,127,-19,6,
  /* [4][0][][] */ 17,-53,87,-71,-22,28,-127,11,-5,75,-91,-28,-56,-6,-50,45,107,33,27,71,87,-41,-14,22,71,33,-79,-31,-10,-81,57,22,84,-19,-36,-31,90,-7,14,12,-96,15,-5,-44,75,39,61,-8,
  /* [5][0][][] */ -3,-14,-27,14,-14,-127,-15,-2,-24,-10,-6,-29,-1,7,6,4,-8,-74,1,2,-18,-25,-61,3,19,-19,109,-20,4,32,-15,28,13,4,-8,-9,1,11,-6,23,-24,-56,31,-30,12,26,24,-10,
  /* [6][0][][] */ -19,-10,-10,-76,-24,-10,-81,-22,53,-18,5,37,20,-63,8,-58,28,83,71,-57,30,10,-3,20,-75,7,127,-51,-29,36,20,-19,89,20,8,-12,-6,-46,-58,-60,17,59,37,-69,-57,37,-40,-49,
  /* [7][0][][] */ -70,-3,-68,-31,115,-9,-32,53,51,127,74,89,-6,-67,-69,-44,-35,-61,-50,126,73,53,-37,107,41,-108,-36,-25,47,-95,-39,28,-41,-74,-49,-33,-43,16,30,56,-76,36,-76,8,14,-6,70,5,
};
const TfArray<4, int> tensor_dimension63 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant63_scale = { 8, { 0.0027745920233428478, 0.0035285737831145525, 0.0041020223870873451, 0.0048500699922442436, 0.0034928207751363516, 0.0092503754422068596, 0.0030196027364581823, 0.0030105677433311939, } };
const TfArray<8, int> quant63_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const ALIGN(8) int8_t tensor_data64[48*1*1*8] = {
  /* [0][0][][] */ -63,127,-58,41,-19,75,95,10,
  /* [1][0][][] */ -73,2,-73,-49,59,65,127,24,
  /* [2][0][][] */ -84,-81,-127,-2,105,15,115,76,
  /* [3][0][][] */ 127,-93,5,54,-61,-68,-13,-16,
  /* [4][0][][] */ 2,59,-60,71,-40,127,-55,-30,
  /* [5][0][][] */ 8,9,79,-12,16,-127,-99,-96,
  /* [6][0][][] */ 28,68,45,55,26,127,-49,105,
  /* [7][0][][] */ -127,-29,40,-7,104,-73,22,17,
  /* [8][0][][] */ 63,-79,70,-13,-34,-35,2,-127,
  /* [9][0][][] */ -119,127,8,11,56,-76,95,89,
  /* [10][0][][] */ 12,-126,-97,-116,-86,26,61,127,
  /* [11][0][][] */ 12,81,49,88,-18,-14,-48,127,
  /* [12][0][][] */ 63,-79,-127,-68,-44,-38,2,69,
  /* [13][0][][] */ -127,-98,28,-55,-5,-16,-95,48,
  /* [14][0][][] */ 69,38,66,-114,-115,85,-70,-127,
  /* [15][0][][] */ 0,127,48,8,2,32,40,-52,
  /* [16][0][][] */ -116,13,70,-42,52,127,64,-87,
  /* [17][0][][] */ -127,-53,58,28,36,27,33,113,
  /* [18][0][][] */ 1,13,71,-16,-53,-95,-9,127,
  /* [19][0][][] */ -16,-9,-72,-107,41,-68,-127,-33,
  /* [20][0][][] */ 64,79,-127,78,-104,78,85,-11,
  /* [21][0][][] */ 79,73,43,121,-28,89,127,-66,
  /* [22][0][][] */ 127,2,33,-102,37,-54,3,62,
  /* [23][0][][] */ 114,-34,90,23,64,-127,75,31,
  /* [24][0][][] */ -5,-44,-37,-2,68,-8,-127,37,
  /* [25][0][][] */ 12,3,11,-46,-87,-127,9,80,
  /* [26][0][][] */ -10,-24,127,22,56,-122,-109,35,
  /* [27][0][][] */ -127,80,-18,20,3,-47,-31,33,
  /* [28][0][][] */ -95,-109,-22,-1,-50,31,127,-79,
  /* [29][0][][] */ -117,-68,-113,124,-16,127,-115,91,
  /* [30][0][][] */ 33,-68,127,-55,2,9,-49,-24,
  /* [31][0][][] */ -13,-60,63,-127,110,3,-27,67,
  /* [32][0][][] */ 56,-18,-127,35,31,-11,-62,6,
  /* [33][0][][] */ 49,-8,52,106,-61,-37,-127,-69,
  /* [34][0][][] */ -2,67,127,-3,-105,15,92,47,
  /* [35][0][][] */ 23,-127,42,-107,-40,-96,-25,-26,
  /* [36][0][][] */ -92,-127,38,39,-87,103,-75,92,
  /* [37][0][][] */ -38,60,58,-74,-8,-39,127,35,
  /* [38][0][][] */ 43,100,127,34,43,-16,32,-18,
  /* [39][0][][] */ 104,87,-27,-127,-28,-72,-87,-33,
  /* [40][0][][] */ -73,121,127,23,81,7,-28,15,
  /* [41][0][][] */ -58,-79,-16,-42,-60,-28,-24,127,
  /* [42][0][][] */ 45,-63,4,86,2,76,-65,-127,
  /* [43][0][][] */ 24,-23,-127,34,-52,94,-24,-55,
  /* [44][0][][] */ -36,41,41,127,-51,-5,55,-40,
  /* [45][0][][] */ -7,-45,-46,127,-22,82,-5,33,
  /* [46][0][][] */ 51,-67,127,-73,6,12,-45,-34,
  /* [47][0][][] */ -50,-18,63,-37,2,-127,0,53,
};
const TfArray<4, int> tensor_dimension64 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant64_scale = { 48, { 0.0015667403349652886, 0.0018947514472529292, 0.0016735965618863702, 0.0026717782020568848, 0.0012540984898805618, 0.0016014146385714412, 0.0016870367107912898, 0.0021249405108392239, 0.0017634521936997771, 0.0016997657949104905, 0.0010871087433770299, 0.0018261068034917116, 0.0018264836398884654, 0.0023356024175882339, 0.0020964033901691437, 0.0025767430197447538, 0.0017118584364652634, 0.0023302712943404913, 0.0018084619659930468, 0.0021921875886619091, 0.0017412649467587471, 0.0018659665947780013, 0.0024028110783547163, 0.0011738209286704659, 0.0032657729461789131, 0.0018497594865038991, 0.0013590076705440879, 0.0029280423186719418, 0.0015481524169445038, 0.0013393792323768139, 0.0018351791659370065, 0.0011087536113336682, 0.0030068191699683666, 0.0020898175425827503, 0.0020144928712397814, 0.0018932317616418004, 0.0019439563620835543, 0.0015393103240057826, 0.0012513474794104695, 0.0015000210842117667, 0.0011955866357311606, 0.0021439299453049898, 0.0021456158719956875, 0.0018912311643362045, 0.0019800858572125435, 0.0021889987401664257, 0.0023748227395117283, 0.0020440707448869944, } };
const TfArray<48, int> quant64_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const ALIGN(8) int8_t tensor_data65[8*1*1*48] = {
  /* [0][0][][] */ -33,-28,12,20,-127,-6,11,-60,23,-90,-50,-27,18,-53,34,15,5,6,-20,-8,-45,13,23,71,-5,37,47,-64,-18,-17,-81,28,-36,42,65,50,-1,-5,102,-8,-104,-30,-2,2,6,18,85,-30,
  /* [1][0][][] */ 83,14,25,-23,-4,-19,-48,-40,-74,56,45,-3,-29,-70,14,90,-14,18,-12,-13,-37,8,-28,-40,37,-24,-53,92,-65,36,95,-49,-1,-7,-26,-38,-16,14,84,-62,127,-4,10,-4,-57,66,-112,6,
  /* [2][0][][] */ 41,-21,-53,-5,-127,71,-38,-18,43,9,32,-28,-42,31,-23,-49,-82,64,3,-63,59,-6,-53,3,-29,-120,27,8,-10,19,-44,60,56,-3,-63,32,29,24,83,17,69,43,-3,50,31,0,58,49,
  /* [3][0][][] */ -16,-13,10,-14,95,5,-15,11,61,35,127,64,7,-19,-12,59,25,-7,82,-26,-15,89,58,0,7,-54,-68,-16,-38,-18,-20,-114,-19,-4,-27,-98,-4,-31,-6,-31,35,51,-69,-15,19,-74,6,84,
  /* [4][0][][] */ 77,49,123,-42,-111,40,-68,43,-8,73,-11,-46,-37,-72,-17,-29,-63,17,-28,-24,43,9,-25,43,67,-28,116,13,6,-111,29,87,-50,-18,29,3,-32,-28,80,-118,127,-39,-18,26,18,20,-39,-3,
  /* [5][0][][] */ 63,-60,-21,37,0,-15,-3,-55,-37,-43,-15,-27,-47,9,70,19,32,-34,20,-22,-39,35,-53,-75,7,-60,2,34,4,-22,-26,3,40,63,-47,27,42,-2,28,75,127,56,-60,64,-64,9,16,23,
  /* [6][0][][] */ 9,-36,8,76,9,-78,80,8,-14,58,-56,-33,-19,-31,74,15,57,-24,-12,-40,-51,127,13,65,37,30,-13,-27,99,47,105,-81,43,16,2,68,-97,107,8,27,-10,-68,26,18,-74,-66,-21,11,
  /* [7][0][][] */ -53,-24,-24,-26,-7,-57,26,9,-100,12,-78,37,27,92,-41,10,30,27,-35,-86,108,-55,-75,14,8,-32,-97,-11,-29,46,32,123,-45,-31,67,3,127,-55,-93,80,-57,49,79,77,74,-71,-32,15,
};
const TfArray<4, int> tensor_dimension65 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant65_scale = { 8, { 0.0042083184234797955, 0.0038121656980365515, 0.0045261555351316929, 0.0037632621824741364, 0.0038317975122481585, 0.005013488233089447, 0.0021335887722671032, 0.0024617998860776424, } };
const TfArray<8, int> quant65_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const ALIGN(8) int8_t tensor_data66[48*1*1*8] = {
  /* [0][0][][] */ 36,3,48,-82,-30,-13,-96,-127,
  /* [1][0][][] */ -87,4,119,-127,-42,-103,83,7,
  /* [2][0][][] */ -56,6,-116,-48,5,106,127,-76,
  /* [3][0][][] */ 121,-55,-127,-95,-51,56,13,105,
  /* [4][0][][] */ 57,-71,38,67,63,37,-127,-18,
  /* [5][0][][] */ -127,-36,-31,99,11,-62,16,26,
  /* [6][0][][] */ 57,35,127,21,38,71,23,126,
  /* [7][0][][] */ 9,-46,-111,92,127,76,-46,-113,
  /* [8][0][][] */ -65,-37,-127,83,-3,17,13,-73,
  /* [9][0][][] */ 56,48,37,110,-23,-50,-96,127,
  /* [10][0][][] */ -77,-51,-40,-22,20,-96,127,12,
  /* [11][0][][] */ 119,46,-59,-27,-32,-16,127,107,
  /* [12][0][][] */ -65,127,116,21,48,107,10,-8,
  /* [13][0][][] */ -2,48,12,-96,74,-21,127,15,
  /* [14][0][][] */ -1,-60,51,-9,127,-35,21,100,
  /* [15][0][][] */ -37,56,127,41,42,-43,-60,8,
  /* [16][0][][] */ 1,81,-108,84,-127,-44,38,-103,
  /* [17][0][][] */ -50,11,127,-7,31,-24,-18,65,
  /* [18][0][][] */ 42,-36,-127,32,25,77,-81,-90,
  /* [19][0][][] */ 23,91,85,-127,48,-78,45,69,
  /* [20][0][][] */ 37,-7,10,20,-4,-31,-127,54,
  /* [21][0][][] */ 43,-109,-34,89,-127,-55,-65,77,
  /* [22][0][][] */ 62,55,90,-127,-101,-83,41,-12,
  /* [23][0][][] */ -65,-9,71,21,-98,86,127,-45,
  /* [24][0][][] */ -103,-127,-79,57,12,20,-91,34,
  /* [25][0][][] */ -93,77,39,-109,-24,-127,121,-121,
  /* [26][0][][] */ 85,-110,127,26,-18,-33,-31,-67,
  /* [27][0][][] */ -127,-80,-63,-41,37,-1,-105,32,
  /* [28][0][][] */ -127,-7,74,46,4,30,67,-86,
  /* [29][0][][] */ 10,19,52,-127,-27,-15,37,34,
  /* [30][0][][] */ -127,85,66,5,81,-17,14,-19,
  /* [31][0][][] */ -100,-52,-127,-71,-28,98,5,102,
  /* [32][0][][] */ 7,-28,-56,-71,1,-38,-9,-127,
  /* [33][0][][] */ 58,81,127,64,-2,-69,-67,-69,
  /* [34][0][][] */ 74,79,-75,-34,2,-91,-56,127,
  /* [35][0][][] */ 0,12,-57,127,-15,-1,40,-21,
  /* [36][0][][] */ -127,-27,-21,-64,21,22,-3,-80,
  /* [37][0][][] */ -26,-16,-86,120,-127,-11,-17,26,
  /* [38][0][][] */ 98,-127,-118,-113,-1,90,75,115,
  /* [39][0][][] */ -69,-80,-127,-52,-18,64,54,118,
  /* [40][0][][] */ -114,127,127,-5,81,36,52,38,
  /* [41][0][][] */ -93,-8,-9,26,-11,-41,-58,-127,
  /* [42][0][][] */ -114,-56,33,-85,52,-43,-127,-87,
  /* [43][0][][] */ 63,-44,-17,42,-24,127,-39,-64,
  /* [44][0][][] */ 29,-77,62,17,99,-127,-70,94,
  /* [45][0][][] */ 42,75,-38,-37,-36,12,8,-127,
  /* [46][0][][] */ 40,42,127,46,-13,-45,-76,-73,
  /* [47][0][][] */ 39,-84,74,-127,122,-20,-47,-42,
};
const TfArray<4, int> tensor_dimension66 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant66_scale = { 48, { 0.0019380977610126138, 0.0016317925183102489, 0.0013054243754595518, 0.0015680227661505342, 0.0023118054959923029, 0.0027318517677485943, 0.0017441845266148448, 0.0016012924024835229, 0.0021361673716455698, 0.0014475359348580241, 0.0024501660373061895, 0.0019793517421931028, 0.0019019073806703091, 0.0027871550992131233, 0.0024727294221520424, 0.0017429144354537129, 0.00082917010877281427, 0.0011364785023033619, 0.0017504002898931503, 0.0016058061737567186, 0.002315970603376627, 0.0015131892869248986, 0.0017876570345833898, 0.0020396437030285597, 0.002278635511174798, 0.0017431011656299233, 0.0014950437471270561, 0.0014681159518659115, 0.0021800140384584665, 0.0031583011150360107, 0.0023741072509437799, 0.001071578124538064, 0.0017255030106753111, 0.0012001292780041695, 0.0017554372316226363, 0.003215947886928916, 0.0023219406139105558, 0.0022711309138685465, 0.0015204112278297544, 0.0015598608879372478, 0.0013371590757742524, 0.0027279674541205168, 0.0021016721148043871, 0.0019895690493285656, 0.0014350309502333403, 0.0018689600983634591, 0.0015799049288034439, 0.0014913550112396479, } };
const TfArray<48, int> quant66_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const ALIGN(8) int8_t tensor_data67[8*1*1*48] = {
  /* [0][0][][] */ 51,-124,-21,53,15,-38,-4,-20,19,-9,-22,-35,-71,-6,16,61,2,-77,38,-37,22,10,-26,16,-93,-41,15,-127,-18,37,13,3,-16,81,44,21,-29,4,21,50,-32,-35,-27,32,28,0,58,40,
  /* [1][0][][] */ 10,10,44,24,-6,11,12,14,-18,127,-45,-11,56,41,-56,-81,-38,87,0,106,29,72,74,22,61,25,-67,-85,-39,-59,-53,6,17,-48,46,-18,-8,-42,-4,-45,57,51,-40,45,-73,-30,-70,-61,
  /* [2][0][][] */ 0,127,17,49,7,31,43,-40,3,43,-39,-11,51,-2,-3,-43,19,84,-33,37,2,-26,95,39,-70,4,-33,-42,-5,-8,-29,-53,-44,-49,-13,18,20,15,-1,-18,38,26,11,13,48,33,-58,-2,
  /* [3][0][][] */ -100,-81,8,-54,63,91,68,104,46,57,32,39,3,-67,-29,-56,-80,125,-49,78,18,-47,-127,-7,90,8,-4,-39,8,-42,-36,-3,38,-64,-64,-58,-114,-62,-23,-24,47,5,-46,-49,30,68,-73,-68,
  /* [4][0][][] */ -127,-79,37,47,40,11,14,41,-33,-65,-30,-47,57,92,51,-104,103,50,63,75,-87,70,-42,-65,-7,7,-52,14,-6,-49,-88,-41,16,-90,-11,37,12,83,-44,-83,69,20,23,8,78,5,-91,62,
  /* [5][0][][] */ 9,-127,-5,69,18,-26,20,-2,-93,40,-16,26,60,-33,6,-46,62,39,110,50,16,68,8,38,44,-52,5,-48,15,26,-72,87,-46,13,1,-6,-16,12,-22,16,-3,-9,-39,41,-34,33,28,-9,
  /* [6][0][][] */ -68,8,-53,40,-68,-53,15,-6,-37,-76,45,-5,-19,64,28,74,-15,-115,-14,-32,-122,26,-26,-19,-48,29,57,-127,42,13,2,42,-19,32,-16,-28,-2,-2,-7,48,-63,-27,-42,13,-5,2,64,8,
  /* [7][0][][] */ -115,-14,-59,87,25,37,98,-109,70,59,13,-95,10,-3,107,37,88,18,-3,65,20,-57,54,-45,75,-62,-2,1,-45,6,58,35,-127,36,72,40,-65,17,37,-9,40,-19,-11,63,121,107,51,1,
};
const TfArray<4, int> tensor_dimension67 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant67_scale = { 8, { 0.005941467359662056, 0.0034853138495236635, 0.0078889150172472, 0.0040555321611464024, 0.0041966992430388927, 0.0060039553791284561, 0.0041100154630839825, 0.0037763239815831184, } };
const TfArray<8, int> quant67_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const ALIGN(8) int8_t tensor_data68[48*1*1*8] = {
  /* [0][0][][] */ -127,26,101,8,59,-113,32,121,
  /* [1][0][][] */ 61,53,62,127,3,-8,108,23,
  /* [2][0][][] */ 36,-29,32,-120,-53,51,-51,-127,
  /* [3][0][][] */ 73,14,127,7,-95,-97,-11,81,
  /* [4][0][][] */ 127,62,101,27,-43,-8,11,-95,
  /* [5][0][][] */ 92,85,127,79,-83,-127,-21,20,
  /* [6][0][][] */ -8,127,-43,98,-16,13,80,-9,
  /* [7][0][][] */ 3,21,112,-9,44,-84,127,-9,
  /* [8][0][][] */ 127,-38,11,7,-40,-114,0,45,
  /* [9][0][][] */ 5,18,30,9,-48,-10,-20,127,
  /* [10][0][][] */ -15,75,-86,-127,117,26,-53,-73,
  /* [11][0][][] */ -60,-57,42,16,-15,-56,127,57,
  /* [12][0][][] */ 61,54,94,91,56,20,-26,-127,
  /* [13][0][][] */ -8,127,-34,-98,23,-60,18,-22,
  /* [14][0][][] */ 127,10,91,-5,22,-84,27,-15,
  /* [15][0][][] */ -127,19,-17,24,47,81,-3,-11,
  /* [16][0][][] */ 2,31,-30,-127,33,-30,9,115,
  /* [17][0][][] */ -57,93,-127,56,122,-53,-33,-56,
  /* [18][0][][] */ -127,-71,-96,-25,44,2,-12,91,
  /* [19][0][][] */ -28,127,-14,-90,-6,-37,42,7,
  /* [20][0][][] */ 127,24,85,54,-94,-53,-2,1,
  /* [21][0][][] */ 29,100,111,65,-96,-50,127,-76,
  /* [22][0][][] */ -68,-33,-4,-11,127,18,-125,-20,
  /* [23][0][][] */ -13,-22,-49,83,-44,-127,-33,-2,
  /* [24][0][][] */ -127,96,108,88,42,21,-64,-17,
  /* [25][0][][] */ -81,-100,-44,-20,103,-17,-127,72,
  /* [26][0][][] */ 31,84,3,-127,-62,106,26,-75,
  /* [27][0][][] */ -50,6,-48,-70,39,22,127,55,
  /* [28][0][][] */ -112,54,-43,-99,-86,98,127,127,
  /* [29][0][][] */ 16,-127,24,108,-11,52,-26,9,
  /* [30][0][][] */ 61,89,-109,9,-45,124,73,-127,
  /* [31][0][][] */ 8,18,57,-77,49,127,38,3,
  /* [32][0][][] */ 14,20,-3,53,36,4,-127,27,
  /* [33][0][][] */ 97,127,38,17,39,-27,76,-11,
  /* [34][0][][] */ -63,11,22,-19,-127,24,19,-46,
  /* [35][0][][] */ 121,-127,-126,-71,-75,-14,60,13,
  /* [36][0][][] */ -44,60,20,34,49,1,22,-127,
  /* [37][0][][] */ 68,-5,-16,28,127,-29,-8,48,
  /* [38][0][][] */ 74,64,-37,-27,13,66,-127,-55,
  /* [39][0][][] */ 1,-17,-30,-16,49,12,23,-127,
  /* [40][0][][] */ 77,-54,-25,96,36,93,-97,-127,
  /* [41][0][][] */ -33,-5,-9,118,-99,127,47,-21,
  /* [42][0][][] */ -2,22,104,-7,43,-89,127,-7,
  /* [43][0][][] */ 40,-6,-53,98,-8,53,127,-41,
  /* [44][0][][] */ -53,97,127,-69,87,54,67,-34,
  /* [45][0][][] */ -6,-127,39,-83,13,-28,-70,9,
  /* [46][0][][] */ -3,-76,-34,-28,43,62,-127,-44,
  /* [47][0][][] */ -7,-31,-97,9,-36,99,-127,10,
};
const TfArray<4, int> tensor_dimension68 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant68_scale = { 48, { 0.0013336049159988761, 0.0022884542122483253, 0.0020328855607658625, 0.0012879610294476151, 0.0021768512669950724, 0.0011947154998779297, 0.0017356902826577425, 0.0021451988723129034, 0.0012896734988316894, 0.0024853530339896679, 0.0017771485727280378, 0.0024674185551702976, 0.0010853325948119164, 0.0021859135013073683, 0.0018782911356538534, 0.0016000976320356131, 0.0022020393516868353, 0.0017153427470475435, 0.0021069464273750782, 0.0022208644077181816, 0.0017160223796963692, 0.001442232052795589, 0.00095394061645492911, 0.0017771500861272216, 0.00088276452152058482, 0.0022218194790184498, 0.001951159443706274, 0.0017696035793051124, 0.0014304399956017733, 0.0021442836150527, 0.0012344681890681386, 0.0017478874651715159, 0.0028142218943685293, 0.0027494977694004774, 0.0034418466966599226, 0.00081317353760823607, 0.0018645381787791848, 0.0031519448384642601, 0.0023640741128474474, 0.002473537577316165, 0.0015355872455984354, 0.0015627649845555425, 0.0020908513106405735, 0.0016601027455180883, 0.00091982475714758039, 0.0018473985837772489, 0.0027976017445325851, 0.0020649433135986328, } };
const TfArray<48, int> quant68_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const ALIGN(8) int8_t tensor_data69[8*1*1*48] = {
  /* [0][0][][] */ -43,29,-31,-29,30,-10,19,-85,-20,40,-4,-127,-8,-65,-25,51,-5,-14,-20,1,22,-34,-38,-79,108,33,-4,7,-27,42,2,74,95,9,-32,-70,-17,16,89,-21,-28,4,99,39,-6,-25,-14,78,
  /* [1][0][][] */ 33,-1,-21,53,-38,1,-8,-53,20,37,-16,-28,6,-7,7,-36,-27,-11,24,9,9,4,14,127,12,13,14,38,6,9,13,-114,17,-28,25,26,4,-10,26,-22,7,-25,56,-13,59,8,9,35,
  /* [2][0][][] */ 16,-41,3,-40,-127,27,10,-28,-63,-30,0,45,-6,-6,-28,96,-8,6,68,-17,-29,-18,8,-18,81,28,-10,-8,-6,8,19,15,-27,-52,34,-63,21,-42,-32,17,-27,-8,26,1,8,8,13,22,
  /* [3][0][][] */ -29,-94,-27,18,-1,-8,-52,-32,12,-7,-26,-36,-20,66,5,-36,53,0,16,3,5,22,-8,-69,-89,3,-5,-57,15,-28,4,53,11,-9,44,24,-50,-66,32,4,38,4,46,-22,20,127,-11,39,
  /* [4][0][][] */ -7,-30,-1,21,94,-4,14,18,-39,61,-4,2,-10,64,-4,18,13,-10,-67,-13,34,5,5,-2,127,-49,-7,19,-6,-41,7,14,4,25,81,-50,19,-118,3,-41,2,1,-21,-5,-20,-38,54,-27,
  /* [5][0][][] */ 18,-1,19,15,-20,-46,2,9,-8,127,-10,22,7,17,14,30,40,-6,25,22,5,-7,-27,-16,21,19,-1,-2,27,-1,18,21,11,-13,-15,-1,-53,23,-30,-75,-3,-9,-2,-11,1,8,3,-5,
  /* [6][0][][] */ 2,-22,-14,7,43,6,-70,34,-4,-31,9,12,12,-55,15,-2,-25,-25,-21,33,8,16,-14,-15,59,16,15,23,6,59,5,21,11,-41,21,-24,19,-29,-7,4,-5,0,-26,-8,-32,127,3,-17,
  /* [7][0][][] */ 49,-61,32,-45,-18,21,-34,16,6,-75,-9,-61,53,127,-11,23,37,39,-29,-30,-46,-38,-52,83,124,44,36,6,-62,-74,5,-66,32,-18,-56,-41,109,86,65,24,50,-10,-45,-59,-21,49,-10,-29,
};
const TfArray<4, int> tensor_dimension69 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant69_scale = { 8, { 0.0043901768513023853, 0.0063390149734914303, 0.0058535989373922348, 0.0052521377801895142, 0.0046737696975469589, 0.0069012199528515339, 0.0072245919145643711, 0.0037454671692103148, } };
const TfArray<8, int> quant69_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const ALIGN(8) int8_t tensor_data70[48*1*1*8] = {
  /* [0][0][][] */ -95,-87,-127,58,-8,80,35,2,
  /* [1][0][][] */ 35,64,-101,-85,70,22,-127,-52,
  /* [2][0][][] */ 10,10,-127,-11,49,-31,-26,-68,
  /* [3][0][][] */ -127,-43,62,-1,33,41,-3,-126,
  /* [4][0][][] */ -99,-54,38,57,3,-104,-36,-127,
  /* [5][0][][] */ 46,-19,114,10,-32,-30,-9,-127,
  /* [6][0][][] */ 45,62,127,40,-77,51,-18,-101,
  /* [7][0][][] */ 49,-11,-51,17,-79,13,-60,127,
  /* [8][0][][] */ -127,61,-30,99,-92,-84,-43,-124,
  /* [9][0][][] */ -83,12,46,-127,-4,27,26,-56,
  /* [10][0][][] */ -27,21,52,31,-14,-127,37,53,
  /* [11][0][][] */ -30,-85,57,127,-117,-72,36,27,
  /* [12][0][][] */ -94,-40,-80,8,-50,27,81,127,
  /* [13][0][][] */ 36,46,28,127,-13,-55,8,71,
  /* [14][0][][] */ 75,48,-55,-24,118,-72,-77,-127,
  /* [15][0][][] */ 89,-9,-57,127,8,-6,-25,62,
  /* [16][0][][] */ -127,31,-31,-21,-36,-37,17,54,
  /* [17][0][][] */ 70,127,34,41,-40,-2,-86,-51,
  /* [18][0][][] */ -84,-99,92,-16,74,15,-127,9,
  /* [19][0][][] */ -19,-86,127,-43,48,11,107,106,
  /* [20][0][][] */ 8,-127,-62,-50,5,6,42,-61,
  /* [21][0][][] */ 80,60,-124,4,101,-127,81,70,
  /* [22][0][][] */ 94,118,43,64,-97,53,-127,-86,
  /* [23][0][][] */ 108,-24,34,-47,-35,-52,-71,-127,
  /* [24][0][][] */ -33,40,127,79,-68,-10,-7,-44,
  /* [25][0][][] */ -69,-56,3,46,127,-51,-66,92,
  /* [26][0][][] */ -1,-39,-127,75,19,58,119,32,
  /* [27][0][][] */ 74,-71,127,37,-28,14,-67,-102,
  /* [28][0][][] */ -65,25,111,9,-9,-41,-127,6,
  /* [29][0][][] */ -100,-115,84,58,-57,-80,-51,-127,
  /* [30][0][][] */ -36,-32,42,97,53,29,-127,2,
  /* [31][0][][] */ 21,-64,-127,-16,-34,1,79,16,
  /* [32][0][][] */ -57,-91,-38,125,66,17,-83,127,
  /* [33][0][][] */ -24,-49,-127,-42,65,-19,43,18,
  /* [34][0][][] */ 78,-10,-72,-72,3,-127,90,95,
  /* [35][0][][] */ 127,43,-37,59,-19,32,64,125,
  /* [36][0][][] */ 50,-37,-78,-1,121,-127,-11,-119,
  /* [37][0][][] */ -32,-59,-53,-102,91,10,127,64,
  /* [38][0][][] */ 15,-7,-48,-22,34,127,-41,8,
  /* [39][0][][] */ 78,35,-20,-16,-118,54,127,-7,
  /* [40][0][][] */ -16,16,127,-14,-57,54,-69,-49,
  /* [41][0][][] */ -45,-52,-53,-127,-51,-28,-12,-108,
  /* [42][0][][] */ -33,127,-41,-1,-8,71,58,-42,
  /* [43][0][][] */ 30,-41,120,20,-55,-61,-127,-69,
  /* [44][0][][] */ 2,13,-21,-17,-9,127,12,36,
  /* [45][0][][] */ -25,37,127,55,5,-38,-56,-9,
  /* [46][0][][] */ 38,26,-127,-3,94,-76,70,31,
  /* [47][0][][] */ -127,-26,60,-48,50,107,-20,36,
};
const TfArray<4, int> tensor_dimension70 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant70_scale = { 48, { 0.0016611885512247682, 0.0010006291558966041, 0.0013346672058105469, 0.0031045733485370874, 0.00169535749591887, 0.0018059842986986041, 0.0024309726431965828, 0.0033926998730748892, 0.001761226449161768, 0.0032773041166365147, 0.003234317060559988, 0.0012706340057775378, 0.00095401762519031763, 0.0034143435768783092, 0.0025462259072810411, 0.0031634680926799774, 0.0031121538486331701, 0.00067024712916463614, 0.0021546962670981884, 0.0015462167793884873, 0.0011183599708601832, 0.0022195081692188978, 0.0019272202625870705, 0.00218400196172297, 0.000950056710280478, 0.002355785109102726, 0.002389922272413969, 0.00095741928089410067, 0.0010675217490643263, 0.0022898325696587563, 0.0029776780866086483, 0.002324261236935854, 0.0025297687388956547, 0.0031284333672374487, 0.0015498083084821701, 0.001821742276661098, 0.0026608665939420462, 0.0018259786302223802, 0.0039041668642312288, 0.0030218863394111395, 0.0032993904314935207, 0.0019115031464025378, 0.0022035229485481977, 0.0010848445817828178, 0.0020451962482184172, 0.001457691309042275, 0.002918030833825469, 0.0028794603422284126, } };
const TfArray<48, int> quant70_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const ALIGN(8) int8_t tensor_data71[8*1*1*48] = {
  /* [0][0][][] */ 127,46,18,-32,37,-56,21,-38,-41,113,19,-61,-48,-20,15,-96,43,82,17,-26,56,28,29,56,21,-26,-5,-96,46,-65,-7,18,29,-30,33,86,-8,-7,-21,-34,-1,7,-64,-41,7,7,7,64,
  /* [1][0][][] */ -14,85,16,-1,-55,47,-80,-5,69,-13,-56,-35,34,17,-1,-8,-21,127,40,14,-8,35,63,-12,-98,-14,-12,103,7,-43,-2,2,-22,-58,-47,14,19,5,-6,-22,28,47,74,60,10,-9,7,0,
  /* [2][0][][] */ 45,-85,76,-7,11,-14,-18,14,-106,-32,13,25,-36,13,-31,28,44,13,-32,44,43,-40,9,20,-54,19,-20,-25,-51,11,-8,26,25,-46,-8,-20,33,-14,17,-6,44,19,-38,-47,-19,-127,35,-35,
  /* [3][0][][] */ -28,-76,-19,3,-1,11,-29,25,-2,127,50,73,-4,45,-5,-91,22,28,30,0,21,15,16,-4,-42,4,17,7,19,54,21,-2,12,-16,19,44,-14,-20,12,25,-12,37,9,9,-15,-56,0,8,
  /* [4][0][][] */ 21,101,-15,4,-6,-24,21,16,-81,53,12,-67,32,-36,64,-6,49,14,-33,40,-72,24,-64,7,56,127,16,-20,-2,-47,-2,-38,29,53,11,24,-26,27,13,47,15,69,-32,-28,28,56,-7,-5,
  /* [5][0][][] */ -58,22,-21,18,-3,-45,-13,-24,27,-43,-1,-40,38,-16,6,24,4,-3,-10,-37,15,-44,21,-35,23,40,36,-75,36,-17,13,-72,33,-17,25,56,8,45,-67,12,46,60,12,-18,127,53,63,-97,
  /* [6][0][][] */ -41,-127,-3,-2,31,-29,-17,-39,-18,-48,-7,19,52,-8,10,26,-3,-75,24,8,8,20,-25,-21,-80,-15,41,18,91,-14,-42,-52,-41,31,-29,10,-14,27,8,-12,-31,22,-4,37,19,48,-19,45,
  /* [7][0][][] */ -25,-55,85,-22,71,-4,37,-64,104,0,-34,24,55,56,-47,-18,-14,-85,-107,37,27,-4,-44,-93,-54,70,-9,22,-89,-71,6,32,43,-36,-97,104,44,37,-31,-18,-13,57,-127,-76,38,-96,-19,53,
};
const TfArray<4, int> tensor_dimension71 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant71_scale = { 8, { 0.0027735689654946327, 0.0033480608835816383, 0.0048927897587418556, 0.0038173629436641932, 0.0025933561846613884, 0.0034756571985781193, 0.0043172752484679222, 0.002213427796959877, } };
const TfArray<8, int> quant71_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant71 = { (TfLiteFloatArray*)&quant71_scale, (TfLiteIntArray*)&quant71_zero, 0 };
const ALIGN(8) int8_t tensor_data72[48*1*1*8] = {
  /* [0][0][][] */ -92,-113,47,47,1,-127,-40,-86,
  /* [1][0][][] */ 34,-50,-110,37,58,-127,7,-30,
  /* [2][0][][] */ -5,29,-17,26,-109,1,127,30,
  /* [3][0][][] */ 49,127,-47,-58,58,-2,25,65,
  /* [4][0][][] */ 26,59,16,-18,-15,26,90,-127,
  /* [5][0][][] */ -34,-53,33,-127,31,32,-94,28,
  /* [6][0][][] */ 2,98,120,63,-39,127,76,-2,
  /* [7][0][][] */ 65,-19,-45,70,-69,-127,119,3,
  /* [8][0][][] */ -25,44,127,40,-123,105,76,123,
  /* [9][0][][] */ 20,-3,-22,12,43,127,23,-45,
  /* [10][0][][] */ -127,85,63,-79,90,1,-79,-111,
  /* [11][0][][] */ 127,-29,115,-100,17,-35,4,83,
  /* [12][0][][] */ 121,-78,41,-127,122,66,36,-40,
  /* [13][0][][] */ -22,80,-104,-87,44,-53,119,127,
  /* [14][0][][] */ -3,-84,-19,3,12,-29,1,127,
  /* [15][0][][] */ -35,-23,-16,-3,-1,127,65,58,
  /* [16][0][][] */ 118,6,-80,-127,85,-23,50,85,
  /* [17][0][][] */ 64,114,127,69,-67,58,-57,-56,
  /* [18][0][][] */ -53,127,-4,35,55,55,-64,-40,
  /* [19][0][][] */ 50,11,-70,12,52,127,34,-91,
  /* [20][0][][] */ -23,29,-127,-9,3,11,108,15,
  /* [21][0][][] */ -112,-50,107,-31,-24,-78,32,127,
  /* [22][0][][] */ 122,13,-127,-26,60,-29,-45,-30,
  /* [23][0][][] */ 43,127,39,13,-12,4,-53,-61,
  /* [24][0][][] */ -127,-122,-45,-112,61,111,-118,51,
  /* [25][0][][] */ 16,-61,21,-105,-127,-53,-41,-92,
  /* [26][0][][] */ 27,94,127,-8,-57,-21,-20,-22,
  /* [27][0][][] */ -56,-47,-20,64,71,-5,-37,127,
  /* [28][0][][] */ -36,30,-127,30,-70,-73,-27,8,
  /* [29][0][][] */ -127,-70,-19,-67,-35,85,57,36,
  /* [30][0][][] */ -59,76,-73,-52,-19,127,9,-4,
  /* [31][0][][] */ 96,-86,124,-59,105,58,53,127,
  /* [32][0][][] */ -3,33,-68,-40,49,127,-45,-107,
  /* [33][0][][] */ 27,-31,-17,47,-91,-31,0,127,
  /* [34][0][][] */ -47,9,-127,12,-7,-13,-33,59,
  /* [35][0][][] */ -89,89,127,-8,64,-126,-64,-100,
  /* [36][0][][] */ 92,-74,-106,26,-116,-45,-42,127,
  /* [37][0][][] */ -63,-48,19,14,127,-55,-92,78,
  /* [38][0][][] */ -7,-9,48,109,80,-127,60,-52,
  /* [39][0][][] */ 126,37,-26,80,-127,-12,54,-97,
  /* [40][0][][] */ -6,-127,-9,-50,109,44,-61,65,
  /* [41][0][][] */ 14,-4,48,-89,76,-127,24,69,
  /* [42][0][][] */ -86,-36,68,-57,61,-2,13,-127,
  /* [43][0][][] */ 23,22,1,127,6,27,-21,2,
  /* [44][0][][] */ -45,7,-53,13,15,127,-56,23,
  /* [45][0][][] */ -61,23,78,115,59,127,-109,-24,
  /* [46][0][][] */ -127,-83,37,-126,6,-115,-30,-113,
  /* [47][0][][] */ -14,-62,-93,46,-127,73,38,97,
};
const TfArray<4, int> tensor_dimension72 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant72_scale = { 48, { 0.0025967222172766924, 0.003441341919824481, 0.0030822006519883871, 0.0036377701908349991, 0.0029146918095648289, 0.0026341830380260944, 0.0021383280400186777, 0.0024306951090693474, 0.0023248011711984873, 0.0037019858136773109, 0.0014066982548683882, 0.0015000862767919898, 0.0016827273648232222, 0.001834942027926445, 0.0019367175409570336, 0.0029840243514627218, 0.0015103050973266363, 0.0024596408475190401, 0.00059601990506052971, 0.0017209878424182534, 0.0022337266709655523, 0.0012232443550601602, 0.0018407920142635703, 0.0030672000721096992, 0.0022281382698565722, 0.0011439403751865029, 0.0030678436160087585, 0.0025977904442697763, 0.0022144918330013752, 0.003032271983101964, 0.002318789716809988, 0.0011927980231121182, 0.0027129407972097397, 0.0031241723336279392, 0.0030807559378445148, 0.0015551457181572914, 0.0027321465313434601, 0.0021225523669272661, 0.0031695938669145107, 0.0023131552152335644, 0.00225663254968822, 0.0014740537153556943, 0.0020775869488716125, 0.0029772203415632248, 0.0027365977875888348, 0.0019056220771744847, 0.0023249124642461538, 0.0022491500712931156, } };
const TfArray<48, int> quant72_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant72 = { (TfLiteFloatArray*)&quant72_scale, (TfLiteIntArray*)&quant72_zero, 0 };
const ALIGN(8) int8_t tensor_data73[8*1*1*48] = {
  /* [0][0][][] */ 24,38,-29,-9,6,-6,-14,-45,28,12,61,-47,1,-18,36,31,-80,21,18,4,21,-6,45,-9,43,16,-1,8,3,-53,10,-127,-29,-36,-53,23,-5,93,4,-19,9,-54,36,8,21,73,31,-34,
  /* [1][0][][] */ 51,-62,39,-57,34,-9,24,3,-59,11,-27,24,-3,14,47,1,106,7,-127,-18,-16,54,-23,-39,47,-58,53,-45,-10,19,3,103,-8,-34,44,0,3,51,3,-62,-32,69,28,8,-35,-36,18,33,
  /* [2][0][][] */ -26,-64,-21,7,14,38,53,-7,-74,56,-49,-65,-52,-48,-62,-70,26,73,81,-99,127,29,-45,-6,47,-24,54,-39,-49,23,-67,-102,-10,0,-64,-87,57,-41,11,2,9,-3,-63,3,-22,7,18,-82,
  /* [3][0][][] */ -22,33,9,39,30,-36,27,-40,-13,16,30,40,19,-27,75,50,-44,29,127,-16,-51,-8,-16,14,-4,-123,-5,62,-22,-44,-42,58,-36,-90,39,26,25,-16,-44,1,-16,-90,8,15,71,-45,19,22,
  /* [4][0][][] */ 9,21,-22,3,4,24,10,-8,65,-21,-36,-38,-61,0,-63,-5,-17,-16,-54,20,19,-18,46,-2,-13,-70,-39,9,-42,-4,-2,-55,-10,-11,-22,-32,44,-127,-28,24,31,31,-57,44,-28,-29,-19,-37,
  /* [5][0][][] */ 40,-42,-8,-32,33,58,127,34,-37,-49,32,-17,18,45,-31,-25,22,0,6,68,-27,-19,15,-1,-24,-9,-29,105,-84,60,74,-19,64,62,-14,48,18,-45,-21,31,42,-22,19,0,-19,-25,3,9,
  /* [6][0][][] */ 37,8,58,-34,105,-38,84,-127,-14,-57,42,-70,-39,65,69,-13,-39,30,-23,76,-77,-40,14,19,125,26,-26,-8,-51,36,-5,-35,-1,52,-75,2,66,79,-94,-69,-50,-36,-48,41,-5,23,2,11,
  /* [7][0][][] */ 91,-11,1,-43,-109,66,-32,32,-61,14,44,-16,-15,127,73,-48,26,-70,-52,-2,38,-124,18,57,-88,-66,41,40,43,18,-96,-68,-13,-3,10,-15,-103,-98,-6,33,38,-38,88,87,-70,-16,48,29,
};
const TfArray<4, int> tensor_dimension73 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant73_scale = { 8, { 0.002525565680116415, 0.0024411710910499096, 0.0018962997710332274, 0.0021094838157296181, 0.0029295163694769144, 0.0018618527101352811, 0.0016352439997717738, 0.0020558163523674011, } };
const TfArray<8, int> quant73_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant73 = { (TfLiteFloatArray*)&quant73_scale, (TfLiteIntArray*)&quant73_zero, 0 };
const ALIGN(8) int8_t tensor_data74[48*1*1*8] = {
  /* [0][0][][] */ 73,55,-84,-36,94,127,1,-41,
  /* [1][0][][] */ 127,42,-18,66,-42,-83,3,-11,
  /* [2][0][][] */ -16,-27,-20,50,39,11,-83,127,
  /* [3][0][][] */ -51,125,-40,76,-76,-127,40,97,
  /* [4][0][][] */ -51,-34,40,-85,3,-56,-127,-55,
  /* [5][0][][] */ -102,-32,-36,-127,95,53,60,51,
  /* [6][0][][] */ -76,-13,36,-127,33,26,57,-84,
  /* [7][0][][] */ 106,68,13,-48,-109,-17,127,-36,
  /* [8][0][][] */ -54,-32,-20,54,77,127,-102,101,
  /* [9][0][][] */ -27,5,27,7,-30,-27,127,-6,
  /* [10][0][][] */ -119,-15,127,66,-125,-66,-85,-125,
  /* [11][0][][] */ -89,127,-5,100,-77,39,-38,-14,
  /* [12][0][][] */ 69,-102,-107,-55,127,-33,65,43,
  /* [13][0][][] */ 73,30,104,-127,94,-22,11,-49,
  /* [14][0][][] */ -19,-11,41,-81,-15,-50,-127,-67,
  /* [15][0][][] */ 106,106,64,82,-127,-63,-12,8,
  /* [16][0][][] */ -49,-83,-66,127,-59,106,91,66,
  /* [17][0][][] */ 70,-50,-101,47,65,-127,55,92,
  /* [18][0][][] */ 0,127,21,-55,-7,-1,0,-2,
  /* [19][0][][] */ -62,-127,-2,6,-44,-52,-56,-68,
  /* [20][0][][] */ -55,6,-46,-6,14,17,29,127,
  /* [21][0][][] */ 32,26,-22,37,18,70,70,127,
  /* [22][0][][] */ -78,-7,-16,12,25,17,127,109,
  /* [23][0][][] */ -11,-47,-119,-127,100,-85,-58,-82,
  /* [24][0][][] */ -55,78,-127,-12,-13,-8,28,-16,
  /* [25][0][][] */ 103,-126,-7,-127,-83,6,96,-9,
  /* [26][0][][] */ 115,56,-127,23,64,-127,-5,61,
  /* [27][0][][] */ 95,72,-33,127,3,-99,78,18,
  /* [28][0][][] */ -17,13,44,-9,24,127,47,40,
  /* [29][0][][] */ 61,-23,-19,-59,-127,31,5,39,
  /* [30][0][][] */ 127,64,-59,-1,4,45,-115,-11,
  /* [31][0][][] */ 46,-17,54,-127,115,-107,87,82,
  /* [32][0][][] */ 43,-44,127,54,22,-3,-45,-18,
  /* [33][0][][] */ 27,-12,-21,7,32,127,-10,-73,
  /* [34][0][][] */ -15,90,124,51,-127,81,40,82,
  /* [35][0][][] */ -21,3,-127,-27,41,25,70,36,
  /* [36][0][][] */ -63,27,19,61,127,-27,-8,-33,
  /* [37][0][][] */ -127,-41,22,-73,44,84,-5,18,
  /* [38][0][][] */ 19,24,-17,-127,-8,-7,17,-23,
  /* [39][0][][] */ -21,-108,-127,-98,33,-46,111,29,
  /* [40][0][][] */ 100,-127,116,-25,82,60,39,73,
  /* [41][0][][] */ 0,-20,-125,22,10,43,127,48,
  /* [42][0][][] */ -104,-24,-81,-6,-49,60,-39,127,
  /* [43][0][][] */ 1,-69,-71,23,127,-13,53,-14,
  /* [44][0][][] */ -66,-106,-127,-74,53,-23,73,43,
  /* [45][0][][] */ -112,63,52,-61,-8,-113,52,127,
  /* [46][0][][] */ -13,-15,-71,-37,-12,-71,127,-102,
  /* [47][0][][] */ 75,-93,-12,-120,-62,70,47,127,
};
const TfArray<4, int> tensor_dimension74 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant74_scale = { 48, { 0.0029256823472678661, 0.0032738950103521347, 0.003638735506683588, 0.00089328794274479151, 0.0019948552362620831, 0.0021412626374512911, 0.0023145405575633049, 0.0030433181673288345, 0.0024139932356774807, 0.0013755573891103268, 0.0019719116389751434, 0.0021820401307195425, 0.0021619831677526236, 0.00082760007353499532, 0.0024154302664101124, 0.0022614409681409597, 0.0017120722914114594, 0.0021275719627737999, 0.0033674105070531368, 0.00095824751770123839, 0.0014008788857609034, 0.0029449060093611479, 0.0029329617973417044, 0.0024024306330829859, 0.0027033847291022539, 0.0017247006762772799, 0.0025937750469893217, 0.0018589890096336603, 0.0037510120309889317, 0.005217431578785181, 0.0036414675414562225, 0.0014464741107076406, 0.0028850587550550699, 0.001841012155637145, 0.002483706921339035, 0.0015222225338220596, 0.005027534905821085, 0.0030762418173253536, 0.001511868555098772, 0.0017736192094162107, 0.0017005709232762456, 0.0024079810827970505, 0.0021487446501851082, 0.0034445067867636681, 0.0023294065613299608, 0.00084003346273675561, 0.0023258887231349945, 0.0025694966316223145, } };
const TfArray<48, int> quant74_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant74 = { (TfLiteFloatArray*)&quant74_scale, (TfLiteIntArray*)&quant74_zero, 0 };
const ALIGN(8) int8_t tensor_data75[16*1*1*48] = {
  /* [0][0][][] */ -11,-41,-1,-27,-6,69,-53,-28,-7,99,15,-10,-28,7,7,-100,68,-77,-37,10,22,-30,-61,-24,-48,13,16,-121,36,-23,-24,0,-20,-27,51,-1,12,-41,127,-14,33,12,-16,-3,21,11,33,0,
  /* [1][0][][] */ 2,23,23,50,49,47,25,16,-10,41,-29,37,23,-70,-49,-115,-46,-62,-23,-42,-83,-70,-42,-31,115,1,31,51,56,-37,-21,39,-18,117,-44,-50,33,68,18,-58,100,-58,-79,-95,-119,-64,127,40,
  /* [2][0][][] */ -30,-12,-26,67,-64,-36,35,21,-3,-63,-17,50,-50,-89,45,-15,-70,-1,-41,79,-97,19,-10,-11,-44,-13,-38,-32,0,-23,0,11,3,68,44,-82,-14,-39,-76,-4,127,92,31,37,14,21,-28,2,
  /* [3][0][][] */ -45,-19,-26,30,72,50,53,44,49,-43,37,-4,36,28,-37,-30,56,-9,16,63,5,16,61,23,-33,-32,22,38,5,-24,30,-52,30,127,32,-3,33,-20,62,-21,5,-5,32,13,-9,-22,20,31,
  /* [4][0][][] */ -4,5,-90,54,-20,28,56,43,31,-127,46,3,-12,126,12,-65,101,-10,-12,125,43,-25,12,16,-28,-11,5,-68,43,-35,1,13,-56,-32,-25,-6,12,-4,-61,-19,-97,-33,3,2,-15,-103,8,-20,
  /* [5][0][][] */ -39,-24,7,127,7,16,-12,4,3,-66,72,-55,25,33,-7,-28,31,20,-39,-16,-66,-10,-38,-48,37,-9,-53,-26,-27,16,-28,104,-8,116,20,88,-53,-43,-42,21,-78,-18,15,27,45,43,22,-37,
  /* [6][0][][] */ -11,69,-1,-47,-24,-35,-30,52,15,21,-61,48,-2,-45,16,-11,-20,15,-6,-84,-25,18,54,15,86,-2,-12,-26,16,-83,3,21,-19,21,3,8,44,99,44,28,-41,-2,34,17,58,127,-43,9,
  /* [7][0][][] */ 21,-32,-34,-38,-7,4,-20,34,32,-71,-25,-29,35,-100,-2,16,-69,37,6,127,-97,-1,24,35,106,-18,-34,-16,-21,30,43,119,41,-73,14,71,-36,-72,107,-5,64,-58,38,89,-7,-29,12,-21,
  /* [8][0][][] */ 23,-20,51,10,11,-5,-23,-60,-63,61,-4,-30,-33,-1,3,35,-30,-28,3,127,13,-20,-80,-51,-7,37,-13,-15,-5,-83,-39,-45,-33,4,-33,33,78,-19,-36,38,-26,-9,-17,-13,63,1,12,-4,
  /* [9][0][][] */ -14,45,-32,-26,31,-37,39,4,-11,127,36,-31,37,-11,7,54,80,63,-27,16,-29,54,32,-7,-15,22,-31,18,-11,64,18,-99,64,40,-54,76,-39,65,-11,51,117,-17,25,21,86,-105,-30,9,
  /* [10][0][][] */ -34,-51,-46,12,57,56,-95,10,57,-63,-71,55,-68,52,-100,53,27,-22,-43,11,119,-67,63,14,83,23,-63,-111,-80,-69,-47,-55,-4,92,-67,26,-3,-43,-7,76,87,-90,-127,-34,107,-46,-89,34,
  /* [11][0][][] */ 27,59,55,-87,61,71,-53,-10,53,-32,45,-127,45,-9,-91,7,-54,27,99,-44,81,-35,16,55,-65,-14,8,-123,19,-38,11,-69,119,-77,59,104,33,12,-51,-15,49,-26,-29,24,-17,87,35,-17,
  /* [12][0][][] */ -47,2,20,27,38,67,-63,-9,-11,86,-8,13,3,7,-49,-67,4,-38,6,127,41,-49,8,-28,57,28,25,-79,74,56,-24,41,-41,57,70,-31,-59,2,-13,-7,-29,-36,-12,-40,-39,48,26,6,
  /* [13][0][][] */ 10,-41,-81,3,-5,9,12,49,76,127,-11,3,28,-28,12,-33,-38,-21,33,-74,10,-8,59,28,4,-40,18,-20,9,12,37,59,12,-75,23,19,-18,-78,-70,-12,-21,-5,-5,47,-3,41,11,-7,
  /* [14][0][][] */ 0,-13,-27,-42,-45,-44,-61,27,36,-64,50,-78,42,-11,12,9,-30,-23,-18,14,34,-19,80,58,-6,-30,17,-2,43,19,13,35,-25,-59,-127,25,-39,3,41,-42,55,-9,-21,-14,-82,64,1,-11,
  /* [15][0][][] */ 40,13,62,-63,43,98,57,53,19,-86,0,26,12,-60,13,-118,-26,-95,49,-66,-15,31,-7,-2,8,-31,127,24,31,108,83,-93,29,-8,61,-20,-49,-6,-28,-33,-16,30,72,113,58,12,88,86,
};
const TfArray<4, int> tensor_dimension75 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant75_scale = { 16, { 0.0099452603608369827, 0.0093745039775967598, 0.010553588159382343, 0.014466127380728722, 0.0090903621166944504, 0.0088930539786815643, 0.0067827305756509304, 0.0091994283720850945, 0.010293667204678059, 0.007640340831130743, 0.0081686936318874359, 0.0067562907934188843, 0.0086820237338542938, 0.010112222284078598, 0.011983294971287251, 0.007214544340968132, } };
const TfArray<16, int> quant75_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant75 = { (TfLiteFloatArray*)&quant75_scale, (TfLiteIntArray*)&quant75_zero, 0 };
const ALIGN(8) int8_t tensor_data76[1280*1*1*16] = {
  /* [0][0][][] */ -41,-69,-6,43,33,-127,39,73,88,-57,-23,43,39,-5,-119,24,
  /* [1][0][][] */ 88,98,9,6,68,115,-27,-84,-127,61,107,-73,58,5,43,83,
  /* [2][0][][] */ -66,28,-6,-2,-41,27,46,-53,-39,69,30,27,11,117,-9,-127,
  /* [3][0][][] */ 53,-20,127,-87,-41,-39,81,30,-51,38,0,-78,78,27,-3,7,
  /* [4][0][][] */ 86,98,109,-16,-45,11,65,38,-37,16,127,83,90,11,51,-73,
  /* [5][0][][] */ -50,-22,1,1,-35,-12,127,-70,-32,87,-29,15,46,-40,85,5,
  /* [6][0][][] */ 42,-4,-19,-21,38,67,25,-127,-74,-68,-10,-26,-15,11,26,-43,
  /* [7][0][][] */ 8,24,-15,-15,32,38,28,-104,-9,41,-104,78,-65,-76,-13,-127,
  /* [8][0][][] */ -32,-69,58,82,85,49,-30,-127,-100,56,22,-67,7,-66,15,-34,
  /* [9][0][][] */ 50,-20,25,-75,54,18,-30,11,-8,-30,-47,1,3,-127,-114,26,
  /* [10][0][][] */ -12,53,-83,32,27,38,116,6,58,5,32,12,95,-102,79,-127,
  /* [11][0][][] */ 100,-8,17,-16,-37,31,-7,-53,127,53,46,-39,-6,54,-17,-89,
  /* [12][0][][] */ -53,74,32,-127,-24,14,-36,-68,-34,0,-37,-4,-9,33,19,-38,
  /* [13][0][][] */ 8,-29,7,9,20,52,-40,-50,7,-22,41,-6,127,16,4,-97,
  /* [14][0][][] */ -11,127,11,-91,-102,36,-81,5,80,64,-19,69,19,68,49,-28,
  /* [15][0][][] */ -15,-25,56,29,3,-57,-81,-106,127,-47,81,-23,-98,109,-50,96,
  /* [16][0][][] */ -2,-37,127,-45,25,42,-1,35,-96,56,102,10,15,-31,40,-44,
  /* [17][0][][] */ -70,-19,-30,-24,6,-46,127,24,75,-17,39,16,7,47,64,-109,
  /* [18][0][][] */ 74,27,-50,127,51,-14,-63,17,-34,-18,-15,-19,83,105,78,2,
  /* [19][0][][] */ 87,-61,32,98,61,21,31,-24,14,27,103,-40,118,-5,-81,-127,
  /* [20][0][][] */ -119,-127,-8,-5,-22,23,70,-23,41,39,105,-12,68,28,43,47,
  /* [21][0][][] */ -1,-48,-10,2,36,16,127,43,-9,-19,-7,-4,-42,-45,22,29,
  /* [22][0][][] */ 65,8,127,-6,-18,28,-64,-15,-38,-120,-77,11,-34,29,-46,22,
  /* [23][0][][] */ 23,44,65,-117,127,69,7,47,-74,-22,26,89,70,65,-81,-121,
  /* [24][0][][] */ -111,54,48,-28,-11,40,-127,-42,-89,109,20,-14,44,93,12,61,
  /* [25][0][][] */ 20,18,-127,-14,26,67,-37,26,9,35,29,-42,-24,-13,-18,-25,
  /* [26][0][][] */ -9,-24,27,-3,29,35,-75,27,-127,-18,86,-5,44,-30,-37,21,
  /* [27][0][][] */ -4,-10,-12,-127,17,84,37,-2,-13,72,-4,-39,2,115,-52,-43,
  /* [28][0][][] */ -26,-65,87,-127,33,-63,82,31,124,-6,22,-47,-101,52,-66,19,
  /* [29][0][][] */ -30,-18,-25,41,3,13,79,-11,25,5,39,-30,127,25,21,-34,
  /* [30][0][][] */ 115,43,50,67,-127,-30,25,8,49,-65,33,-32,-29,39,30,-6,
  /* [31][0][][] */ 73,-24,47,58,19,127,7,84,13,-66,50,64,-27,-54,-28,40,
  /* [32][0][][] */ 50,22,-45,49,-99,-15,-18,1,-18,82,127,-5,49,-19,-118,-87,
  /* [33][0][][] */ -69,-55,-96,-9,-9,-40,59,-3,95,127,45,70,-58,42,17,23,
  /* [34][0][][] */ 11,22,0,-20,-13,46,-88,-53,2,-42,86,0,80,127,87,-16,
  /* [35][0][][] */ -127,28,54,-32,-1,-66,-22,-2,8,69,-53,-60,-46,-64,35,15,
  /* [36][0][][] */ -109,44,-14,11,62,-15,-127,24,15,-14,-27,1,-23,26,-38,-13,
  /* [37][0][][] */ -103,23,-28,74,55,-7,-6,-18,127,-44,-18,43,-2,-13,-14,56,
  /* [38][0][][] */ 27,-127,78,6,-41,2,-32,50,3,44,60,-46,118,10,7,-11,
  /* [39][0][][] */ -41,31,43,-35,-19,-32,7,-105,19,-127,-39,3,88,8,-18,24,
  /* [40][0][][] */ 1,-28,-89,-127,-73,-34,30,52,-66,33,101,36,81,-64,57,-15,
  /* [41][0][][] */ 20,-55,-15,127,-31,39,98,34,-6,31,5,74,-68,-17,7,-103,
  /* [42][0][][] */ 3,28,88,-39,-14,18,26,19,54,-50,-16,-35,-123,2,-15,-127,
  /* [43][0][][] */ 127,32,79,-60,-12,5,-46,-91,37,-7,-53,37,5,20,60,2,
  /* [44][0][][] */ -20,-73,26,-32,33,-50,127,-47,68,-36,63,37,10,99,-28,-86,
  /* [45][0][][] */ 5,106,19,-43,38,7,-68,-87,68,-32,-83,50,59,-63,-46,-127,
  /* [46][0][][] */ -18,48,-88,-61,-21,-36,-42,-56,97,43,106,51,-127,25,46,-15,
  /* [47][0][][] */ 4,1,37,126,-3,38,-3,-85,-127,31,-125,-12,-21,3,30,0,
  /* [48][0][][] */ 45,-5,-17,-52,-10,12,-127,39,53,60,47,-28,87,-28,-15,7,
  /* [49][0][][] */ 46,100,35,-55,17,-32,-35,-61,-6,-70,-102,60,-14,107,127,109,
  /* [50][0][][] */ 94,-38,-42,45,-82,-50,12,103,-55,-38,-26,-28,46,-11,-73,127,
  /* [51][0][][] */ -69,35,-102,16,-38,97,-81,-53,-26,11,88,127,-23,-57,-51,81,
  /* [52][0][][] */ 104,78,127,78,24,-4,86,81,-27,-119,15,72,-69,4,-40,33,
  /* [53][0][][] */ -59,58,-8,127,31,-14,24,11,-4,-26,35,97,-15,-61,13,-42,
  /* [54][0][][] */ -36,-72,-96,-127,62,125,-24,15,22,26,37,-73,58,-1,90,73,
  /* [55][0][][] */ 127,23,-15,-60,60,-19,-48,25,-111,72,-49,-19,44,11,3,-5,
  /* [56][0][][] */ -16,-52,57,50,6,28,-32,14,-27,44,29,-15,-42,127,-24,-1,
  /* [57][0][][] */ 38,-36,4,-37,115,11,8,39,60,127,31,-83,63,35,46,-45,
  /* [58][0][][] */ 24,26,11,-25,-60,-23,85,32,-56,127,-9,-72,-2,70,65,40,
  /* [59][0][][] */ -53,43,33,45,83,-76,6,-119,4,-65,39,91,-17,-73,127,-47,
  /* [60][0][][] */ -15,67,47,-127,-11,104,3,-94,11,32,-10,-127,33,-56,26,-47,
  /* [61][0][][] */ -127,-47,-14,-9,41,47,-25,-15,10,-103,53,-21,93,2,-21,69,
  /* [62][0][][] */ -38,17,-61,29,56,-68,54,103,-126,-86,-64,15,127,-72,44,39,
  /* [63][0][][] */ 30,-65,56,-16,-22,75,-5,-71,-5,-30,15,48,-10,-60,48,-127,
  /* [64][0][][] */ -92,25,83,-57,-52,17,60,-8,-73,-114,20,29,5,-126,-4,127,
  /* [65][0][][] */ -25,-1,125,-16,-9,-9,-9,-32,39,105,55,127,81,55,27,49,
  /* [66][0][][] */ 39,18,-7,-18,-127,4,14,47,39,57,50,44,39,-62,30,54,
  /* [67][0][][] */ 43,-25,34,-39,-5,36,61,-16,-56,-10,-23,44,1,90,-13,-127,
  /* [68][0][][] */ 127,85,50,95,8,41,-76,-126,-32,-77,-106,36,8,3,3,81,
  /* [69][0][][] */ 47,-34,-24,-38,46,-49,-73,-127,-4,-20,-15,-32,8,-9,55,44,
  /* [70][0][][] */ -3,92,109,82,44,2,-83,90,4,-90,-46,-39,113,8,49,127,
  /* [71][0][][] */ -70,61,-23,-31,43,-70,-14,-18,-21,-44,-127,54,75,-62,19,-32,
  /* [72][0][][] */ 63,-7,-9,36,114,-11,-49,23,-40,55,-12,61,-94,-66,-127,27,
  /* [73][0][][] */ 81,-27,10,-64,-40,12,12,-45,-38,21,73,36,85,-98,127,-76,
  /* [74][0][][] */ -80,-14,88,50,88,97,38,-51,25,118,-20,0,70,2,23,-127,
  /* [75][0][][] */ 51,-89,-2,44,36,-68,43,127,15,-48,-7,-30,-85,106,-13,-21,
  /* [76][0][][] */ 11,-8,127,-38,61,108,-94,-59,37,11,9,-70,42,-18,65,26,
  /* [77][0][][] */ -16,61,37,-48,-22,13,127,51,-31,-18,-57,42,-98,1,46,-32,
  /* [78][0][][] */ -14,-32,108,35,-22,127,-8,-99,-66,-35,-34,-3,-68,-5,-80,-48,
  /* [79][0][][] */ -42,-51,1,82,-92,-25,61,-22,-45,-35,-18,6,92,-53,24,-127,
  /* [80][0][][] */ -27,-44,46,33,6,-55,7,78,42,-127,63,1,47,-4,14,29,
  /* [81][0][][] */ 94,-48,-55,104,-23,-57,-127,114,33,-42,-64,-114,17,-46,31,-78,
  /* [82][0][][] */ 41,26,-127,-60,96,116,89,-113,3,-29,-72,36,-46,105,77,111,
  /* [83][0][][] */ -94,8,-127,-72,-15,33,-8,-3,-57,-51,-60,18,-1,24,57,70,
  /* [84][0][][] */ -86,17,22,-13,21,113,87,64,-60,92,-52,110,46,-82,-59,-127,
  /* [85][0][][] */ 127,34,57,35,-58,30,-65,-60,-7,-13,-77,-64,-14,29,5,16,
  /* [86][0][][] */ -3,124,45,-63,-69,34,-127,6,32,-127,42,39,-28,-65,-124,-28,
  /* [87][0][][] */ 97,68,11,50,-1,83,106,-118,-60,-17,-63,-37,127,94,116,-83,
  /* [88][0][][] */ -31,-12,-46,17,5,-30,34,-15,42,127,15,-49,49,-24,-9,-75,
  /* [89][0][][] */ -39,-19,-127,-43,36,68,109,47,-38,-66,-20,27,-20,80,55,-22,
  /* [90][0][][] */ -4,-27,-35,-4,1,-65,7,95,-127,63,60,-13,-59,-75,-34,-59,
  /* [91][0][][] */ -7,-11,-40,-11,118,50,-18,-61,17,20,-9,0,-28,12,18,-127,
  /* [92][0][][] */ -32,-43,-99,-13,24,-39,-5,36,24,2,-23,20,-31,-127,84,-26,
  /* [93][0][][] */ 75,-11,-29,32,-26,-66,-127,28,27,50,45,35,-81,20,-122,53,
  /* [94][0][][] */ 36,45,-110,-89,95,-33,73,-127,-97,25,-93,114,115,-71,32,-77,
  /* [95][0][][] */ 49,116,-65,127,15,19,-93,11,-27,-36,11,21,116,-47,43,-84,
  /* [96][0][][] */ -9,-48,-44,32,-48,46,16,76,127,-70,60,-57,-43,-47,-80,-49,
  /* [97][0][][] */ -29,37,-40,1,17,11,35,-80,127,54,95,-39,19,-18,36,17,
  /* [98][0][][] */ -43,-26,56,-26,14,-44,42,55,9,-15,-28,52,0,12,-127,-15,
  /* [99][0][][] */ 27,-37,-85,-84,89,19,-127,-12,70,-74,29,-98,-42,41,5,-40,
  /* [100][0][][] */ 127,-10,116,-22,39,19,-29,-49,36,-43,41,-18,-30,-14,-32,-71,
  /* [101][0][][] */ -93,-1,-125,41,64,-92,42,30,46,33,-30,127,-37,-80,8,99,
  /* [102][0][][] */ 40,-82,127,-49,-49,-67,119,-18,-31,24,-4,97,-77,-87,-126,31,
  /* [103][0][][] */ -73,25,-97,-108,-18,-51,-2,127,-53,90,-6,-103,2,-60,-9,49,
  /* [104][0][][] */ 23,-90,61,127,57,-24,80,-90,-35,21,7,-7,-50,127,127,66,
  /* [105][0][][] */ 83,-106,32,-74,-57,34,-117,-12,39,-34,-38,-33,26,-36,-127,-19,
  /* [106][0][][] */ -127,-49,86,27,91,-12,-16,109,30,29,-19,37,91,55,-8,10,
  /* [107][0][][] */ -61,64,40,71,60,-110,-15,47,-58,18,-42,17,27,-127,22,-33,
  /* [108][0][][] */ 127,-84,34,51,-65,16,41,-57,40,17,-9,3,-77,44,8,81,
  /* [109][0][][] */ 48,-66,63,76,34,18,71,-49,-35,3,-25,1,11,-100,-127,-46,
  /* [110][0][][] */ -37,22,63,-24,-36,-31,44,-35,92,71,-15,127,-18,-42,77,-63,
  /* [111][0][][] */ -71,19,19,-21,-44,49,-80,-43,25,127,-4,-46,72,14,-26,49,
  /* [112][0][][] */ -59,-22,-62,67,127,-100,-25,13,-25,-25,-39,-59,71,37,44,-33,
  /* [113][0][][] */ 76,24,38,-127,-3,64,10,-20,17,10,43,-57,-25,-27,-4,13,
  /* [114][0][][] */ -34,-21,-96,-27,-52,-32,15,-71,-117,72,127,46,-102,15,-20,-52,
  /* [115][0][][] */ -46,-41,-82,-6,5,127,-8,-15,5,-23,-76,15,-115,-10,-94,-29,
  /* [116][0][][] */ 59,-127,-124,-9,-38,-52,-70,0,31,1,20,10,78,45,-83,55,
  /* [117][0][][] */ 20,-25,24,-3,-45,66,60,127,-47,4,-29,-61,-26,58,-41,-19,
  /* [118][0][][] */ -6,39,-85,-30,110,127,-88,58,64,-48,-39,-15,-21,26,44,-40,
  /* [119][0][][] */ 127,7,84,-16,45,-70,-3,121,-10,109,-22,-14,4,-46,-83,-98,
  /* [120][0][][] */ 44,98,-33,3,-25,8,-127,0,62,-60,-20,-8,-79,-35,14,-37,
  /* [121][0][][] */ -5,45,127,-77,45,67,-25,25,63,80,15,-24,7,1,-63,-8,
  /* [122][0][][] */ 42,47,3,-29,-25,105,127,126,-39,-33,20,63,-16,16,103,66,
  /* [123][0][][] */ 24,19,11,55,-7,37,-62,39,42,59,57,-127,91,-51,57,-46,
  /* [124][0][][] */ -66,30,15,4,65,20,-55,46,32,117,-12,-127,123,-13,-17,-54,
  /* [125][0][][] */ -53,7,-102,-57,-50,2,79,12,-55,-1,74,127,70,-38,103,60,
  /* [126][0][][] */ -125,-24,-25,-127,-5,71,-122,-93,-126,14,-70,68,-28,-21,71,-35,
  /* [127][0][][] */ 5,29,-50,-33,55,-21,-21,21,-32,-90,-9,-67,127,-96,21,3,
  /* [128][0][][] */ -14,-20,-67,-34,-16,53,127,21,-5,14,30,-23,4,18,15,33,
  /* [129][0][][] */ 73,-3,10,-11,-14,48,-68,-43,28,-31,-68,48,19,-36,39,-127,
  /* [130][0][][] */ -10,-85,127,-72,19,-89,-63,47,86,-7,32,-68,87,-15,61,-80,
  /* [131][0][][] */ 27,-21,-13,-1,78,82,-7,-127,-51,-30,-12,-23,8,65,-3,4,
  /* [132][0][][] */ -32,-69,-40,-57,-8,127,48,-90,-4,34,100,-28,104,8,3,-48,
  /* [133][0][][] */ -48,-5,-9,1,-30,14,-65,-66,19,55,127,-41,-37,-17,85,-33,
  /* [134][0][][] */ 107,32,-46,-91,22,-20,-39,13,20,-52,-88,-9,-42,22,0,127,
  /* [135][0][][] */ -24,-22,-5,-8,5,2,127,-14,-18,-52,-18,64,83,-47,62,-84,
  /* [136][0][][] */ -5,83,-103,-58,90,5,-114,-10,-71,-5,-55,66,19,-127,-123,-23,
  /* [137][0][][] */ -19,15,-85,20,32,6,3,127,-83,-32,-29,-13,-85,21,26,21,
  /* [138][0][][] */ 114,14,-127,38,-91,-97,5,-44,26,-17,-43,-64,45,105,38,-21,
  /* [139][0][][] */ -102,21,-2,2,-36,-43,-97,-127,-56,47,42,118,21,15,-62,93,
  /* [140][0][][] */ 13,11,-49,-89,-14,-59,16,39,-27,82,-50,-8,-8,-127,90,60,
  /* [141][0][][] */ -30,34,127,-66,-10,72,-40,-115,78,38,27,-41,-42,-34,43,18,
  /* [142][0][][] */ -58,93,-85,93,18,-19,-127,46,-45,106,76,-44,-80,-65,55,53,
  /* [143][0][][] */ -75,-124,77,-127,-27,-85,-56,-2,39,91,68,29,-53,-62,45,-76,
  /* [144][0][][] */ 40,73,41,103,-105,-61,55,52,-127,50,0,110,34,-127,-58,57,
  /* [145][0][][] */ -8,-15,-34,70,127,-14,-34,2,-47,2,54,66,53,23,-44,70,
  /* [146][0][][] */ -68,-9,-50,-112,107,35,-76,20,42,-76,97,116,48,127,-73,40,
  /* [147][0][][] */ 47,96,-127,-36,67,96,-14,-22,78,47,-88,107,83,-12,-21,-40,
  /* [148][0][][] */ -31,-24,26,6,-84,-109,52,36,-127,6,-103,-73,-121,-95,-39,0,
  /* [149][0][][] */ 35,-76,22,115,1,0,-19,-22,62,61,-127,-45,28,-81,-24,-111,
  /* [150][0][][] */ 64,55,104,93,115,-29,10,-26,40,-45,86,76,96,59,58,127,
  /* [151][0][][] */ 6,-60,-51,25,-22,-94,-71,-127,31,-66,-62,71,8,8,73,-7,
  /* [152][0][][] */ 79,-18,96,56,-88,3,-12,-61,127,-26,-24,1,33,109,12,90,
  /* [153][0][][] */ -11,93,66,6,-5,-36,-24,12,-97,-1,106,49,-16,11,-72,127,
  /* [154][0][][] */ -16,71,-127,27,19,84,-6,30,33,-93,-28,50,10,22,32,67,
  /* [155][0][][] */ -110,52,-9,-47,53,-54,35,24,60,70,-36,-32,-19,127,11,-28,
  /* [156][0][][] */ 5,-18,27,-46,-53,-105,11,0,-92,-11,-7,-58,127,48,11,11,
  /* [157][0][][] */ -5,14,48,13,12,-127,-15,17,-11,51,56,74,1,-61,29,-8,
  /* [158][0][][] */ -26,13,98,-62,-2,-26,-6,-39,-25,-127,-68,-56,38,15,5,-32,
  /* [159][0][][] */ -7,-102,51,42,121,42,45,20,-22,32,19,50,-11,-6,127,90,
  /* [160][0][][] */ -17,2,60,53,-107,-22,87,-14,41,127,1,-39,-6,-42,49,44,
  /* [161][0][][] */ 88,-72,-25,5,22,-81,79,78,-90,127,-7,-30,36,-47,29,-15,
  /* [162][0][][] */ -16,89,20,-15,103,-8,-32,-46,29,3,-76,-12,64,-14,127,41,
  /* [163][0][][] */ -90,-82,10,-45,5,-59,64,-2,-13,21,10,-15,-6,-127,6,-79,
  /* [164][0][][] */ -84,-26,34,45,76,-120,18,-41,31,-39,-3,127,-46,3,-18,-9,
  /* [165][0][][] */ -7,6,-38,43,-20,-127,55,29,96,-52,-26,-43,-45,-38,2,26,
  /* [166][0][][] */ -22,36,22,-38,98,-51,84,-9,127,102,-40,95,-28,78,2,47,
  /* [167][0][][] */ -37,-7,60,-73,89,3,-6,75,-63,61,3,18,24,-127,-50,-1,
  /* [168][0][][] */ 16,10,-68,-55,55,-100,51,-7,122,-27,-9,10,127,121,81,99,
  /* [169][0][][] */ -39,-61,-18,61,-127,-8,-48,13,-39,-29,43,-29,42,-29,-83,49,
  /* [170][0][][] */ 19,-127,67,7,7,-70,15,-43,-1,-19,-6,-16,-35,20,-52,-8,
  /* [171][0][][] */ -84,-64,-63,-42,23,-33,-1,27,20,-61,49,47,127,62,-25,46,
  /* [172][0][][] */ -60,58,-75,63,-11,127,4,45,32,76,96,-30,23,-70,-48,54,
  /* [173][0][][] */ -21,19,-47,-88,98,-13,53,-38,58,72,58,53,36,-127,42,-33,
  /* [174][0][][] */ 71,58,22,22,20,-127,-121,-38,-53,-39,-49,58,-100,-10,-70,21,
  /* [175][0][][] */ -64,62,-69,43,21,-127,23,37,62,62,-55,24,-27,7,-30,-42,
  /* [176][0][][] */ 105,-11,127,34,-30,-4,7,-18,-63,9,-49,62,61,-47,-42,-35,
  /* [177][0][][] */ 4,21,-10,50,124,-123,-88,3,3,127,23,77,-28,65,-1,67,
  /* [178][0][][] */ 65,41,-68,-1,3,25,-35,0,62,13,11,-19,127,-48,-8,-74,
  /* [179][0][][] */ -105,125,-57,46,-112,-41,-30,2,127,25,-17,86,16,46,-9,-35,
  /* [180][0][][] */ 49,41,127,121,-2,4,-32,9,9,35,119,81,49,-7,81,-88,
  /* [181][0][][] */ -4,-4,-7,-44,18,11,-127,-25,63,17,96,28,13,-91,32,-9,
  /* [182][0][][] */ 33,50,85,58,124,5,51,33,-9,-49,-7,36,-15,-12,-127,-78,
  /* [183][0][][] */ 15,3,124,-67,-102,84,47,-127,-44,10,93,41,53,9,4,40,
  /* [184][0][][] */ 23,-26,15,116,-54,5,36,-84,127,103,39,64,-61,126,-51,61,
  /* [185][0][][] */ 33,17,-40,-49,32,23,-27,-43,26,40,64,46,-40,-24,-6,-127,
  /* [186][0][][] */ -69,-104,-127,-3,55,-89,-74,4,-1,79,-7,-53,-45,-37,-56,-104,
  /* [187][0][][] */ 34,0,60,15,54,5,103,24,21,-24,-17,-8,-36,127,16,-33,
  /* [188][0][][] */ -41,27,-57,13,127,-42,15,11,-40,-6,-61,39,2,45,-20,13,
  /* [189][0][][] */ -97,22,46,-31,45,-40,46,-76,91,127,105,45,19,67,53,-57,
  /* [190][0][][] */ -110,71,18,-41,37,1,-98,127,23,-10,42,35,110,-90,75,16,
  /* [191][0][][] */ 51,84,112,-25,-30,-24,127,39,33,48,-58,8,-45,-48,-7,-2,
  /* [192][0][][] */ 11,6,-70,-55,-57,80,-14,-62,-60,65,-3,-33,93,-127,-24,34,
  /* [193][0][][] */ 99,-3,-51,-81,-8,127,18,-22,-34,-26,11,-45,-67,56,-1,-14,
  /* [194][0][][] */ 60,-14,-98,24,13,-11,39,-33,52,-13,88,127,16,112,68,-9,
  /* [195][0][][] */ -36,65,44,-4,118,-24,97,-1,-50,5,-68,127,-105,100,-78,-82,
  /* [196][0][][] */ 99,6,-71,94,-2,11,14,-38,-46,-50,-13,69,-105,127,-65,48,
  /* [197][0][][] */ 11,-6,69,-46,50,43,127,68,37,-47,12,91,11,-57,-6,-6,
  /* [198][0][][] */ -23,97,92,81,-31,-127,-41,-44,28,11,-41,82,-5,-15,1,34,
  /* [199][0][][] */ -99,127,47,-44,-20,36,-78,37,-21,35,72,-36,81,-89,-65,-117,
  /* [200][0][][] */ -19,-17,-127,-22,-72,-75,16,-5,-31,78,28,38,-7,5,-13,74,
  /* [201][0][][] */ -14,34,37,31,14,7,-39,67,-59,35,-108,-40,-127,74,5,63,
  /* [202][0][][] */ 127,123,21,45,81,17,2,-65,-49,-122,18,115,34,-28,85,-20,
  /* [203][0][][] */ 92,-121,-6,-30,-72,29,-16,44,60,-127,32,37,104,-5,2,56,
  /* [204][0][][] */ 10,100,-7,99,43,-19,71,-2,-108,-124,4,-38,14,-98,-66,-127,
  /* [205][0][][] */ -127,-37,37,-20,86,57,61,-110,-101,-21,-66,106,115,104,-29,-105,
  /* [206][0][][] */ 71,-71,-45,20,-16,-47,15,-82,12,-127,-51,9,13,99,-9,88,
  /* [207][0][][] */ -12,67,31,62,6,78,127,16,-65,-8,-48,-94,-45,-46,87,22,
  /* [208][0][][] */ -127,-10,-25,54,35,13,-54,-70,5,53,-42,-22,42,-31,62,-44,
  /* [209][0][][] */ -19,55,-1,-15,-13,27,82,-31,38,-96,79,61,61,-25,-66,-127,
  /* [210][0][][] */ 75,1,77,-127,57,21,-10,57,-78,28,13,10,-61,-45,-57,-104,
  /* [211][0][][] */ -62,75,75,-3,-56,21,-28,-71,35,-33,-11,-19,31,-127,-23,-71,
  /* [212][0][][] */ -61,56,44,56,-100,-19,-61,-62,-47,60,86,23,127,70,-29,-24,
  /* [213][0][][] */ -127,21,-8,10,50,-2,50,16,18,60,37,-68,18,-59,33,3,
  /* [214][0][][] */ 22,-60,-7,-17,-114,-35,127,10,-83,-79,55,99,-52,54,-110,-91,
  /* [215][0][][] */ -47,48,63,80,47,-17,64,-11,3,0,-28,5,-14,127,-77,-52,
  /* [216][0][][] */ -28,26,-71,61,-53,-6,89,-127,49,-74,-85,-7,-34,-55,0,-34,
  /* [217][0][][] */ 45,-6,-20,-52,-82,29,-17,-20,-74,-33,82,-127,15,-29,106,-10,
  /* [218][0][][] */ 27,97,23,-9,32,-10,-95,-127,58,-56,29,-48,56,-112,13,63,
  /* [219][0][][] */ 38,-18,-19,52,-18,-48,127,-9,91,-33,-35,19,-12,-16,23,3,
  /* [220][0][][] */ -24,2,-81,121,-46,41,19,29,15,127,83,-30,29,25,24,0,
  /* [221][0][][] */ 24,-81,43,-47,17,-54,-25,-67,-69,26,-28,38,42,-127,-16,-100,
  /* [222][0][][] */ -68,16,12,-49,-13,47,-6,-56,-15,86,0,-16,127,-14,59,-71,
  /* [223][0][][] */ -13,-5,-39,69,-38,-41,-91,30,1,-41,127,81,9,9,-112,6,
  /* [224][0][][] */ 98,31,30,18,11,26,127,48,-11,-105,-33,28,-47,-30,-28,21,
  /* [225][0][][] */ 47,98,-21,-16,-4,20,-6,-48,58,52,-127,-18,-63,-51,48,17,
  /* [226][0][][] */ 37,-28,-67,-11,-48,0,80,-47,-127,-35,-30,8,-13,106,-106,6,
  /* [227][0][][] */ 29,38,-122,-15,10,-13,8,30,-78,63,-97,-127,-63,13,45,-30,
  /* [228][0][][] */ -123,-30,52,12,6,-43,127,34,49,75,-12,106,23,-38,45,19,
  /* [229][0][][] */ -9,-127,48,32,1,56,4,49,-56,16,81,-40,84,-69,10,44,
  /* [230][0][][] */ -41,85,69,-43,-104,58,90,-127,39,1,-71,35,41,-13,15,-89,
  /* [231][0][][] */ 20,-11,29,1,28,26,127,-20,47,-18,18,43,38,18,-7,-9,
  /* [232][0][][] */ 39,-7,127,-38,-34,-4,58,-67,-19,46,12,-50,4,-18,20,-75,
  /* [233][0][][] */ -44,-95,9,26,-16,-24,-96,-127,42,18,61,12,-11,-14,-123,29,
  /* [234][0][][] */ 27,37,43,-13,127,-43,2,-53,24,-83,-27,-1,50,-31,-18,0,
  /* [235][0][][] */ 47,-84,-40,71,60,21,-28,-84,-25,-121,-46,90,105,-127,33,105,
  /* [236][0][][] */ 23,17,49,124,-17,-50,-127,-84,-15,-14,-44,20,55,38,-67,45,
  /* [237][0][][] */ 18,-71,-127,-66,55,86,-26,72,21,0,-29,-53,79,73,8,-19,
  /* [238][0][][] */ -48,25,42,24,-70,-76,46,13,35,-127,-44,99,90,87,-4,80,
  /* [239][0][][] */ 32,26,-11,13,29,-13,-71,27,85,-103,32,-13,-45,-20,-44,127,
  /* [240][0][][] */ 0,-81,9,31,52,-51,-6,-127,-42,-68,-61,38,50,11,9,25,
  /* [241][0][][] */ 127,126,41,-87,72,7,77,51,111,51,21,-46,-24,-30,117,29,
  /* [242][0][][] */ 73,61,11,-53,-32,48,127,18,48,-21,-6,21,-8,-49,-15,-4,
  /* [243][0][][] */ 27,125,27,-60,-83,-78,2,32,-16,1,-20,25,-72,-70,-17,-127,
  /* [244][0][][] */ 14,-36,-44,-72,-53,42,13,-97,112,89,-56,-17,35,127,-55,54,
  /* [245][0][][] */ -108,71,39,-21,-41,-67,67,65,85,42,-77,-127,-49,-86,-28,-12,
  /* [246][0][][] */ 45,49,-71,-127,-11,-80,-35,-24,-6,-11,26,80,40,79,-24,-51,
  /* [247][0][][] */ -64,63,29,10,127,-6,-38,-15,91,-16,11,52,9,23,56,7,
  /* [248][0][][] */ -95,-38,22,-20,4,52,127,-36,-18,44,-47,-11,25,-13,68,-39,
  /* [249][0][][] */ -27,33,-40,16,-68,-28,97,82,-87,-45,44,25,-45,66,-127,0,
  /* [250][0][][] */ -3,10,-12,121,24,14,63,-33,-83,103,-65,-42,83,127,33,-15,
  /* [251][0][][] */ -10,38,115,-11,2,-21,127,41,-2,-26,-18,-54,-18,-97,92,-24,
  /* [252][0][][] */ 54,-35,127,21,-5,-15,42,24,31,60,30,31,12,3,37,60,
  /* [253][0][][] */ -127,13,18,18,-5,-7,47,-39,22,10,-27,-46,0,-35,28,-78,
  /* [254][0][][] */ -92,-80,-42,-9,-41,-45,29,90,-82,-80,-27,48,68,36,-127,75,
  /* [255][0][][] */ -45,-54,96,-21,127,61,40,8,-37,-10,-5,-41,59,37,35,0,
  /* [256][0][][] */ 127,36,-39,20,-20,42,-71,-83,76,23,99,-7,89,58,-55,52,
  /* [257][0][][] */ -75,74,-96,-33,-31,93,2,-86,127,-67,26,61,52,53,-9,-119,
  /* [258][0][][] */ -120,31,-107,-36,127,15,30,-11,109,51,-40,-109,-12,-12,-30,30,
  /* [259][0][][] */ 79,7,-23,70,-11,76,12,-87,46,9,-47,-118,-71,-48,127,12,
  /* [260][0][][] */ -15,-27,-13,-13,-17,-38,127,108,113,27,44,-101,-115,24,-58,-39,
  /* [261][0][][] */ 93,-127,-66,-16,-31,-54,61,65,39,-20,45,-43,-115,-30,16,-4,
  /* [262][0][][] */ -67,19,-57,-66,18,-84,-127,81,-68,-49,-16,-5,11,-54,-70,-4,
  /* [263][0][][] */ 127,-63,12,8,65,47,4,-12,-63,-37,26,42,-85,-115,70,27,
  /* [264][0][][] */ -29,-35,13,34,-104,23,-56,-22,-21,101,40,-127,-72,-48,-76,40,
  /* [265][0][][] */ 53,-2,-41,-127,-68,46,-25,-86,68,-21,68,-40,-69,20,-28,-70,
  /* [266][0][][] */ -6,17,-82,-60,45,-20,-127,-61,-88,93,120,16,107,-8,84,31,
  /* [267][0][][] */ 36,35,47,-107,1,-40,123,73,45,122,47,3,30,30,-37,-127,
  /* [268][0][][] */ -59,-90,-86,-23,-54,9,85,25,68,-21,35,-64,-29,-127,-2,76,
  /* [269][0][][] */ -76,21,10,-78,127,11,-45,-36,114,37,50,8,-57,-52,-63,48,
  /* [270][0][][] */ 105,99,65,-117,-7,70,-71,122,88,-127,50,-54,-9,48,-98,-61,
  /* [271][0][][] */ 36,64,84,-72,77,-60,-17,12,-19,48,127,-33,57,-124,13,20,
  /* [272][0][][] */ -34,-41,23,-34,6,-35,-71,-120,-28,127,57,-30,110,-28,27,-31,
  /* [273][0][][] */ -86,22,91,-67,-12,-30,77,-40,-79,105,-63,-15,-20,-127,-5,82,
  /* [274][0][][] */ -63,27,44,-26,127,21,8,-36,72,25,13,-26,-36,48,-27,-46,
  /* [275][0][][] */ 28,89,82,23,-8,-61,-127,-12,41,-3,38,4,24,-72,48,-53,
  /* [276][0][][] */ 31,16,-66,-35,72,61,-127,120,47,-57,50,49,-13,25,69,-75,
  /* [277][0][][] */ -34,-36,-29,-30,19,93,7,-22,127,11,10,-39,7,-42,78,62,
  /* [278][0][][] */ -61,15,-63,23,-31,36,17,-52,-72,39,19,-79,127,-105,56,89,
  /* [279][0][][] */ -23,-30,65,-27,32,28,-78,-25,127,22,15,-101,55,-74,-8,10,
  /* [280][0][][] */ 84,-17,27,-28,-42,-73,74,7,44,51,-31,67,-8,30,-127,-46,
  /* [281][0][][] */ 29,35,-64,-86,12,-36,35,82,30,43,9,-127,23,79,58,-26,
  /* [282][0][][] */ 23,-41,104,20,-124,-42,127,-28,-21,1,80,106,-76,-125,4,70,
  /* [283][0][][] */ -71,89,-14,-64,-58,17,-127,-55,-34,81,44,-59,108,-16,1,49,
  /* [284][0][][] */ -39,31,-16,0,34,31,-12,46,-3,72,-18,-45,-6,-127,-70,-95,
  /* [285][0][][] */ -127,18,-9,-4,51,5,32,-16,83,-35,3,23,-35,50,44,80,
  /* [286][0][][] */ -29,53,-22,-127,-76,14,-79,17,-76,-10,31,-126,-63,68,-44,-36,
  /* [287][0][][] */ -56,20,-98,-58,8,6,-16,-3,-78,5,57,-33,66,-71,127,28,
  /* [288][0][][] */ 118,16,107,-127,25,54,-2,-49,-110,34,43,63,52,59,-1,-27,
  /* [289][0][][] */ -49,-13,43,-40,24,-20,93,86,-120,13,-31,-127,9,36,-22,-2,
  /* [290][0][][] */ 50,-25,-82,116,-36,-22,-127,42,-24,67,68,-40,43,6,-37,-12,
  /* [291][0][][] */ 118,41,60,83,30,-1,127,50,77,-117,-40,96,18,4,-11,36,
  /* [292][0][][] */ 127,33,49,38,-23,-49,-36,33,-19,-59,28,6,17,10,42,21,
  /* [293][0][][] */ 88,67,-66,-51,-80,21,-119,35,12,-34,127,67,11,-117,-4,61,
  /* [294][0][][] */ 27,-127,35,-38,11,-75,48,-22,-12,-75,45,6,-19,49,25,30,
  /* [295][0][][] */ -2,82,-57,-1,-11,-32,16,-1,-93,127,-10,19,-45,63,-40,-5,
  /* [296][0][][] */ -14,61,22,-2,62,-96,24,88,-127,-36,-28,67,42,-28,-92,-18,
  /* [297][0][][] */ 127,51,-32,49,-36,56,-27,-94,3,-62,81,-73,-38,19,63,16,
  /* [298][0][][] */ -38,6,13,0,-25,105,-25,-115,-79,-17,-15,25,107,-16,-4,127,
  /* [299][0][][] */ -27,-43,-52,-16,76,26,-33,-3,-15,40,-35,12,-38,127,-38,-44,
  /* [300][0][][] */ -30,-11,63,-34,99,48,127,-25,88,31,26,50,33,-27,82,-57,
  /* [301][0][][] */ 32,-47,-127,-46,-36,-59,-31,-19,19,-19,53,93,48,-126,-24,-99,
  /* [302][0][][] */ -33,-90,-4,-10,-72,73,127,-24,-15,57,64,64,51,32,11,-41,
  /* [303][0][][] */ -31,-64,33,1,-25,4,9,-68,-60,6,-11,-37,-14,127,-4,63,
  /* [304][0][][] */ -90,-54,-64,41,-23,-16,-59,41,108,-67,124,-24,-27,127,34,-10,
  /* [305][0][][] */ 21,-107,-8,-79,-45,-9,28,3,11,92,68,-127,-81,21,0,-14,
  /* [306][0][][] */ -16,-11,-79,-20,-48,-10,-40,54,127,-92,-16,-101,3,-27,68,-68,
  /* [307][0][][] */ 65,-50,84,63,29,19,-23,127,2,-23,13,-77,-8,108,-45,65,
  /* [308][0][][] */ 94,-14,10,-24,-12,59,21,-16,26,0,51,127,14,-39,-54,90,
  /* [309][0][][] */ 53,31,-11,-127,73,-28,-32,51,-78,94,-40,-81,-37,36,-87,62,
  /* [310][0][][] */ 99,-51,48,-12,-54,29,-69,44,6,-97,44,-18,62,67,-28,-127,
  /* [311][0][][] */ -87,105,-41,-4,-62,107,85,-4,84,40,-102,-73,12,-127,15,72,
  /* [312][0][][] */ 127,14,-72,-3,90,16,37,-22,22,55,69,-86,-2,-1,-82,-31,
  /* [313][0][][] */ 19,11,20,67,59,-47,69,30,-127,102,-12,39,122,-18,25,63,
  /* [314][0][][] */ -48,-19,28,127,42,59,41,106,2,-30,-20,22,16,74,-27,24,
  /* [315][0][][] */ 82,-6,64,14,-89,-127,-39,24,-69,96,17,3,29,-79,-21,-43,
  /* [316][0][][] */ -26,-61,71,36,47,127,102,29,7,-49,-24,5,-32,24,78,-25,
  /* [317][0][][] */ -32,-23,-107,3,-49,-127,-43,62,83,6,24,-16,-108,-45,58,68,
  /* [318][0][][] */ 39,-18,8,13,-29,45,8,-16,-127,-72,55,-3,11,-54,67,25,
  /* [319][0][][] */ 38,-62,-16,19,-85,-18,8,-27,-105,-24,-5,40,14,13,-127,16,
  /* [320][0][][] */ 46,64,-116,-18,71,25,-74,-2,117,127,62,-33,-16,-45,0,-51,
  /* [321][0][][] */ -3,-46,-102,-118,-82,-20,39,-21,-45,-1,23,66,-125,-49,-127,-44,
  /* [322][0][][] */ 126,-2,10,7,38,-57,-68,-2,-3,-114,-127,36,3,-37,-75,76,
  /* [323][0][][] */ 127,23,33,15,78,87,-114,34,-41,-115,93,-3,72,41,-27,-67,
  /* [324][0][][] */ 67,44,53,102,21,-127,-80,-105,-26,20,18,30,51,-71,69,9,
  /* [325][0][][] */ 12,17,44,38,-33,-104,-14,-88,43,-7,117,-127,-45,-57,-111,82,
  /* [326][0][][] */ -43,-81,-48,-65,-18,14,45,-77,-37,-27,-9,127,21,29,107,-96,
  /* [327][0][][] */ 20,-127,40,86,7,-7,39,30,23,16,-12,-16,-16,-52,-3,12,
  /* [328][0][][] */ 25,30,10,50,61,-71,-101,36,-32,126,-42,-16,-10,127,10,-33,
  /* [329][0][][] */ -24,83,64,90,64,5,-127,26,43,116,55,61,-82,34,-35,-92,
  /* [330][0][][] */ 18,-53,-6,127,5,-32,6,23,-82,15,20,76,-58,41,-71,77,
  /* [331][0][][] */ 57,73,-1,8,67,69,67,93,-127,-94,53,5,48,30,5,-116,
  /* [332][0][][] */ -87,-127,19,-10,-19,-59,-13,-23,-4,-14,20,-38,-9,-7,-35,108,
  /* [333][0][][] */ -25,-58,19,38,0,-62,45,-27,-17,-10,-100,-64,-127,3,-23,27,
  /* [334][0][][] */ -86,20,-123,37,-41,-50,27,67,-45,-51,127,125,-81,-22,34,-49,
  /* [335][0][][] */ 16,-1,-10,-15,16,76,13,-127,28,51,28,30,17,37,66,20,
  /* [336][0][][] */ 82,-7,41,48,44,-20,67,75,89,-51,5,-49,-75,-127,-17,-95,
  /* [337][0][][] */ 127,5,72,11,93,94,34,-34,32,71,-6,11,5,-66,-5,-95,
  /* [338][0][][] */ -21,-76,55,7,3,-127,-16,6,-40,16,-7,-53,-45,7,4,8,
  /* [339][0][][] */ -85,35,-20,56,9,26,-19,102,-85,-43,127,32,45,62,10,-23,
  /* [340][0][][] */ 30,-28,-35,-80,-81,22,-79,28,-22,-88,121,37,127,-47,45,60,
  /* [341][0][][] */ 30,92,127,-98,-26,12,-82,86,42,-7,23,-78,36,-39,-23,33,
  /* [342][0][][] */ -81,-53,-36,-41,-105,-60,-72,-2,-62,47,38,0,127,121,58,78,
  /* [343][0][][] */ 10,3,85,125,18,-127,49,49,42,100,-24,-124,37,76,90,25,
  /* [344][0][][] */ 52,-72,39,-71,10,61,30,-40,-79,14,43,99,20,23,-127,-84,
  /* [345][0][][] */ 92,38,50,66,-36,-65,13,-11,-43,127,63,17,-22,17,37,36,
  /* [346][0][][] */ -44,47,-89,114,-29,27,-2,71,-27,10,-94,59,-6,-127,15,3,
  /* [347][0][][] */ 52,-70,-24,42,66,65,87,-38,127,-56,33,22,-22,-16,55,35,
  /* [348][0][][] */ 39,61,47,28,-12,17,-54,-82,-8,3,-43,8,-3,-22,127,-21,
  /* [349][0][][] */ 40,-37,-22,80,21,-83,41,12,23,-1,41,-24,127,49,12,-6,
  /* [350][0][][] */ 78,74,-32,10,-21,-114,14,50,-70,-25,-47,-49,-42,-127,6,-31,
  /* [351][0][][] */ -1,-120,-57,-7,6,117,-127,62,126,-74,84,-89,19,44,-33,28,
  /* [352][0][][] */ 2,-127,-23,75,-51,43,-68,-12,100,24,-15,-95,-30,81,-89,-93,
  /* [353][0][][] */ 59,110,-34,-40,71,-35,-40,-54,16,5,-26,127,31,95,-51,-28,
  /* [354][0][][] */ 11,-18,9,32,-127,42,28,-69,-20,-43,11,-101,74,55,18,-90,
  /* [355][0][][] */ -44,-93,-20,58,-76,-7,40,66,70,82,15,-127,117,-50,102,21,
  /* [356][0][][] */ 69,29,-85,-22,-81,-67,-88,-8,94,-103,-1,-1,90,-127,-88,-29,
  /* [357][0][][] */ 34,-2,15,-22,-109,-53,86,127,-109,73,64,10,35,48,111,40,
  /* [358][0][][] */ 120,38,-57,67,18,-29,-108,67,41,52,56,-94,15,52,34,-127,
  /* [359][0][][] */ 59,39,-1,-12,-46,53,-65,-34,22,-7,-18,16,-3,-9,-127,-4,
  /* [360][0][][] */ 91,13,19,-17,19,81,87,22,67,-69,127,-1,-62,44,-31,19,
  /* [361][0][][] */ -35,19,-22,-112,-13,-127,101,39,92,27,3,65,101,-28,30,-48,
  /* [362][0][][] */ -15,-10,59,127,62,78,118,27,-83,-18,30,21,11,-66,9,26,
  /* [363][0][][] */ -105,40,119,29,30,14,6,85,-127,-13,43,-127,-121,-42,-19,12,
  /* [364][0][][] */ -127,-63,42,60,-13,15,-3,23,-25,88,14,-7,33,38,-22,31,
  /* [365][0][][] */ -14,8,-127,-104,-114,-15,-120,-67,51,-68,36,40,91,-114,52,14,
  /* [366][0][][] */ -39,-45,-127,31,-14,17,-30,18,66,11,-10,-59,9,-73,18,14,
  /* [367][0][][] */ 117,20,34,-9,-127,35,30,-41,-23,54,-6,-62,-46,23,-44,-31,
  /* [368][0][][] */ 35,74,-19,19,-95,94,71,-74,-127,12,-62,-31,41,-34,-53,-21,
  /* [369][0][][] */ -118,-16,74,-127,-25,15,35,-45,-98,-54,105,110,72,-4,105,-11,
  /* [370][0][][] */ 41,-34,12,-26,-52,44,78,14,25,55,62,14,-9,21,-20,-127,
  /* [371][0][][] */ -117,-111,12,-35,-58,4,-5,-40,96,5,31,78,123,127,-65,-84,
  /* [372][0][][] */ -91,-16,-35,25,-16,72,64,-127,117,-73,11,25,-14,-10,23,-81,
  /* [373][0][][] */ -36,-13,-78,57,64,-65,-127,-64,61,20,9,11,38,71,40,45,
  /* [374][0][][] */ 90,-8,24,27,-107,60,-122,1,61,-127,95,5,53,27,65,-61,
  /* [375][0][][] */ 122,8,59,-122,125,-69,-101,-17,7,-35,12,-32,-7,-52,55,-127,
  /* [376][0][][] */ 13,57,-29,-29,12,-15,-127,-27,-101,-104,-34,20,-17,-35,-57,39,
  /* [377][0][][] */ -40,-26,19,-36,-75,42,30,-11,-120,0,-10,-32,23,25,-42,127,
  /* [378][0][][] */ 9,110,38,32,-92,-76,23,-26,-11,-124,48,93,-21,127,-30,41,
  /* [379][0][][] */ 5,-12,-34,-16,58,9,-127,80,-44,74,6,-24,36,-61,-87,-37,
  /* [380][0][][] */ 94,-9,-73,-127,58,46,127,-5,-55,-44,-63,1,84,-24,46,3,
  /* [381][0][][] */ 52,-33,-112,40,-127,81,-121,-123,-37,4,62,-48,29,-36,39,-33,
  /* [382][0][][] */ 127,10,-30,-32,-36,52,20,17,78,118,-119,-66,20,16,43,-25,
  /* [383][0][][] */ -53,47,-4,-5,58,-9,56,-12,127,29,-27,17,-26,82,40,-34,
  /* [384][0][][] */ -76,68,-13,-67,61,-72,33,-11,-19,36,26,26,-15,1,127,-91,
  /* [385][0][][] */ -27,58,19,16,-93,-21,-26,-60,-102,-2,12,-11,127,-69,19,119,
  /* [386][0][][] */ 70,-73,39,-18,52,-13,-67,56,84,-3,127,-22,64,-101,-22,11,
  /* [387][0][][] */ -29,-7,34,86,-17,-43,14,-11,-12,27,40,-49,127,-105,-25,51,
  /* [388][0][][] */ 77,-46,2,-5,67,-47,-68,-49,-33,55,90,60,-11,21,38,-127,
  /* [389][0][][] */ -50,117,-31,-40,14,-112,51,92,-127,-50,32,117,-85,-14,106,58,
  /* [390][0][][] */ -19,-15,127,-111,93,56,-125,19,20,-12,-52,-78,-73,-10,-56,-20,
  /* [391][0][][] */ 26,88,-4,71,127,28,17,-67,-64,-2,-9,112,-77,29,48,7,
  /* [392][0][][] */ 123,-41,-9,78,77,-28,-68,-76,-49,-62,84,-127,-25,-96,-52,66,
  /* [393][0][][] */ -47,25,25,31,-64,2,-6,10,77,68,26,69,-127,-43,-78,104,
  /* [394][0][][] */ -86,-8,33,-29,-43,-50,-33,-27,-111,50,24,84,127,-78,-38,-19,
  /* [395][0][][] */ -31,127,5,-78,83,-5,27,-126,-3,23,-22,114,-72,127,76,-45,
  /* [396][0][][] */ -127,-19,-37,110,15,-56,-123,73,16,33,-49,-77,34,43,-83,-44,
  /* [397][0][][] */ 85,90,-29,-9,93,-30,-127,74,-19,-89,-13,-7,-113,25,117,-37,
  /* [398][0][][] */ -122,-6,45,-55,127,46,-63,57,-20,15,-36,-38,-112,-112,-55,73,
  /* [399][0][][] */ -127,-38,3,53,-89,22,7,-11,-41,39,93,16,67,-36,-33,-2,
  /* [400][0][][] */ 127,8,-9,-28,23,-57,33,-36,42,-25,-17,38,30,12,72,-64,
  /* [401][0][][] */ 32,-12,-14,-7,-20,-24,-37,-75,-16,-112,-14,48,127,16,43,59,
  /* [402][0][][] */ 30,60,-80,-127,-14,5,58,58,7,-113,-32,94,67,127,-11,43,
  /* [403][0][][] */ 29,-99,-38,2,37,29,51,-127,122,-98,-58,29,-85,66,53,-21,
  /* [404][0][][] */ 127,46,39,-69,-33,71,-84,-30,5,-79,73,-2,76,-60,-50,1,
  /* [405][0][][] */ -43,-12,42,23,25,3,-127,38,22,-60,-2,-38,-17,-27,-22,46,
  /* [406][0][][] */ 41,-6,25,-74,-126,-74,-3,24,86,101,127,-46,13,28,28,-47,
  /* [407][0][][] */ 87,88,75,5,20,-105,-104,2,-47,43,48,55,-32,127,-5,-78,
  /* [408][0][][] */ 8,28,73,-96,-127,-42,59,70,13,-100,76,87,32,122,-78,75,
  /* [409][0][][] */ 18,61,127,77,-32,22,52,16,62,-44,16,-63,-37,-3,59,-75,
  /* [410][0][][] */ 70,127,-82,-89,-56,-84,-20,88,64,122,70,38,42,73,47,40,
  /* [411][0][][] */ -8,4,2,-90,-30,-55,-51,-43,38,-5,-11,-46,-38,-127,-9,-56,
  /* [412][0][][] */ 16,1,-46,-2,-101,55,9,-21,-51,-71,-16,-22,65,-22,58,127,
  /* [413][0][][] */ 21,70,13,-64,60,-7,-61,-75,92,-3,-3,70,-62,127,-46,-58,
  /* [414][0][][] */ -9,37,-31,3,120,-12,60,37,-35,4,-127,36,15,-14,-102,-30,
  /* [415][0][][] */ 92,9,-10,15,-127,-74,-38,16,56,79,-67,-69,-78,98,68,-68,
  /* [416][0][][] */ -34,-25,-19,67,54,-57,28,71,-36,-64,127,108,64,39,-87,-82,
  /* [417][0][][] */ 18,-3,-1,42,-39,-3,47,-9,25,-3,50,127,-12,1,-34,-31,
  /* [418][0][][] */ -58,-63,-90,-73,24,-90,-13,-106,108,-127,12,13,14,73,-82,-97,
  /* [419][0][][] */ 33,127,-82,22,-65,70,44,-60,-24,36,-22,75,32,18,91,-1,
  /* [420][0][][] */ 64,-26,-41,58,-1,65,2,82,127,-58,108,-15,107,46,-11,-49,
  /* [421][0][][] */ -118,-8,2,-93,14,5,-10,9,127,21,26,-110,109,9,55,29,
  /* [422][0][][] */ 56,-12,-77,28,-127,-24,52,-60,-6,67,2,7,-55,-1,-74,-39,
  /* [423][0][][] */ -67,-40,-28,-71,-42,-127,41,27,83,-24,-29,-74,32,-9,84,35,
  /* [424][0][][] */ -72,-27,20,-53,19,17,9,-7,-6,19,10,-42,5,9,-2,-127,
  /* [425][0][][] */ -66,-27,-39,-100,27,65,-41,-38,-22,11,-38,-10,49,9,-41,-127,
  /* [426][0][][] */ -51,66,94,78,-110,105,-55,-30,31,28,-32,-127,-56,-29,-98,10,
  /* [427][0][][] */ -16,-46,41,-127,53,-51,56,33,63,-39,21,116,21,-43,-127,-93,
  /* [428][0][][] */ -16,28,-14,-72,16,18,123,127,0,113,-97,77,42,126,54,-97,
  /* [429][0][][] */ -60,-3,8,-51,43,26,-25,40,-46,-21,90,-19,72,-106,88,-127,
  /* [430][0][][] */ -72,-17,-30,-25,-22,-2,80,6,127,-32,63,-46,54,-34,-15,27,
  /* [431][0][][] */ 127,-13,-7,-58,-101,9,17,-18,-74,-7,-33,-18,-40,17,23,-22,
  /* [432][0][][] */ -80,-67,-78,79,14,127,0,31,-17,-112,-57,-9,50,-116,50,-64,
  /* [433][0][][] */ 27,91,-37,-1,-53,-5,-41,-80,107,53,-28,-127,-2,-57,47,-26,
  /* [434][0][][] */ 77,-9,-87,53,-79,-113,-127,34,13,122,-88,-118,23,-48,61,-4,
  /* [435][0][][] */ -88,21,-82,17,88,74,49,11,-27,127,-53,5,-34,-40,26,-101,
  /* [436][0][][] */ 14,19,-127,30,42,8,14,-26,-55,-41,25,-24,20,-75,-36,-34,
  /* [437][0][][] */ -6,-24,77,-127,61,28,68,-57,-105,-51,-20,12,59,-5,34,63,
  /* [438][0][][] */ -6,-21,-8,1,-14,23,65,-4,13,-2,42,20,82,-127,85,-37,
  /* [439][0][][] */ 81,64,19,-46,65,-58,-5,-20,-21,127,23,-2,-91,-57,40,-26,
  /* [440][0][][] */ 43,-98,12,42,-18,47,17,-108,-48,-26,80,25,124,-20,127,27,
  /* [441][0][][] */ 86,-26,-56,46,-23,37,13,17,24,51,56,-73,-39,127,7,-2,
  /* [442][0][][] */ -10,68,-25,-100,92,127,45,-24,86,-95,-96,-22,-81,-38,13,-11,
  /* [443][0][][] */ 22,-60,-29,-127,-30,-85,59,-89,66,16,-34,-111,-63,24,55,-10,
  /* [444][0][][] */ 36,10,-34,-38,44,-21,-127,-17,-27,35,20,53,-29,-2,-50,-32,
  /* [445][0][][] */ 18,-117,70,35,13,119,74,-2,-37,35,-26,-25,-34,-127,42,88,
  /* [446][0][][] */ -11,-38,118,31,-63,-43,-37,74,57,-81,-59,-105,-31,-42,-127,28,
  /* [447][0][][] */ 51,67,-43,-7,-72,54,14,-103,-127,-88,-21,120,-67,42,-59,22,
  /* [448][0][][] */ -70,0,30,127,22,21,32,48,-11,-33,-10,-25,-18,33,29,-59,
  /* [449][0][][] */ 114,54,-65,-2,52,-33,69,11,-67,116,-74,-12,-60,-46,18,-127,
  /* [450][0][][] */ -11,66,0,41,57,105,-2,127,23,48,21,-126,-60,-13,-6,19,
  /* [451][0][][] */ 16,17,-30,8,-32,85,-127,15,-99,1,62,69,113,13,-10,67,
  /* [452][0][][] */ 39,-64,-76,-39,-76,-1,-63,59,-19,1,-28,97,-127,79,-14,15,
  /* [453][0][][] */ 127,64,68,18,4,42,25,4,-42,8,-28,-58,-3,-3,-79,-48,
  /* [454][0][][] */ -96,12,-12,2,-12,99,-11,-82,81,-127,-36,-9,39,22,15,79,
  /* [455][0][][] */ -16,52,-7,35,94,9,-12,2,-2,12,-18,-19,14,18,102,-127,
  /* [456][0][][] */ 31,24,29,-56,123,-81,-17,67,-127,-27,26,67,9,62,75,53,
  /* [457][0][][] */ 36,63,-48,8,127,-44,16,23,120,-35,59,82,-26,85,0,-71,
  /* [458][0][][] */ 9,-73,-11,-49,118,-49,-21,30,44,86,84,8,41,-58,-45,-127,
  /* [459][0][][] */ 34,45,-87,-30,-32,22,-101,-127,35,77,-36,33,56,-103,-27,87,
  /* [460][0][][] */ -17,21,-31,5,68,-127,-59,122,74,3,-58,-33,-77,37,6,46,
  /* [461][0][][] */ 32,-74,-13,-67,29,-32,-41,-38,111,78,50,-7,22,127,4,-75,
  /* [462][0][][] */ -59,3,-55,-127,68,-12,6,-31,68,49,-38,-3,10,13,-23,-32,
  /* [463][0][][] */ 7,-120,57,-23,46,-31,9,76,60,68,-5,-51,-127,4,-94,104,
  /* [464][0][][] */ -31,23,99,31,-26,127,35,39,-13,-15,103,-41,-24,-12,-95,-26,
  /* [465][0][][] */ 45,-87,56,-7,-74,-31,6,68,56,99,-29,-47,105,41,127,-16,
  /* [466][0][][] */ 5,3,-79,-50,6,-44,-20,-5,-113,57,-127,-55,56,-127,36,-88,
  /* [467][0][][] */ -1,78,-86,-31,58,-82,-46,18,63,28,86,34,79,-30,77,-127,
  /* [468][0][][] */ -47,-1,40,12,47,-83,-23,75,-127,-65,13,104,92,-78,-57,-66,
  /* [469][0][][] */ -54,32,45,-33,27,54,-22,127,49,-29,55,-31,25,-1,60,13,
  /* [470][0][][] */ 2,72,98,36,3,127,-56,-100,-74,9,14,-10,1,7,10,75,
  /* [471][0][][] */ -6,-41,-2,38,104,-4,-20,-127,61,19,-43,-72,-28,-44,20,-29,
  /* [472][0][][] */ -58,87,-44,103,-38,-6,-77,-20,-112,24,16,127,30,-22,-12,-70,
  /* [473][0][][] */ 50,-30,92,-61,97,11,13,-125,-31,-28,88,-30,76,127,-57,30,
  /* [474][0][][] */ -52,24,9,4,72,46,47,-86,40,11,33,-44,31,9,45,-127,
  /* [475][0][][] */ -22,-26,-92,62,-67,113,-15,54,52,-14,-1,-56,43,127,-41,15,
  /* [476][0][][] */ 100,-36,127,-49,49,-14,-51,9,-91,-35,-12,12,40,24,50,91,
  /* [477][0][][] */ 70,5,-36,70,-107,-52,26,-33,-127,17,12,105,50,90,-70,-81,
  /* [478][0][][] */ 78,-13,83,-32,-43,68,22,-32,89,-116,7,-58,-127,-50,83,-31,
  /* [479][0][][] */ 100,-23,-43,-118,127,59,11,-18,-84,42,-6,-1,90,-75,105,-60,
  /* [480][0][][] */ -1,-79,6,-30,-2,-40,-13,96,26,42,-22,-98,-83,-48,-94,-127,
  /* [481][0][][] */ 127,65,40,65,58,-23,-46,5,-18,-15,10,39,49,61,-21,-24,
  /* [482][0][][] */ -26,-8,-54,70,61,25,127,-14,41,-77,10,41,37,35,8,6,
  /* [483][0][][] */ -91,64,-64,-127,80,-56,10,-80,54,-8,-48,105,126,-80,87,26,
  /* [484][0][][] */ -93,-91,-14,-9,127,44,-71,-43,25,-84,66,74,-51,-20,-18,62,
  /* [485][0][][] */ 39,36,-13,-63,-80,11,73,-127,-27,-30,-60,40,-85,-19,-76,52,
  /* [486][0][][] */ 58,-9,-31,-51,71,-5,-3,19,-8,15,15,127,-6,-41,19,-16,
  /* [487][0][][] */ -86,26,115,31,92,107,11,85,-36,127,-70,-29,-44,58,-77,-58,
  /* [488][0][][] */ -29,23,-35,-86,35,-18,46,127,21,30,-8,47,43,44,26,28,
  /* [489][0][][] */ 38,-37,112,-60,-107,81,16,-58,-29,3,-45,-82,89,-127,31,47,
  /* [490][0][][] */ -78,-73,-127,25,94,122,36,-62,-12,36,-17,-50,66,-37,11,-77,
  /* [491][0][][] */ -1,-5,-12,-103,23,-10,49,15,-10,113,-11,49,38,-13,13,-127,
  /* [492][0][][] */ 26,41,-47,90,22,45,52,-127,19,-38,-12,-5,44,16,122,5,
  /* [493][0][][] */ -5,3,-8,77,15,-56,-45,-46,64,15,7,-50,47,-127,1,-74,
  /* [494][0][][] */ 12,-23,81,50,68,127,-3,53,85,-9,-33,-3,-68,-74,-83,-89,
  /* [495][0][][] */ -108,79,45,-1,-1,-32,82,127,-14,73,122,51,24,43,5,58,
  /* [496][0][][] */ -8,-29,-48,70,-86,127,50,26,-23,-53,41,84,-10,-85,90,65,
  /* [497][0][][] */ 23,37,-12,-76,-16,-33,-87,-73,127,-68,-27,10,21,-23,-57,29,
  /* [498][0][][] */ 1,-15,-11,-2,-23,42,96,-18,58,127,-18,-2,44,36,-3,-51,
  /* [499][0][][] */ 18,-34,-39,-42,72,-55,-8,-34,-107,-32,6,-21,-127,-121,-22,35,
  /* [500][0][][] */ 52,73,46,-74,53,-28,29,68,-127,39,101,39,-63,56,-43,-85,
  /* [501][0][][] */ 51,-81,-14,-66,8,-127,58,13,30,-80,-20,31,20,55,8,29,
  /* [502][0][][] */ 8,127,5,-8,9,-22,-50,104,-55,51,38,123,-6,-78,-51,-57,
  /* [503][0][][] */ -6,-127,64,-74,-26,-62,80,-33,-15,15,-77,16,-5,57,83,34,
  /* [504][0][][] */ 49,-24,-15,9,39,-6,-3,-127,57,-36,-12,-19,43,-26,-21,-23,
  /* [505][0][][] */ -18,9,29,-93,19,-36,-6,-41,-42,111,-62,6,-9,-9,-57,-127,
  /* [506][0][][] */ -86,-89,26,-19,-93,82,5,1,-42,-42,127,38,-75,100,49,5,
  /* [507][0][][] */ -70,-35,-2,85,57,-2,-39,46,-64,76,66,13,-11,30,44,-127,
  /* [508][0][][] */ 24,-39,-60,-48,87,-1,-127,11,114,-39,27,-114,-29,-52,35,-10,
  /* [509][0][][] */ -23,119,-34,61,64,24,-127,19,-109,8,34,24,-64,35,-90,13,
  /* [510][0][][] */ 9,62,2,31,-44,47,-37,-64,104,-105,42,-127,90,-22,7,-9,
  /* [511][0][][] */ -16,-127,74,22,10,-17,75,27,21,-30,5,-79,82,37,34,-26,
  /* [512][0][][] */ 36,-100,68,-33,-51,57,110,-14,79,-127,-43,-63,-94,-6,-18,26,
  /* [513][0][][] */ 29,45,26,-59,54,75,-2,-23,59,-62,21,-89,8,-3,-127,-65,
  /* [514][0][][] */ 64,4,39,12,-58,89,44,-27,101,-84,1,-83,46,37,127,-36,
  /* [515][0][][] */ 56,-68,-90,-60,-60,-123,-127,-38,23,-18,59,-27,65,-6,26,62,
  /* [516][0][][] */ 60,-51,127,104,-46,-11,-35,-3,-74,29,43,-18,26,34,3,-112,
  /* [517][0][][] */ -21,104,51,-6,127,-24,-88,14,-75,0,-11,-17,-4,-64,-93,-2,
  /* [518][0][][] */ -15,4,-78,27,-1,96,100,7,-26,-82,34,127,5,-99,-44,26,
  /* [519][0][][] */ -54,-86,-24,5,16,96,127,31,122,1,-15,-16,-51,62,-63,-35,
  /* [520][0][][] */ 102,-46,-36,-95,1,33,48,-11,-81,0,-73,-84,76,127,-14,-110,
  /* [521][0][][] */ -127,-54,64,-25,2,52,-19,-22,117,35,-20,-39,28,-27,57,6,
  /* [522][0][][] */ -9,31,42,12,101,-39,77,127,26,4,-31,-37,69,-49,19,-58,
  /* [523][0][][] */ 73,-19,-2,-124,68,127,-36,23,-58,-1,29,-31,-15,-55,16,1,
  /* [524][0][][] */ 20,-21,38,-127,46,-62,-58,-36,24,-21,-20,8,121,42,-60,-14,
  /* [525][0][][] */ -73,-6,3,-103,0,-123,-80,45,25,69,127,56,29,42,-72,116,
  /* [526][0][][] */ -100,-4,-42,29,28,-53,0,-77,4,127,11,-9,107,-75,68,-42,
  /* [527][0][][] */ -19,1,51,-89,-1,60,-61,-1,-26,33,127,92,-5,91,-70,12,
  /* [528][0][][] */ -47,30,45,14,-25,-22,127,-36,66,-33,38,37,-45,-82,7,-90,
  /* [529][0][][] */ 69,74,7,-9,93,-41,-127,11,18,11,51,16,-23,16,-23,26,
  /* [530][0][][] */ 127,28,33,4,84,-67,-64,53,0,-9,-6,12,15,-6,7,-82,
  /* [531][0][][] */ 29,52,-5,-33,-127,81,-37,-44,-49,-40,-5,14,55,46,-29,14,
  /* [532][0][][] */ 66,-119,9,4,80,38,76,-79,-18,-13,40,-111,10,22,27,-127,
  /* [533][0][][] */ -80,-52,-26,33,-84,22,-45,-117,-45,-50,-127,27,-81,-4,42,25,
  /* [534][0][][] */ 73,-75,91,46,69,-46,127,62,2,-36,116,-49,-98,-37,56,-34,
  /* [535][0][][] */ 9,-34,45,17,97,58,-64,-62,-8,-75,-29,40,34,127,-29,27,
  /* [536][0][][] */ -39,-49,-45,57,102,32,127,58,-62,25,-55,-2,74,37,42,-10,
  /* [537][0][][] */ -1,-16,-43,-94,-29,36,48,-59,7,41,78,-31,-43,-121,127,76,
  /* [538][0][][] */ -22,10,56,-5,127,-37,-70,88,93,-24,-19,-51,25,-6,8,56,
  /* [539][0][][] */ -48,-22,7,-40,10,127,-36,-108,0,-29,103,7,-35,96,6,84,
  /* [540][0][][] */ -38,13,9,-43,87,52,-127,-83,13,3,-7,-34,124,125,13,13,
  /* [541][0][][] */ -1,-20,-39,58,-100,-88,71,36,-62,49,-127,-4,105,-65,-28,-14,
  /* [542][0][][] */ -95,23,46,-73,81,49,46,-102,10,-42,22,127,-25,-6,-20,105,
  /* [543][0][][] */ 22,-39,47,-11,57,64,22,127,5,-54,84,-96,77,-122,12,26,
  /* [544][0][][] */ 92,11,-3,-60,89,60,-95,-68,69,-37,8,-13,-101,-58,127,-6,
  /* [545][0][][] */ -43,-127,7,-13,21,-47,-21,-37,-39,13,10,-24,43,-9,-69,7,
  /* [546][0][][] */ 40,-59,-119,3,-26,-1,29,64,-127,48,-38,59,18,26,-21,9,
  /* [547][0][][] */ -19,-7,-56,-57,66,-3,-3,5,12,-58,-6,127,-39,3,-33,15,
  /* [548][0][][] */ 33,-89,-127,3,16,-1,1,42,58,124,-58,-16,-25,-9,53,38,
  /* [549][0][][] */ -2,8,16,-33,127,-38,-1,29,-7,29,-79,18,-25,-8,16,-73,
  /* [550][0][][] */ -28,-62,106,17,68,18,127,-13,54,-35,-92,69,119,-3,-42,-56,
  /* [551][0][][] */ 42,-9,-58,69,-95,18,2,-17,127,-36,-18,-115,36,114,50,-84,
  /* [552][0][][] */ 6,12,-3,19,14,24,127,-79,38,3,44,70,15,51,34,-69,
  /* [553][0][][] */ 21,-115,-77,19,-24,-127,-21,-33,16,4,101,34,75,-23,52,32,
  /* [554][0][][] */ 127,-62,5,-28,-116,6,35,-74,-23,-22,62,8,32,59,13,48,
  /* [555][0][][] */ 78,33,-7,-47,-49,-17,-1,88,94,-127,13,89,71,-25,118,-65,
  /* [556][0][][] */ 30,-43,43,4,-70,-14,14,31,-121,-5,16,11,-24,17,14,127,
  /* [557][0][][] */ -69,54,-5,16,88,-7,49,127,31,-4,65,82,21,63,-6,-2,
  /* [558][0][][] */ -24,-58,-44,-5,13,-24,-11,31,42,118,84,-61,-123,-23,127,-56,
  /* [559][0][][] */ 8,-7,80,21,35,-25,-52,-4,29,85,127,-16,-22,-48,-16,-27,
  /* [560][0][][] */ 27,9,-28,-70,-94,-53,26,97,35,-127,31,-30,-52,-11,67,18,
  /* [561][0][][] */ 44,78,85,4,-64,-7,52,-90,6,93,-87,-17,5,-127,11,-13,
  /* [562][0][][] */ 14,-97,4,-20,42,80,-127,-88,23,-36,38,-47,35,-29,-5,-28,
  /* [563][0][][] */ -35,27,29,68,-43,-8,82,76,-62,99,6,99,-127,83,-31,23,
  /* [564][0][][] */ 127,77,35,46,-31,-72,-5,-52,-119,103,-73,102,119,-32,37,27,
  /* [565][0][][] */ -6,-127,-79,-69,107,-39,43,85,4,-4,-16,82,-28,-3,-92,31,
  /* [566][0][][] */ -44,39,38,74,-8,-42,-127,62,99,-50,13,-56,82,1,25,-31,
  /* [567][0][][] */ -62,-33,-18,62,-68,32,-58,-49,69,48,-98,-127,51,-68,72,-76,
  /* [568][0][][] */ 11,118,1,-29,-79,-40,45,127,-18,-8,68,-13,-27,-11,-21,-28,
  /* [569][0][][] */ -12,7,56,-12,127,13,60,28,34,18,-88,-22,24,-104,0,-43,
  /* [570][0][][] */ 127,95,23,-47,55,89,83,14,-96,-75,-27,33,-35,37,57,107,
  /* [571][0][][] */ 60,111,105,-1,-28,2,36,28,-87,-96,-127,-105,-68,-10,-55,80,
  /* [572][0][][] */ -48,2,-21,-73,20,50,-47,-51,127,9,40,-80,-55,-48,-59,-16,
  /* [573][0][][] */ 104,-11,88,17,-18,127,-4,-40,40,80,88,-72,69,-55,-17,-38,
  /* [574][0][][] */ 33,68,6,64,121,9,-5,-42,16,-55,127,-84,74,-27,95,7,
  /* [575][0][][] */ -92,-6,70,64,-39,-59,80,13,2,-11,24,-127,13,-6,-10,-85,
  /* [576][0][][] */ 30,20,-65,32,38,-47,-24,-11,-64,-26,-127,36,-48,8,42,-8,
  /* [577][0][][] */ -31,16,-41,-56,29,-35,-101,-23,-6,82,19,29,84,127,-7,-64,
  /* [578][0][][] */ -74,-99,12,127,108,-77,-64,-46,119,-6,-2,-121,-112,16,55,-101,
  /* [579][0][][] */ -11,52,88,-54,-9,-4,25,107,-4,-127,44,-36,-7,-45,-59,57,
  /* [580][0][][] */ -35,29,25,34,0,-86,-82,31,-14,93,73,-43,-2,41,108,127,
  /* [581][0][][] */ 127,-10,93,40,102,13,-100,-98,73,65,2,57,-122,34,17,-4,
  /* [582][0][][] */ 11,-71,36,86,35,89,-14,7,19,-127,-55,-75,30,48,56,-30,
  /* [583][0][][] */ -7,-25,-36,54,-15,-38,-52,-71,-6,16,41,-18,-127,-55,-62,-56,
  /* [584][0][][] */ 9,-16,-32,-69,73,-31,-127,-115,65,93,38,49,-33,46,-2,45,
  /* [585][0][][] */ 57,-17,45,-25,55,-55,9,91,-3,22,-67,6,55,-127,-36,-35,
  /* [586][0][][] */ -58,-127,110,108,-44,8,37,13,109,61,123,1,97,48,87,118,
  /* [587][0][][] */ 6,-28,-51,-43,-127,15,-2,5,-8,87,-4,42,24,-93,11,3,
  /* [588][0][][] */ 38,24,-50,-27,-14,53,-118,-51,2,-8,127,-54,-67,-63,-72,-42,
  /* [589][0][][] */ -108,-9,35,-17,-4,-22,13,-44,127,-49,115,-28,79,32,-35,31,
  /* [590][0][][] */ -127,-4,-31,29,-52,50,44,-81,44,-63,39,6,99,64,59,50,
  /* [591][0][][] */ 62,-22,-97,50,34,106,-127,34,3,-64,10,-47,-59,21,-67,-44,
  /* [592][0][][] */ 14,127,-15,-32,-4,80,-16,57,-59,52,35,33,33,-14,85,-28,
  /* [593][0][][] */ 20,-61,30,-50,-29,31,70,-32,7,-127,-27,-35,-57,-13,10,121,
  /* [594][0][][] */ 34,-51,-22,-4,82,-38,-5,-127,66,-37,4,-19,5,48,99,-9,
  /* [595][0][][] */ -15,-102,-38,-79,-55,34,-6,48,15,34,127,6,-103,28,-29,-1,
  /* [596][0][][] */ 47,-72,-10,18,103,13,45,15,100,-27,25,-43,4,127,-79,-79,
  /* [597][0][][] */ -83,-70,47,-61,44,-70,60,118,21,50,29,127,-20,-23,-36,83,
  /* [598][0][][] */ -1,-18,-43,36,-96,61,-24,2,-51,-23,40,-105,17,-127,72,84,
  /* [599][0][][] */ 6,-126,79,82,-14,-35,44,74,-97,127,27,60,109,-37,-50,38,
  /* [600][0][][] */ 10,-8,-1,50,127,41,-88,-50,1,-37,-23,-125,2,-88,6,-58,
  /* [601][0][][] */ 61,62,-35,-85,-55,73,84,90,127,80,0,-47,89,-22,38,-1,
  /* [602][0][][] */ 18,-15,4,18,96,1,-60,106,-9,-43,-51,-75,127,-21,10,-105,
  /* [603][0][][] */ -105,42,-72,-22,-94,25,-17,85,52,124,65,49,8,-27,-66,-127,
  /* [604][0][][] */ 71,-23,-44,-27,-30,4,52,18,-72,13,22,0,43,-127,27,127,
  /* [605][0][][] */ 55,58,55,-9,-71,127,48,1,-30,-39,0,-1,-26,86,37,22,
  /* [606][0][][] */ -15,62,22,49,-51,-17,-45,-127,-6,106,-33,-66,-106,39,39,-14,
  /* [607][0][][] */ -20,47,66,-95,54,19,127,-40,11,24,-68,71,-78,33,-35,-11,
  /* [608][0][][] */ -63,-66,-50,49,27,92,127,85,104,39,16,-74,0,120,-33,43,
  /* [609][0][][] */ -64,70,48,-79,22,7,-74,-9,75,71,0,18,-9,24,-127,-80,
  /* [610][0][][] */ 15,-13,34,11,-6,56,25,55,27,-41,15,-28,82,-127,6,-25,
  /* [611][0][][] */ -66,42,6,127,48,111,57,47,29,84,33,-4,112,-59,-20,-96,
  /* [612][0][][] */ 70,73,127,-4,-26,-11,-26,-20,-94,20,-9,31,-30,-31,-21,-27,
  /* [613][0][][] */ -64,38,64,37,0,49,121,127,60,-90,18,-57,-83,-12,39,54,
  /* [614][0][][] */ -34,-70,-48,127,11,28,-29,-68,28,-22,24,-48,50,-23,-36,22,
  /* [615][0][][] */ 42,80,-48,-23,68,-77,-20,86,127,-113,30,-2,63,5,0,-60,
  /* [616][0][][] */ -57,53,-69,24,30,-39,50,109,127,27,-16,-66,-60,97,-17,-50,
  /* [617][0][][] */ -13,89,-125,34,47,-56,113,28,42,122,74,127,24,5,91,17,
  /* [618][0][][] */ -14,-16,48,21,7,37,75,40,127,-88,48,68,-50,33,11,97,
  /* [619][0][][] */ 69,-21,-48,7,-25,4,53,46,-41,127,64,-31,77,11,52,-22,
  /* [620][0][][] */ -61,12,32,-87,-66,127,-74,25,3,65,-62,-7,61,-88,-47,-8,
  /* [621][0][][] */ -18,-44,20,-8,91,35,31,-50,17,-8,82,20,-39,-127,63,-54,
  /* [622][0][][] */ -65,68,-112,112,-7,-127,-107,39,-14,99,-108,-54,-14,33,37,113,
  /* [623][0][][] */ -24,30,28,-15,5,120,16,-60,99,-17,-31,-127,-100,43,9,62,
  /* [624][0][][] */ -6,18,25,-38,62,-24,-43,-60,47,42,23,6,7,127,-2,-56,
  /* [625][0][][] */ 88,31,51,20,127,-41,48,103,64,8,-90,54,-20,32,7,-113,
  /* [626][0][][] */ 7,54,24,-21,-14,17,32,-13,-127,52,12,21,51,3,-46,-77,
  /* [627][0][][] */ 28,-37,-100,-2,86,48,-63,-35,-127,-56,-7,98,88,0,81,-5,
  /* [628][0][][] */ 6,127,-86,45,27,38,38,45,-107,37,33,38,35,48,-14,-42,
  /* [629][0][][] */ 71,-75,-63,-48,-89,-25,127,112,-1,32,41,9,109,-27,72,11,
  /* [630][0][][] */ 53,-15,-66,-26,93,-115,-10,-10,-34,76,127,7,76,-97,63,1,
  /* [631][0][][] */ -53,23,-26,-62,27,3,127,-15,30,-13,-31,115,-22,-43,-20,-7,
  /* [632][0][][] */ -49,-57,-7,57,-83,67,52,-127,-60,-18,88,105,99,19,44,23,
  /* [633][0][][] */ 23,-94,-35,41,-81,-21,58,-41,-85,127,-18,-78,-32,4,13,-85,
  /* [634][0][][] */ -23,-5,-30,-32,8,-24,-127,31,-20,-16,-26,21,10,-41,-40,34,
  /* [635][0][][] */ 20,62,73,26,-60,-45,17,-79,12,127,-6,17,114,-79,15,-1,
  /* [636][0][][] */ 75,40,3,26,76,127,-8,-89,2,-77,-34,9,93,14,73,-54,
  /* [637][0][][] */ 28,-55,-16,2,-51,-53,-25,33,64,40,127,-24,-6,3,39,14,
  /* [638][0][][] */ 33,58,62,-56,-17,77,78,-57,13,-127,71,67,105,29,7,-11,
  /* [639][0][][] */ 30,0,127,11,67,40,-46,7,22,7,-23,-3,71,-19,-7,-98,
  /* [640][0][][] */ -68,-1,78,64,-17,108,-54,-63,-14,60,-127,-69,54,12,-72,-64,
  /* [641][0][][] */ -40,0,51,-89,-23,17,-75,-45,-58,84,-39,127,34,-31,-8,106,
  /* [642][0][][] */ 34,-21,38,-39,-24,-99,106,27,44,-127,69,95,49,10,102,-26,
  /* [643][0][][] */ -127,5,32,-127,23,-38,111,-17,-10,20,-92,41,68,5,1,-61,
  /* [644][0][][] */ -28,5,20,-89,-27,61,127,68,52,10,37,-6,86,89,-30,3,
  /* [645][0][][] */ 28,17,84,50,-43,27,-104,0,15,-47,60,86,-41,5,-45,-127,
  /* [646][0][][] */ -98,-36,-35,38,13,29,-12,44,127,73,92,-61,-11,42,19,3,
  /* [647][0][][] */ -12,-14,31,79,-63,-127,15,-68,45,27,-1,5,-48,-17,121,-4,
  /* [648][0][][] */ 27,8,83,-121,59,22,-27,-45,68,29,94,21,-47,11,41,-127,
  /* [649][0][][] */ -92,121,30,93,-76,39,127,106,-66,-28,29,-34,58,-35,-1,-42,
  /* [650][0][][] */ -19,-35,-5,-33,127,20,32,-33,10,-22,26,-12,17,-57,36,98,
  /* [651][0][][] */ 45,42,-80,24,-64,118,77,31,52,-127,49,13,46,5,-59,-52,
  /* [652][0][][] */ -14,69,7,-22,27,-39,-42,-23,56,-24,11,5,-25,-41,-6,-127,
  /* [653][0][][] */ 9,-71,61,-43,-5,66,-71,30,75,9,71,-127,-64,12,-20,-72,
  /* [654][0][][] */ 94,45,22,52,-40,40,86,-127,4,-124,-44,41,-45,-113,-38,-92,
  /* [655][0][][] */ 24,3,-19,36,17,-29,50,47,53,-15,127,35,14,-20,-6,-1,
  /* [656][0][][] */ 127,-10,-18,10,25,2,85,56,121,-29,-13,-21,26,2,-53,-57,
  /* [657][0][][] */ -50,-53,127,126,109,-49,43,20,-6,65,-35,44,-27,40,-50,-41,
  /* [658][0][][] */ -68,-26,30,-86,-30,-17,-127,9,117,67,-40,-94,-63,6,-67,-52,
  /* [659][0][][] */ 106,-84,-59,89,72,-34,-84,-25,116,127,-105,-61,-91,22,-7,5,
  /* [660][0][][] */ 127,30,-32,-14,-6,41,-19,-51,-41,-4,-33,-2,-4,-8,-70,6,
  /* [661][0][][] */ -50,46,12,-127,63,73,83,-73,-17,-96,13,112,22,14,-8,124,
  /* [662][0][][] */ -25,-53,-12,45,-25,-64,34,87,-71,-31,-45,-30,50,127,-101,77,
  /* [663][0][][] */ 16,-3,40,43,60,-27,-55,-71,17,-73,-94,-16,127,-7,2,-119,
  /* [664][0][][] */ 3,-24,2,-55,2,28,-15,51,37,34,56,-54,86,26,-4,127,
  /* [665][0][][] */ -14,40,63,0,-14,-110,106,124,-74,26,109,-127,-102,2,50,5,
  /* [666][0][][] */ 48,30,127,-8,-20,-5,30,5,-82,14,0,12,71,-19,49,-122,
  /* [667][0][][] */ 45,19,-93,-127,-59,-116,43,73,75,5,-69,59,8,10,47,54,
  /* [668][0][][] */ -29,-54,-30,-33,-36,32,-30,-74,-33,81,28,-95,-127,30,104,16,
  /* [669][0][][] */ 32,1,103,21,42,-58,125,-101,-69,66,4,-13,-110,-49,127,-37,
  /* [670][0][][] */ 57,38,-49,-68,37,-23,-127,-26,8,7,-49,21,61,-2,31,4,
  /* [671][0][][] */ -54,-3,36,67,104,14,98,68,9,38,-28,26,127,-73,77,-96,
  /* [672][0][][] */ 0,-36,12,-127,-42,-22,2,9,-25,-16,23,-12,9,-74,39,106,
  /* [673][0][][] */ -47,-112,13,-33,102,81,99,0,28,-26,-55,127,5,63,-95,39,
  /* [674][0][][] */ 19,96,1,-15,30,-55,127,52,41,-84,34,13,29,5,32,16,
  /* [675][0][][] */ -4,-19,65,-93,-8,-21,-117,-61,118,69,103,102,-114,34,-127,-90,
  /* [676][0][][] */ -15,-42,43,24,52,35,-24,-127,11,69,-41,-66,-47,-5,-109,62,
  /* [677][0][][] */ 42,-49,-50,-56,-8,-59,-13,45,-36,3,1,-5,1,6,-127,-11,
  /* [678][0][][] */ 127,-4,116,-72,34,-15,122,41,-124,-77,-104,8,-45,52,30,-91,
  /* [679][0][][] */ 40,-3,20,67,-58,-37,-73,14,-29,62,-3,17,-127,19,35,97,
  /* [680][0][][] */ -82,-20,-127,-87,82,-44,40,23,-30,103,-78,-25,-33,9,-126,108,
  /* [681][0][][] */ -94,20,-16,-26,85,114,-49,38,58,33,127,10,73,-67,-23,-72,
  /* [682][0][][] */ -10,-30,13,-27,62,9,34,33,55,57,118,11,1,-127,-58,92,
  /* [683][0][][] */ 80,37,-54,-37,127,-20,-122,-35,56,85,-16,36,-11,48,-88,-86,
  /* [684][0][][] */ -82,-36,-73,-60,-97,-89,19,127,-27,14,-40,-39,-38,-1,0,56,
  /* [685][0][][] */ -61,7,9,-33,-21,43,-13,-75,-93,36,-6,4,-17,-127,-6,48,
  /* [686][0][][] */ 74,22,120,-92,-22,22,-18,62,53,127,39,-53,-38,-40,47,83,
  /* [687][0][][] */ -3,6,29,-16,15,95,127,-16,38,-27,-67,-66,96,-83,0,-88,
  /* [688][0][][] */ 59,9,53,122,-125,-52,-14,-55,57,-6,-31,45,127,28,-24,-79,
  /* [689][0][][] */ -111,-127,20,61,-46,-56,63,-53,33,-31,59,13,24,22,79,-37,
  /* [690][0][][] */ -25,-6,-39,127,50,-77,30,29,100,-9,-52,-25,93,29,77,-45,
  /* [691][0][][] */ 69,-59,-41,-14,97,0,59,104,-46,58,28,49,127,-34,-75,-84,
  /* [692][0][][] */ -70,-25,-26,-85,48,-120,-44,-116,99,60,10,17,95,127,-1,-60,
  /* [693][0][][] */ -100,-75,-75,-18,3,-23,127,-9,114,67,18,59,46,-30,14,-75,
  /* [694][0][][] */ 117,-59,-53,-102,-77,-97,-35,-78,4,-8,36,29,52,4,127,68,
  /* [695][0][][] */ -127,-26,-31,6,-55,94,3,-60,-118,85,43,0,26,-91,21,36,
  /* [696][0][][] */ 5,9,-6,1,26,13,-12,-69,-26,25,-27,11,63,-102,13,-127,
  /* [697][0][][] */ -38,11,-22,8,-13,6,11,18,2,48,-79,-19,-81,12,-127,-20,
  /* [698][0][][] */ -1,127,-37,-38,-39,8,24,53,-99,-58,-63,53,-8,-57,-96,30,
  /* [699][0][][] */ 48,21,-86,127,37,-105,-19,76,53,57,27,-70,-72,-40,0,22,
  /* [700][0][][] */ 89,-41,9,-48,-94,49,127,28,-45,-63,13,77,120,19,-34,13,
  /* [701][0][][] */ 55,-95,103,56,61,70,60,-62,-5,15,127,-90,-120,107,-110,-34,
  /* [702][0][][] */ 127,-25,-3,-78,46,-86,-13,-11,47,41,69,73,59,-25,-16,-21,
  /* [703][0][][] */ -17,-127,10,53,9,-16,59,97,-2,21,-66,-17,35,34,-34,89,
  /* [704][0][][] */ -32,-89,40,127,69,-2,117,123,6,71,40,-41,28,107,119,15,
  /* [705][0][][] */ -35,14,113,-22,52,-32,122,25,-62,15,18,74,127,52,30,42,
  /* [706][0][][] */ -2,-73,9,-9,12,48,-66,-38,-14,91,69,-95,5,-127,62,55,
  /* [707][0][][] */ 83,-34,94,-20,-127,-51,-10,-5,67,-43,30,-98,18,-2,3,-6,
  /* [708][0][][] */ -22,78,-96,49,-101,-39,12,-41,64,-127,-1,31,59,81,-69,69,
  /* [709][0][][] */ 1,-9,-92,-122,65,-59,110,-39,49,30,-71,37,123,34,-23,-127,
  /* [710][0][][] */ 43,30,12,-50,-39,127,27,-28,-63,14,40,-56,-44,53,-53,48,
  /* [711][0][][] */ 117,-64,-110,-127,91,86,1,70,-1,37,94,18,-43,17,-47,-2,
  /* [712][0][][] */ 66,32,-62,35,36,2,-127,-1,-2,-59,34,-40,-68,-8,-70,-70,
  /* [713][0][][] */ -90,-44,13,-51,127,-28,37,-22,14,2,15,34,72,-33,27,43,
  /* [714][0][][] */ 5,-37,-127,-3,75,-19,51,-7,17,32,-26,35,0,-123,16,-32,
  /* [715][0][][] */ -78,-6,-7,-51,-55,59,-54,-33,127,26,77,-60,84,74,-20,93,
  /* [716][0][][] */ -32,63,-127,23,93,-71,50,5,-62,17,48,92,50,-79,70,-100,
  /* [717][0][][] */ -20,38,40,127,111,-38,68,40,8,54,90,-6,-52,37,9,-38,
  /* [718][0][][] */ -75,19,35,24,21,33,-100,-19,49,108,-78,-124,42,127,0,-49,
  /* [719][0][][] */ -44,70,50,-10,3,-26,-57,-12,-99,127,61,40,-33,-46,33,20,
  /* [720][0][][] */ -17,119,-53,51,-22,-14,-11,-31,19,40,42,127,-46,11,54,34,
  /* [721][0][][] */ 66,-72,26,-35,-87,41,51,95,72,-39,127,18,-50,12,-5,-34,
  /* [722][0][][] */ 12,-62,-78,-23,58,127,91,32,-39,57,114,69,72,18,8,-115,
  /* [723][0][][] */ 14,-7,49,79,50,-61,105,66,-68,-127,40,-66,-25,-76,32,-2,
  /* [724][0][][] */ -17,66,7,41,-18,-85,40,1,17,127,-72,-22,-44,-12,84,32,
  /* [725][0][][] */ -44,21,-15,-12,36,-46,19,-1,10,-27,11,34,-10,127,4,-50,
  /* [726][0][][] */ 54,116,41,-50,-45,10,-56,59,-82,127,45,-63,-44,-23,-80,-67,
  /* [727][0][][] */ 22,50,81,13,70,71,-20,-13,-16,-29,-20,-27,32,-12,40,127,
  /* [728][0][][] */ -64,-29,64,13,-34,25,61,-20,-27,47,-13,-17,127,-28,82,12,
  /* [729][0][][] */ 18,-113,78,50,-72,28,47,-61,42,112,44,-43,127,20,31,-125,
  /* [730][0][][] */ -25,-87,-63,57,-71,23,-118,37,-89,69,-21,-107,127,-88,75,108,
  /* [731][0][][] */ -127,-4,-44,-90,101,5,-66,77,46,-58,32,-65,36,53,62,-106,
  /* [732][0][][] */ 100,-32,-90,127,93,11,-4,42,52,-31,-100,85,82,-88,-94,-34,
  /* [733][0][][] */ -7,39,11,-21,-12,35,112,52,-9,-15,-67,75,-77,-127,14,7,
  /* [734][0][][] */ 127,-19,40,-67,6,-7,47,-6,-5,80,6,28,-66,109,-47,57,
  /* [735][0][][] */ -79,60,-54,-62,11,103,13,127,29,13,82,-24,-47,-46,-73,48,
  /* [736][0][][] */ 24,127,11,38,2,64,50,114,121,-17,118,-35,114,93,75,27,
  /* [737][0][][] */ 112,8,2,-37,-89,62,127,18,-70,70,82,-7,19,-11,-27,-76,
  /* [738][0][][] */ -54,-43,2,64,-18,-46,-46,-17,43,33,20,42,93,111,127,-37,
  /* [739][0][][] */ 65,-44,-26,-38,-54,-46,14,67,127,38,126,-2,-58,77,14,110,
  /* [740][0][][] */ 46,51,-120,-54,-126,58,83,17,-40,47,-66,127,-49,-39,26,-16,
  /* [741][0][][] */ 127,41,-9,-16,-69,114,-76,55,93,-22,7,119,72,112,-57,29,
  /* [742][0][][] */ -76,17,50,-43,88,118,-22,-26,-73,-127,-95,64,64,-3,-70,-43,
  /* [743][0][][] */ 0,-21,-57,-75,-53,127,76,-96,-24,-49,-124,24,20,-14,-45,-9,
  /* [744][0][][] */ -23,-14,-26,-37,60,-42,72,13,44,0,-127,-19,-85,-55,7,0,
  /* [745][0][][] */ -11,-38,53,-32,-65,-127,-37,61,-41,42,-72,-39,3,10,20,-18,
  /* [746][0][][] */ 127,-104,15,22,-50,8,85,-14,22,68,1,-73,28,46,33,-109,
  /* [747][0][][] */ -28,2,46,-72,27,50,-9,-82,-3,34,0,-11,38,-127,51,-74,
  /* [748][0][][] */ -66,101,48,-106,122,22,123,-22,127,-16,-98,-31,106,-80,43,13,
  /* [749][0][][] */ -54,36,-22,-127,27,41,62,43,44,13,-12,27,81,11,-41,69,
  /* [750][0][][] */ -1,19,5,22,1,27,41,-34,-75,-127,59,-1,77,-17,-76,45,
  /* [751][0][][] */ -32,2,47,-5,108,-53,127,-28,72,48,-16,13,-24,101,-67,-81,
  /* [752][0][][] */ 3,56,6,50,62,70,-118,-127,-18,47,108,32,77,-5,-119,-89,
  /* [753][0][][] */ 26,-123,-34,54,-65,-13,-86,19,-32,42,52,-123,109,-61,117,127,
  /* [754][0][][] */ -5,-33,0,-32,9,-4,-12,39,-66,52,-71,18,-2,-14,-127,28,
  /* [755][0][][] */ 126,-67,-6,48,5,-55,-12,-32,127,-63,108,-112,71,84,75,-63,
  /* [756][0][][] */ 99,-15,41,12,119,-65,-59,127,-6,35,13,21,89,44,71,100,
  /* [757][0][][] */ 29,-82,19,23,-78,79,-53,-127,87,-26,82,-46,50,-28,100,21,
  /* [758][0][][] */ 20,64,-19,52,45,3,-31,127,-56,-61,14,20,68,-122,-39,13,
  /* [759][0][][] */ 10,-11,-49,-78,-33,11,33,8,34,74,13,-15,39,-32,127,-26,
  /* [760][0][][] */ 86,-20,49,16,18,-116,-127,59,-8,59,-30,-50,-26,-81,20,44,
  /* [761][0][][] */ 21,-18,-101,-6,-108,-22,-36,-97,-127,-25,1,34,-6,-98,-6,42,
  /* [762][0][][] */ -9,-2,-62,-2,26,-113,-15,14,-39,69,13,55,100,-25,70,-127,
  /* [763][0][][] */ 114,-106,-53,22,60,35,-37,12,34,-49,50,-74,34,-52,-8,-127,
  /* [764][0][][] */ -23,46,-19,-49,31,2,16,42,-15,30,-17,34,127,-3,-9,-95,
  /* [765][0][][] */ -29,23,-6,86,-17,4,96,56,3,35,89,-30,33,-67,127,47,
  /* [766][0][][] */ -70,-4,53,37,-51,-103,0,1,-32,113,23,-5,8,-69,72,-127,
  /* [767][0][][] */ 57,41,3,36,27,90,-17,-72,28,95,-2,-97,15,-51,127,-82,
  /* [768][0][][] */ -30,-126,-41,21,76,63,23,127,23,-67,-43,-9,-34,13,-85,-46,
  /* [769][0][][] */ -69,22,10,-44,13,17,127,-71,114,8,58,96,-14,95,-31,3,
  /* [770][0][][] */ -74,11,42,-39,-101,127,122,62,17,-118,-41,21,42,-27,38,-21,
  /* [771][0][][] */ 9,-86,114,-62,23,-72,47,16,68,78,-92,127,-110,-2,51,27,
  /* [772][0][][] */ -26,-61,52,-47,-60,-66,11,-127,0,-25,-23,-25,54,-11,70,32,
  /* [773][0][][] */ 111,-65,-127,60,115,73,-60,48,-8,-105,-47,-107,66,98,9,68,
  /* [774][0][][] */ 23,-127,-27,45,22,6,23,-23,6,32,28,15,-5,30,57,-10,
  /* [775][0][][] */ -40,0,58,-39,-96,-27,38,127,10,-28,-17,-12,-55,-39,-39,68,
  /* [776][0][][] */ 49,-41,47,-12,30,-116,75,40,-32,-42,-6,-27,74,11,127,-10,
  /* [777][0][][] */ -21,74,-69,-9,65,19,-12,81,127,-23,0,-56,119,91,-10,-47,
  /* [778][0][][] */ 92,0,-42,-20,-18,-65,55,127,25,-73,122,33,-3,36,59,-2,
  /* [779][0][][] */ -26,-7,29,20,6,68,105,-100,-40,-79,15,90,14,70,55,127,
  /* [780][0][][] */ -53,-111,-16,76,-20,59,16,-19,73,27,100,-118,74,24,127,34,
  /* [781][0][][] */ 109,-39,115,29,115,89,-15,55,-127,12,94,112,-84,-47,-58,52,
  /* [782][0][][] */ -39,41,68,-17,81,-19,127,21,-21,-30,-47,6,7,5,-3,-37,
  /* [783][0][][] */ -127,-3,-16,-68,78,-12,0,31,-5,103,-44,-6,-94,-22,-81,64,
  /* [784][0][][] */ -26,-1,1,-25,-14,39,127,51,-80,43,21,32,-24,-38,-43,-108,
  /* [785][0][][] */ 127,-17,23,48,42,37,-36,10,23,43,-25,-37,52,36,-21,-17,
  /* [786][0][][] */ -32,49,17,-34,22,70,58,-41,48,-51,21,22,-71,50,27,127,
  /* [787][0][][] */ -21,-20,83,-17,35,-127,48,-58,-24,31,12,-22,6,23,48,-31,
  /* [788][0][][] */ 90,127,17,6,10,57,-73,77,-1,-101,-109,-25,16,8,36,-31,
  /* [789][0][][] */ -5,-31,18,82,40,-21,-20,30,-12,-75,4,30,127,20,-5,4,
  /* [790][0][][] */ -56,-15,-26,12,-11,0,-60,-4,122,-13,-127,44,-50,-57,-72,35,
  /* [791][0][][] */ 56,16,-27,35,54,127,-56,56,80,54,40,55,15,32,-57,-106,
  /* [792][0][][] */ 9,-63,-79,13,-52,-11,76,-25,127,-55,-41,-20,37,0,71,-6,
  /* [793][0][][] */ -22,-127,92,10,13,91,117,36,52,-28,90,-11,61,106,-68,42,
  /* [794][0][][] */ 36,48,62,75,-49,-31,-20,108,13,-100,72,-127,27,115,23,-51,
  /* [795][0][][] */ -18,-70,5,-8,-47,79,-55,-57,-42,-19,66,-127,87,13,15,33,
  /* [796][0][][] */ 26,-107,-46,16,21,-127,41,10,-95,47,-10,3,-59,4,-29,-1,
  /* [797][0][][] */ -57,-31,37,-29,-32,127,-86,6,7,71,19,-71,75,-117,36,21,
  /* [798][0][][] */ -68,-48,117,-79,83,-69,-2,-37,111,28,-16,26,37,-33,127,26,
  /* [799][0][][] */ 35,6,-38,3,11,-12,22,-87,53,20,48,22,26,26,127,4,
  /* [800][0][][] */ -36,-43,-34,98,-12,18,-18,-122,30,34,-20,5,9,-8,9,-127,
  /* [801][0][][] */ 49,-58,20,-18,-3,-77,0,-25,-42,-54,-35,87,-52,-15,-15,127,
  /* [802][0][][] */ -53,-15,9,-57,39,-3,-23,44,-127,36,-5,-74,7,38,58,-93,
  /* [803][0][][] */ 44,-43,16,3,-6,69,-73,-123,-26,36,11,-43,-127,29,70,122,
  /* [804][0][][] */ 17,106,79,-74,47,15,-13,-2,-18,54,-56,-127,-26,-67,76,11,
  /* [805][0][][] */ 1,18,38,-106,13,-24,127,6,80,-73,-16,102,-59,-15,-21,124,
  /* [806][0][][] */ 40,-25,-9,-127,-6,119,-72,78,-25,-1,-19,-41,-8,-93,-50,63,
  /* [807][0][][] */ -9,53,-56,32,-54,-10,127,-91,-81,83,32,62,46,99,10,30,
  /* [808][0][][] */ -82,127,-57,-36,-27,-23,-10,26,117,-2,71,-2,-38,35,62,-19,
  /* [809][0][][] */ -68,-59,-66,-65,23,92,-71,97,40,-68,127,-108,-31,37,-85,21,
  /* [810][0][][] */ 3,-109,-30,15,-6,-55,127,25,-15,-43,-5,39,6,7,89,26,
  /* [811][0][][] */ -7,-17,7,68,68,22,58,-20,-127,39,-3,7,-16,-89,-63,-26,
  /* [812][0][][] */ 49,-73,-127,35,-18,4,35,-86,21,-34,106,89,-1,-79,61,36,
  /* [813][0][][] */ -9,-40,-127,-45,-53,1,42,-37,72,34,10,-27,102,28,-17,-91,
  /* [814][0][][] */ -20,15,-8,1,-12,17,20,-66,-3,-43,-7,71,127,47,-2,30,
  /* [815][0][][] */ -127,28,-69,-70,78,12,-29,-66,-17,44,39,127,98,-11,-63,42,
  /* [816][0][][] */ -22,39,-16,1,77,-50,-115,43,34,-43,14,58,66,-12,-127,50,
  /* [817][0][][] */ 49,9,-127,-115,-2,-63,-14,-1,85,22,85,18,83,84,-37,-52,
  /* [818][0][][] */ -18,14,-28,103,18,24,127,0,38,42,-97,-45,-20,-12,-5,-13,
  /* [819][0][][] */ 23,37,99,-65,-2,9,22,-7,5,7,48,8,127,-24,-47,-95,
  /* [820][0][][] */ -75,28,75,70,54,89,13,-127,35,10,-13,3,5,-66,21,-9,
  /* [821][0][][] */ 15,27,82,-41,76,-22,29,1,8,93,127,97,55,-19,-19,-56,
  /* [822][0][][] */ 50,44,-56,-1,58,91,-127,-65,-40,9,56,20,10,-29,38,-70,
  /* [823][0][][] */ 54,-22,11,73,8,-59,59,-23,127,-9,10,-4,-29,71,19,-66,
  /* [824][0][][] */ -91,8,-10,3,-120,42,15,-127,-22,-62,-50,-14,-10,-46,110,31,
  /* [825][0][][] */ -40,-9,-105,-15,-99,2,-30,-14,125,19,4,-1,127,58,16,-34,
  /* [826][0][][] */ -78,-10,-24,-9,-80,91,-39,-72,-127,46,-22,24,89,52,77,47,
  /* [827][0][][] */ 33,99,71,1,75,127,-55,-6,-48,32,-46,-26,17,-50,-33,-20,
  /* [828][0][][] */ 26,-4,127,-38,-73,60,73,62,10,58,5,-94,-9,16,22,19,
  /* [829][0][][] */ -71,-39,49,-84,-18,48,64,0,-20,43,67,74,65,-61,-127,-23,
  /* [830][0][][] */ 110,42,14,28,39,127,1,112,-5,54,22,27,-25,-96,-61,-33,
  /* [831][0][][] */ -50,52,24,77,-104,-24,3,-47,-3,17,-18,10,127,-19,60,19,
  /* [832][0][][] */ 89,32,-22,-3,-20,127,30,-83,44,94,-47,59,14,28,-10,-94,
  /* [833][0][][] */ -79,-66,-51,28,127,32,-112,55,35,98,-46,-19,33,-99,8,71,
  /* [834][0][][] */ -14,127,-13,20,-39,31,-1,58,-6,58,32,-43,59,5,18,3,
  /* [835][0][][] */ 115,-1,84,-83,9,1,-37,22,-100,-1,91,-127,-96,-65,3,-89,
  /* [836][0][][] */ 29,-33,59,80,39,47,1,-80,50,-45,75,-127,-86,-15,-1,-93,
  /* [837][0][][] */ -47,127,4,-79,-26,88,112,53,-24,3,48,-113,-35,-62,46,-18,
  /* [838][0][][] */ -25,43,18,-127,28,-11,108,-89,-4,96,-18,69,11,0,-57,-61,
  /* [839][0][][] */ -125,35,59,47,-76,38,79,-94,95,-5,12,1,-127,100,-27,44,
  /* [840][0][][] */ 56,-8,127,72,123,-71,72,-60,9,-88,-70,43,-26,18,70,0,
  /* [841][0][][] */ 86,54,-22,-127,50,-101,123,-24,21,4,-85,104,-115,10,-16,-88,
  /* [842][0][][] */ -14,-4,-35,44,15,-21,-22,-33,-48,14,-87,21,7,40,-17,127,
  /* [843][0][][] */ -111,29,38,-120,-73,36,-3,90,127,92,14,-50,-4,-46,-5,84,
  /* [844][0][][] */ 76,-6,-58,48,36,-55,-49,23,49,-72,10,127,-25,-21,33,70,
  /* [845][0][][] */ -22,-53,76,79,-61,-127,36,93,-4,89,-71,8,33,74,-111,70,
  /* [846][0][][] */ -25,5,-9,127,-41,-47,58,63,34,78,31,-52,37,8,-79,-73,
  /* [847][0][][] */ -127,61,-42,9,101,120,109,-20,107,40,-36,-43,58,47,50,69,
  /* [848][0][][] */ 0,-37,-60,80,-127,87,-63,-10,-64,-13,60,-39,75,-3,48,88,
  /* [849][0][][] */ 20,2,112,-8,39,75,46,10,127,-41,-12,-35,26,46,66,-37,
  /* [850][0][][] */ 22,-42,-12,16,122,104,-7,13,89,-56,-32,-127,84,87,120,47,
  /* [851][0][][] */ 13,-75,14,46,59,65,-33,-47,127,-59,58,32,-5,42,-4,-19,
  /* [852][0][][] */ 42,0,16,-127,34,-101,-109,67,-19,70,15,-88,90,-62,-26,-4,
  /* [853][0][][] */ -101,-97,21,-21,-127,0,42,50,1,38,43,-32,-29,14,-1,-80,
  /* [854][0][][] */ 25,-4,-7,65,-76,-43,-80,12,63,127,50,-16,26,24,34,57,
  /* [855][0][][] */ -90,-92,-36,86,-40,-5,127,16,29,50,-74,-103,-79,101,52,103,
  /* [856][0][][] */ -111,53,25,-75,2,26,18,-80,-59,24,56,27,127,55,-41,-7,
  /* [857][0][][] */ 95,20,37,-127,69,-43,49,98,81,-100,16,25,-69,-35,-94,-81,
  /* [858][0][][] */ -53,-97,-48,-96,-43,94,89,-73,-55,72,36,-4,64,-127,35,70,
  /* [859][0][][] */ -81,-41,-56,49,-102,46,-87,-32,127,-18,104,-36,-90,4,-32,-28,
  /* [860][0][][] */ 82,119,26,-40,12,2,66,-55,12,38,34,28,7,127,40,12,
  /* [861][0][][] */ -17,35,5,5,18,48,-127,-5,-70,22,-5,-20,10,106,-17,59,
  /* [862][0][][] */ 14,-54,-98,1,64,0,15,61,127,15,32,18,-9,32,-5,-84,
  /* [863][0][][] */ 62,51,-89,-47,46,-71,-22,-46,15,127,87,45,-123,-88,-22,-53,
  /* [864][0][][] */ 31,8,-10,42,-85,-13,78,76,127,10,71,-77,60,-18,18,19,
  /* [865][0][][] */ -42,-59,-74,-7,-9,35,81,-69,4,-10,-35,12,127,65,99,-49,
  /* [866][0][][] */ -16,-15,7,31,63,15,127,21,-65,-79,-70,82,22,-21,-19,16,
  /* [867][0][][] */ 11,5,1,127,88,36,-85,51,95,-15,82,22,-1,-50,-63,-75,
  /* [868][0][][] */ -127,67,-51,23,1,81,-37,-21,-3,10,57,69,94,37,67,-93,
  /* [869][0][][] */ -126,-55,-9,-35,3,-20,-75,-85,-52,2,51,52,97,-127,-54,86,
  /* [870][0][][] */ -78,-127,-20,-28,38,1,57,-2,1,66,89,63,77,-100,-48,-39,
  /* [871][0][][] */ -26,-15,7,5,28,-16,-4,21,0,101,-26,-40,127,-63,79,30,
  /* [872][0][][] */ -29,-53,-44,0,5,-87,-24,-127,3,-47,42,54,64,24,-12,5,
  /* [873][0][][] */ -16,29,39,53,50,47,91,-14,-79,24,-79,33,-46,-36,41,-127,
  /* [874][0][][] */ 113,95,-42,4,17,-83,41,127,-22,-32,-26,41,27,-31,6,3,
  /* [875][0][][] */ -127,20,15,18,93,-12,98,27,64,-80,-59,-37,18,-9,12,11,
  /* [876][0][][] */ -19,-65,39,58,-64,-4,-114,27,127,-71,114,-118,-98,28,94,119,
  /* [877][0][][] */ 127,-19,51,-11,67,-47,86,40,0,106,-8,7,-18,-18,-17,-77,
  /* [878][0][][] */ 30,94,22,-13,20,29,-18,-120,-22,81,9,-88,-8,29,109,-127,
  /* [879][0][][] */ 127,-87,0,121,-95,46,13,-25,-28,37,5,-78,74,75,81,-63,
  /* [880][0][][] */ 70,-17,0,103,-44,-127,-30,63,42,3,-54,13,53,107,-33,-84,
  /* [881][0][][] */ -46,6,97,-60,-49,58,-31,68,-70,-112,50,127,-24,6,-117,81,
  /* [882][0][][] */ -77,78,64,-45,127,79,-109,26,32,77,21,37,51,-59,-43,-40,
  /* [883][0][][] */ 16,23,0,-54,37,-45,68,-65,-15,51,-20,-127,19,18,-72,-31,
  /* [884][0][][] */ 40,48,-20,-27,2,-12,-8,-29,9,44,-113,118,34,24,32,-127,
  /* [885][0][][] */ -112,64,22,32,81,-127,-108,126,-28,-14,-109,55,6,-81,64,12,
  /* [886][0][][] */ 36,-39,52,28,44,-97,65,16,57,127,-49,-66,39,-84,67,-125,
  /* [887][0][][] */ -11,85,33,-2,76,-30,-39,-55,41,60,-25,57,-127,101,49,-2,
  /* [888][0][][] */ 32,46,2,-2,-96,14,-31,45,2,-7,1,-23,-127,-4,-38,14,
  /* [889][0][][] */ 69,8,14,8,-5,-70,-127,-30,42,-52,49,-56,62,74,52,-34,
  /* [890][0][][] */ -40,34,-68,19,-17,57,-5,-127,-35,12,-69,4,-78,-40,11,13,
  /* [891][0][][] */ -77,-35,43,4,53,44,12,-40,127,10,19,7,-14,-8,-48,-32,
  /* [892][0][][] */ 9,11,19,64,48,-25,30,-50,-54,-13,93,-18,36,-55,34,-127,
  /* [893][0][][] */ 37,-62,127,106,37,-41,-65,65,123,38,-14,-62,30,7,27,-94,
  /* [894][0][][] */ 34,-39,13,-14,86,-112,-127,-101,-122,58,-71,-77,-37,-61,-82,-106,
  /* [895][0][][] */ -2,45,58,-15,23,60,-121,-23,-42,-7,3,-52,14,71,14,-127,
  /* [896][0][][] */ 0,-116,110,35,52,20,-44,24,-30,88,-39,-127,-104,-23,-92,-50,
  /* [897][0][][] */ 36,-74,-49,-64,124,101,46,-20,-82,39,2,71,127,39,-16,61,
  /* [898][0][][] */ -99,90,-62,-127,-62,16,18,46,-4,36,56,18,-20,-25,-16,-56,
  /* [899][0][][] */ 60,-25,-15,-7,95,22,127,34,68,-12,-16,-24,63,-14,-26,-14,
  /* [900][0][][] */ -15,23,-87,22,-127,12,80,-15,38,-3,-14,-44,-112,61,-27,1,
  /* [901][0][][] */ 99,127,-48,-40,-12,105,-11,-88,57,-72,36,123,28,96,-83,-66,
  /* [902][0][][] */ -127,9,45,-6,-14,15,78,-40,38,45,-36,13,68,61,89,-10,
  /* [903][0][][] */ -43,14,-26,1,-32,17,-46,-42,-34,20,20,-9,127,-94,47,-45,
  /* [904][0][][] */ -8,-43,-53,90,-90,1,86,-48,33,16,77,-4,-69,26,127,-5,
  /* [905][0][][] */ -28,-105,85,-63,-4,44,127,-85,126,123,73,-108,-94,16,89,-19,
  /* [906][0][][] */ -127,-36,-22,-28,10,-111,-10,76,7,-16,-59,57,34,-15,-108,-4,
  /* [907][0][][] */ 78,35,75,117,-6,-5,77,-127,-25,31,15,111,90,86,35,51,
  /* [908][0][][] */ 57,-15,36,-8,-80,107,115,33,25,-74,-23,127,44,112,-70,-2,
  /* [909][0][][] */ 59,5,28,-29,74,29,75,77,115,-24,17,6,111,-54,-5,-127,
  /* [910][0][][] */ -45,48,-48,-36,20,-4,-79,-118,33,17,-38,22,15,127,6,-19,
  /* [911][0][][] */ -37,46,17,-44,27,54,28,101,-67,-64,5,-86,-127,-70,90,-111,
  /* [912][0][][] */ -41,-46,-56,11,2,54,7,-127,104,59,-14,-103,31,66,82,5,
  /* [913][0][][] */ -21,2,-48,127,-41,15,-49,-80,73,-18,22,61,-23,94,60,-45,
  /* [914][0][][] */ 95,-54,127,-43,-46,54,83,41,42,61,-57,-8,8,44,-65,-88,
  /* [915][0][][] */ 37,71,127,56,30,65,86,19,-41,-69,18,-25,-105,17,8,40,
  /* [916][0][][] */ 52,-11,6,-69,40,-29,65,3,127,30,51,1,-35,6,44,-74,
  /* [917][0][][] */ 38,5,-91,46,37,65,87,62,-13,-79,30,3,-127,89,55,-25,
  /* [918][0][][] */ -33,-33,51,57,-31,-88,69,-18,127,113,6,-74,10,-95,57,33,
  /* [919][0][][] */ -17,48,-25,-8,-14,-19,-127,-22,-19,-29,4,-32,65,-52,-24,66,
  /* [920][0][][] */ -127,3,105,73,-84,-8,7,-85,35,-69,43,95,109,-7,-70,36,
  /* [921][0][][] */ -84,-101,-6,27,92,-2,119,-84,23,125,127,11,-118,52,34,-95,
  /* [922][0][][] */ 29,-2,-11,19,12,-127,-40,-81,-42,46,-68,-50,-21,7,32,-36,
  /* [923][0][][] */ 80,62,-71,20,120,-94,-50,34,-8,71,-127,-3,12,-27,-22,-21,
  /* [924][0][][] */ 95,-16,-7,90,-101,29,53,-40,-127,-25,63,5,-40,103,-110,-111,
  /* [925][0][][] */ -36,-1,-20,3,127,-61,-72,-79,-10,14,32,34,87,-89,-12,-38,
  /* [926][0][][] */ -6,-54,34,-32,-122,-9,-57,16,27,14,14,-83,56,127,-34,-7,
  /* [927][0][][] */ 40,-58,-58,75,-82,55,-127,16,-14,-79,82,-30,53,9,32,97,
  /* [928][0][][] */ 127,5,20,-5,32,-42,50,92,-64,36,-27,-40,-86,-8,-22,-58,
  /* [929][0][][] */ 1,-127,-14,-65,-26,-19,52,79,15,-21,50,-50,-50,-78,-11,-49,
  /* [930][0][][] */ -85,-43,-75,-16,-76,-84,-21,-127,29,58,16,-21,17,41,16,9,
  /* [931][0][][] */ 22,-74,17,66,68,-76,-89,-127,9,-84,11,26,-6,-23,60,8,
  /* [932][0][][] */ -9,-34,-68,87,-51,10,24,-26,-92,-14,24,-4,15,127,71,-25,
  /* [933][0][][] */ 56,71,64,-56,-27,40,36,-43,60,15,-127,-29,31,34,17,-9,
  /* [934][0][][] */ 63,-7,38,-52,127,-48,-65,-80,10,68,38,60,-35,26,-38,-23,
  /* [935][0][][] */ 80,70,-32,-72,-50,-90,-58,10,-127,-12,-6,50,-59,16,-25,52,
  /* [936][0][][] */ 111,78,22,-91,-70,-108,127,-17,93,-14,32,10,44,53,101,12,
  /* [937][0][][] */ 72,-27,42,3,16,12,-100,-31,-61,12,-17,-82,-127,3,40,69,
  /* [938][0][][] */ 51,42,30,66,-37,110,-127,66,53,-76,77,-41,7,39,-43,-6,
  /* [939][0][][] */ 16,80,-127,52,-70,-65,-58,35,-71,-82,-15,103,71,10,-20,65,
  /* [940][0][][] */ 127,-8,-24,16,40,-17,-32,65,80,15,7,-57,-5,65,18,-82,
  /* [941][0][][] */ -10,-34,-69,35,22,-100,40,80,127,101,-74,-113,30,-5,4,-107,
  /* [942][0][][] */ -11,2,58,13,-14,-5,-93,-19,-50,-20,-60,-22,113,127,0,-47,
  /* [943][0][][] */ -37,2,-51,-36,-87,68,72,-93,66,21,-12,6,65,31,-127,-50,
  /* [944][0][][] */ 127,-54,-48,-32,30,18,-13,-4,21,82,-58,-64,-23,-2,58,-3,
  /* [945][0][][] */ 36,104,-36,-29,-58,-8,-2,-42,61,-51,-64,-12,-127,-79,46,43,
  /* [946][0][][] */ -2,44,5,-3,127,78,61,-26,7,24,-48,123,29,-80,55,-97,
  /* [947][0][][] */ 28,-74,-43,88,48,89,-10,41,-66,-4,127,43,-29,-69,14,19,
  /* [948][0][][] */ -14,-127,-71,68,106,-92,-27,3,91,89,9,44,22,95,-112,9,
  /* [949][0][][] */ -69,123,-40,28,-23,-50,68,-18,-33,-77,105,-127,-37,-104,95,123,
  /* [950][0][][] */ 3,48,-59,-14,4,8,21,-27,34,-37,-2,127,13,5,-66,-6,
  /* [951][0][][] */ -2,-100,109,54,-66,127,80,-2,-29,-25,-34,46,-8,-28,51,92,
  /* [952][0][][] */ -24,29,127,-23,18,47,36,-46,51,-44,29,53,7,3,50,126,
  /* [953][0][][] */ 62,52,16,-5,44,-36,17,58,96,-55,-59,8,21,83,-113,-127,
  /* [954][0][][] */ -18,23,44,83,82,-88,28,-19,58,19,20,48,64,-34,-28,127,
  /* [955][0][][] */ 110,-17,51,92,-127,25,51,43,51,-53,-90,123,14,17,105,60,
  /* [956][0][][] */ 2,6,35,-87,10,23,96,19,28,-109,-15,5,-22,127,12,-10,
  /* [957][0][][] */ 13,83,115,34,8,57,-89,-77,-127,-2,-24,-15,21,-112,100,-29,
  /* [958][0][][] */ -2,-4,44,-87,17,93,-18,64,56,43,110,37,126,-108,95,127,
  /* [959][0][][] */ -25,-94,23,126,6,114,127,-72,-31,-48,5,-36,-91,-21,-31,-14,
  /* [960][0][][] */ 57,-56,105,-28,78,-8,37,-91,90,-127,57,69,-4,93,-42,109,
  /* [961][0][][] */ 40,-70,77,-12,49,-127,-9,-67,38,4,28,-115,6,-15,-17,17,
  /* [962][0][][] */ 93,-10,-63,-40,-67,-23,6,-35,36,-89,47,54,101,-11,99,127,
  /* [963][0][][] */ 29,-4,-74,-83,8,-48,-107,29,23,-127,104,-18,15,-101,17,86,
  /* [964][0][][] */ 117,4,-10,118,15,52,-120,-57,-127,-30,-49,67,-7,99,-125,-94,
  /* [965][0][][] */ -21,-28,-95,-123,-127,121,-91,67,46,90,-8,-102,22,117,84,-83,
  /* [966][0][][] */ -21,-67,52,-100,58,-11,127,4,32,116,6,-83,14,-57,82,-69,
  /* [967][0][][] */ 91,2,42,-15,-51,43,39,-33,-45,-24,-6,20,-127,82,-6,-14,
  /* [968][0][][] */ -127,7,8,-22,61,0,10,-50,-40,-7,-14,95,56,56,-32,16,
  /* [969][0][][] */ -124,71,-27,42,86,127,-9,-66,-100,8,67,127,81,-36,49,-21,
  /* [970][0][][] */ 25,-33,14,-26,40,79,-15,-65,29,127,-40,-62,-57,-46,-22,-4,
  /* [971][0][][] */ -87,-17,-63,39,30,-83,43,-37,-4,-42,-52,127,90,-86,-2,-9,
  /* [972][0][][] */ -5,-127,-67,-123,25,11,101,-2,-1,113,-26,-41,-98,64,93,112,
  /* [973][0][][] */ 12,-17,-13,34,18,104,59,0,-10,97,125,-19,12,-127,35,-119,
  /* [974][0][][] */ 92,47,-126,61,-127,35,93,-50,51,34,4,-77,20,26,114,24,
  /* [975][0][][] */ -49,18,-22,49,73,-89,-127,-88,7,10,69,45,-3,65,-34,-5,
  /* [976][0][][] */ 21,6,-54,-44,-34,-10,-58,-57,-95,98,-23,-74,41,-65,44,127,
  /* [977][0][][] */ 3,-12,6,127,41,38,77,0,-1,-81,-6,23,-110,7,22,30,
  /* [978][0][][] */ -24,15,-47,-35,70,53,-25,80,10,-31,100,-1,-49,-35,-37,-127,
  /* [979][0][][] */ -45,-111,17,43,-30,-68,36,-42,29,127,62,-74,21,24,41,82,
  /* [980][0][][] */ -33,-61,37,-127,-4,57,98,25,-121,-11,7,7,92,-76,40,-86,
  /* [981][0][][] */ -10,127,-54,75,-91,87,-19,124,-33,-33,102,47,50,1,51,64,
  /* [982][0][][] */ 127,119,39,-74,-29,-82,4,34,32,33,-63,10,54,-37,5,-30,
  /* [983][0][][] */ -16,7,-31,20,-66,4,4,10,-50,115,10,-77,127,29,-36,-4,
  /* [984][0][][] */ -1,46,14,-50,56,19,112,-47,-69,37,-61,127,-15,34,-91,27,
  /* [985][0][][] */ -32,60,5,-39,-14,-127,14,28,-18,113,-41,82,4,-71,-68,64,
  /* [986][0][][] */ 29,14,-12,-127,-115,-30,84,59,-5,-26,-48,12,-95,104,-42,-32,
  /* [987][0][][] */ 60,7,-12,-76,77,-9,-87,-37,9,-61,-17,67,43,-53,127,-30,
  /* [988][0][][] */ -36,84,-28,-78,-75,-33,-79,39,107,127,-51,85,-32,115,-79,11,
  /* [989][0][][] */ -62,-10,-29,-43,84,109,-20,-33,-23,-13,127,10,59,20,-99,-88,
  /* [990][0][][] */ 25,6,29,9,-22,55,41,3,-7,33,127,74,13,36,-19,-7,
  /* [991][0][][] */ 111,-16,9,-33,-20,-9,89,47,124,-6,46,59,127,2,39,19,
  /* [992][0][][] */ 33,114,73,-60,5,-8,-107,-23,-61,-127,-72,-4,9,55,42,-18,
  /* [993][0][][] */ -14,16,127,-63,-9,36,-21,-102,-62,-4,-65,22,-53,57,-64,-74,
  /* [994][0][][] */ 76,-127,-49,-81,-62,-78,-40,-20,90,-62,15,5,-57,44,40,13,
  /* [995][0][][] */ -12,20,-33,1,-127,73,3,34,8,-29,32,-63,-23,-7,23,-19,
  /* [996][0][][] */ 75,32,22,-110,45,22,-30,35,11,-45,71,-30,-18,34,127,-54,
  /* [997][0][][] */ -58,29,2,-3,42,-21,127,22,16,-46,24,78,-80,-21,-73,-11,
  /* [998][0][][] */ -87,40,5,-1,38,-59,-127,-61,24,109,-11,-55,46,105,-52,-35,
  /* [999][0][][] */ 87,91,-51,41,56,-50,66,-39,-27,4,14,31,37,-10,127,-55,
  /* [1000][0][][] */ -12,-40,49,-26,-34,65,47,-57,-19,127,108,-13,43,73,25,-46,
  /* [1001][0][][] */ -97,18,-127,-40,108,65,7,10,22,52,113,97,28,22,-55,30,
  /* [1002][0][][] */ -47,25,-6,-98,-11,-54,93,-6,69,127,-4,60,-9,-68,-54,103,
  /* [1003][0][][] */ 19,-9,-25,9,-39,-27,7,59,127,28,-55,-99,90,-7,27,-30,
  /* [1004][0][][] */ -36,-122,5,-90,-49,-60,26,-5,24,127,-7,-46,59,50,-64,-47,
  /* [1005][0][][] */ -61,49,12,24,8,63,-79,18,-36,-5,-49,-127,-30,-71,-124,-107,
  /* [1006][0][][] */ -38,59,52,-8,31,29,80,-11,45,16,-15,6,17,127,14,-55,
  /* [1007][0][][] */ -13,-40,57,-24,-43,-60,-23,14,-52,-127,59,-16,-52,52,71,-6,
  /* [1008][0][][] */ -26,16,-2,-83,127,-109,74,60,-55,27,-29,48,-36,-55,-27,29,
  /* [1009][0][][] */ 22,-16,70,43,96,-10,-1,-127,-53,-26,-36,-49,-25,-54,66,-30,
  /* [1010][0][][] */ 11,-15,-15,3,-42,33,-59,-34,28,0,8,-127,6,-27,-13,-31,
  /* [1011][0][][] */ 28,-127,-20,-27,0,63,20,38,120,97,-33,-94,70,-8,-76,-68,
  /* [1012][0][][] */ -19,-42,-81,14,127,7,17,-4,-28,-48,-41,3,-1,-30,107,-39,
  /* [1013][0][][] */ 23,2,20,-41,-5,39,55,-52,0,127,10,-10,116,14,18,-47,
  /* [1014][0][][] */ -127,21,51,-17,90,-49,114,-64,74,21,-81,45,-48,46,-11,-48,
  /* [1015][0][][] */ 8,39,95,-65,45,-48,-65,1,49,-4,124,-127,-59,117,-66,-88,
  /* [1016][0][][] */ 52,0,-127,16,98,-47,-124,80,-50,-28,-4,-72,31,-29,18,-101,
  /* [1017][0][][] */ 2,36,-37,-49,-77,21,26,19,15,-127,-11,-21,31,-10,9,-77,
  /* [1018][0][][] */ -14,21,-50,-34,-13,32,41,49,26,10,12,36,127,2,27,9,
  /* [1019][0][][] */ -9,-122,127,77,-15,-21,-115,4,-88,-82,-8,-16,43,46,-123,125,
  /* [1020][0][][] */ 107,100,15,-10,10,4,-31,-46,70,-42,126,127,-59,-58,-90,-39,
  /* [1021][0][][] */ -6,61,79,-127,102,75,-90,104,72,-89,-10,64,-85,-88,-50,77,
  /* [1022][0][][] */ 74,-34,100,-67,-37,53,127,16,9,-13,-72,-82,-30,18,17,23,
  /* [1023][0][][] */ 90,-55,85,4,-11,-111,50,-127,27,37,16,7,63,-83,64,3,
  /* [1024][0][][] */ 9,-53,-22,22,-127,42,-44,-38,35,2,73,-8,-126,-93,26,24,
  /* [1025][0][][] */ 67,41,127,1,-23,30,-73,3,-32,-60,-18,18,115,8,-47,87,
  /* [1026][0][][] */ -119,-42,-58,43,-6,90,48,-56,-43,-42,127,84,60,77,76,-12,
  /* [1027][0][][] */ 75,-60,-41,-40,28,-13,127,121,95,102,5,-123,43,-67,-41,-31,
  /* [1028][0][][] */ -57,-52,18,-121,68,-41,59,30,-40,5,-24,83,127,-9,-72,31,
  /* [1029][0][][] */ 6,93,5,-127,-108,27,118,-43,13,-44,86,6,48,58,-16,-36,
  /* [1030][0][][] */ 5,15,-11,1,25,-23,127,-81,32,-39,-35,53,-2,39,7,-69,
  /* [1031][0][][] */ 33,12,-62,-127,90,-56,-13,7,14,-11,-38,68,-19,-65,-82,14,
  /* [1032][0][][] */ -64,-30,-103,65,61,-60,-33,-40,-27,62,84,127,49,20,-43,-30,
  /* [1033][0][][] */ -16,-52,-32,11,-24,-29,127,-67,4,63,-6,118,-2,51,-12,-28,
  /* [1034][0][][] */ 85,43,-29,-27,-48,41,-44,38,-50,6,-60,94,-9,55,-127,62,
  /* [1035][0][][] */ 17,-57,31,-99,73,-108,18,-16,32,-67,14,76,-27,-60,6,127,
  /* [1036][0][][] */ 21,-47,98,-117,45,82,56,-30,-74,82,104,12,12,101,-29,-127,
  /* [1037][0][][] */ -28,-12,60,-5,-17,7,57,-16,116,27,42,31,-20,127,-7,-88,
  /* [1038][0][][] */ 34,87,79,-127,-3,-127,-12,111,71,8,31,94,14,-14,-20,18,
  /* [1039][0][][] */ -127,0,7,-45,9,-7,0,-61,25,23,13,17,46,18,-11,9,
  /* [1040][0][][] */ -60,20,9,96,41,127,46,-1,-20,-10,22,-65,-87,-67,-20,-77,
  /* [1041][0][][] */ -64,44,37,84,77,-89,4,-31,-2,24,7,17,61,-26,64,-127,
  /* [1042][0][][] */ 110,-111,-78,-23,-50,55,15,35,-108,-100,-127,-24,16,66,-7,-37,
  /* [1043][0][][] */ -7,-26,-20,13,-19,-24,31,52,50,66,1,6,70,64,38,127,
  /* [1044][0][][] */ -36,-21,-27,26,83,14,3,-110,56,41,74,61,24,-6,-5,-127,
  /* [1045][0][][] */ 41,2,-16,45,58,5,-16,34,2,-84,-25,-5,127,-69,31,-33,
  /* [1046][0][][] */ 49,-41,-35,17,66,101,-109,68,70,-127,90,-1,-49,67,-91,48,
  /* [1047][0][][] */ 8,96,-127,-3,-94,-25,14,47,-16,64,-8,113,-11,9,-12,-18,
  /* [1048][0][][] */ -62,80,20,-25,29,44,96,127,-89,6,-20,-47,-52,-48,-59,-58,
  /* [1049][0][][] */ 5,19,-12,-54,-17,7,29,29,6,-49,62,-37,-13,11,127,28,
  /* [1050][0][][] */ -85,-41,105,43,34,88,-44,-81,16,27,-35,-127,-91,70,53,-120,
  /* [1051][0][][] */ 22,-10,-61,-16,60,-25,-127,-91,-4,7,89,84,83,33,-21,28,
  /* [1052][0][][] */ -4,-58,37,-5,-56,-127,95,-21,11,59,-34,97,67,-7,-35,33,
  /* [1053][0][][] */ 109,22,35,126,-127,-84,-78,66,-11,-46,82,-34,57,116,-43,52,
  /* [1054][0][][] */ -45,12,-97,-41,21,-28,79,-41,106,-127,-14,121,-91,117,37,-110,
  /* [1055][0][][] */ 98,60,40,127,43,-94,-3,84,49,-113,-17,-55,93,86,-43,-93,
  /* [1056][0][][] */ 63,-113,-63,-67,127,51,6,72,0,-40,-71,-15,15,31,-55,-34,
  /* [1057][0][][] */ -11,17,-50,-63,-27,123,106,-94,101,59,-42,-84,75,46,127,-23,
  /* [1058][0][][] */ -63,-60,23,3,13,48,3,-2,-13,65,53,-38,54,13,-4,127,
  /* [1059][0][][] */ 42,-33,8,-9,-14,-2,-101,30,-43,59,-38,-12,-32,-48,-127,6,
  /* [1060][0][][] */ 14,-22,33,38,-25,49,127,88,-33,-10,-37,-48,4,-83,23,72,
  /* [1061][0][][] */ -43,-21,-1,-103,55,46,73,70,-39,-127,5,20,14,56,-65,72,
  /* [1062][0][][] */ 105,39,-2,57,-65,15,-2,22,-108,-29,126,-6,1,-33,-127,46,
  /* [1063][0][][] */ -89,-27,-55,-1,127,-58,-58,84,-83,51,23,74,101,-65,-100,-119,
  /* [1064][0][][] */ 43,-2,19,-18,-25,-2,127,52,-29,-33,-6,-33,21,-23,-3,-9,
  /* [1065][0][][] */ -10,-22,-14,30,-81,85,78,-44,46,-127,-5,-20,-18,70,2,34,
  /* [1066][0][][] */ -10,-18,-30,-68,59,32,-22,-23,127,75,83,-30,-45,84,-122,1,
  /* [1067][0][][] */ -127,8,54,1,67,20,100,30,-104,38,-12,-14,79,-53,-29,-36,
  /* [1068][0][][] */ -91,34,-55,-39,75,-15,72,9,-14,36,-36,-33,56,-20,-41,-127,
  /* [1069][0][][] */ -14,-127,85,54,85,-39,-47,35,-13,-72,-17,86,-16,-28,89,-99,
  /* [1070][0][][] */ 56,-13,-78,26,28,33,-16,-38,61,2,-15,-48,108,-6,-28,-127,
  /* [1071][0][][] */ 6,67,-3,83,79,-127,31,64,-46,84,-53,32,34,-15,-26,-12,
  /* [1072][0][][] */ 44,-32,48,81,28,-57,65,127,-59,-38,8,11,-39,-115,-11,-65,
  /* [1073][0][][] */ -117,-22,18,34,-13,-33,6,-17,120,-66,54,-43,-78,-41,-127,-26,
  /* [1074][0][][] */ 72,1,-18,-62,-34,2,73,88,-6,-100,4,-123,19,127,33,56,
  /* [1075][0][][] */ 38,52,-43,-17,1,-32,41,127,1,62,32,63,56,15,-20,-79,
  /* [1076][0][][] */ 49,127,106,-22,-12,-34,-47,-4,39,122,-113,-26,-18,-54,-93,102,
  /* [1077][0][][] */ -10,-31,50,124,0,27,-127,81,84,-83,7,72,-11,11,-23,52,
  /* [1078][0][][] */ 97,8,-34,-17,57,-127,10,30,-24,39,-23,23,-41,62,21,30,
  /* [1079][0][][] */ 92,0,-20,-41,50,55,-63,-18,-127,-62,13,88,70,6,-60,-31,
  /* [1080][0][][] */ -28,89,127,-43,-51,34,-12,17,42,29,63,-39,-40,22,102,22,
  /* [1081][0][][] */ 127,6,7,16,-33,-54,-1,-45,54,42,13,-33,59,17,96,26,
  /* [1082][0][][] */ -44,-31,31,-3,57,6,17,49,-16,4,30,6,127,-35,-9,-68,
  /* [1083][0][][] */ -8,-33,127,-95,-122,-29,117,111,116,-53,-5,-84,34,100,-46,-56,
  /* [1084][0][][] */ 104,101,-33,31,-54,20,-13,-127,-41,21,-6,59,-106,-20,-19,31,
  /* [1085][0][][] */ -46,-127,31,10,-34,11,19,111,99,-28,-51,-94,117,6,52,-13,
  /* [1086][0][][] */ 58,-51,-38,-91,80,113,-12,36,-55,-3,49,15,50,21,-127,92,
  /* [1087][0][][] */ -55,-64,-10,-20,-41,92,-37,-10,46,-108,28,-127,-56,90,-20,5,
  /* [1088][0][][] */ 30,8,-14,-1,-7,61,40,22,99,-13,127,-87,-2,6,31,-46,
  /* [1089][0][][] */ 75,-5,127,63,-42,-52,88,15,-88,45,-33,81,85,18,5,37,
  /* [1090][0][][] */ 82,-5,15,19,-30,4,42,0,43,52,65,-34,14,127,-3,-24,
  /* [1091][0][][] */ 66,11,-79,20,-49,-48,-23,27,-122,-21,-14,86,-27,3,-127,-59,
  /* [1092][0][][] */ -44,-38,-42,-27,119,-49,127,20,117,-15,-70,-36,-116,-20,0,84,
  /* [1093][0][][] */ 104,-51,-16,-14,-18,-34,127,103,-87,91,-9,-24,-105,23,-70,12,
  /* [1094][0][][] */ 53,-48,43,-108,-42,-11,-9,62,-14,-40,22,-41,-47,-39,-127,-118,
  /* [1095][0][][] */ 27,53,-20,-127,-113,-93,78,43,10,51,-100,-8,31,56,38,19,
  /* [1096][0][][] */ -79,-79,-94,-30,-5,35,17,21,100,-11,127,-105,44,60,77,-120,
  /* [1097][0][][] */ -14,-1,27,65,100,-7,-75,-50,31,-74,102,59,81,127,2,-46,
  /* [1098][0][][] */ 51,-94,8,-61,75,127,15,-53,7,-123,-94,29,40,98,-15,-23,
  /* [1099][0][][] */ -110,56,-74,-50,81,127,125,31,-20,47,-54,-41,31,13,-67,38,
  /* [1100][0][][] */ 77,-35,83,-100,-102,-45,-91,-82,122,-62,21,103,77,-127,-64,-86,
  /* [1101][0][][] */ 30,50,-127,-22,-23,-10,-58,37,66,-53,-36,-44,-9,-36,-68,-20,
  /* [1102][0][][] */ -66,-11,127,22,6,21,46,-9,27,20,-18,-4,-17,-21,6,-26,
  /* [1103][0][][] */ 56,47,53,-3,117,51,-53,-70,33,61,-41,-49,5,-61,127,17,
  /* [1104][0][][] */ 25,70,-33,-47,7,56,127,69,-60,7,74,70,12,-92,-83,-13,
  /* [1105][0][][] */ -5,-56,-18,-32,-24,14,-2,68,45,13,-18,-127,-61,-36,3,-61,
  /* [1106][0][][] */ 74,-29,-24,-127,-56,10,-9,37,110,-7,-12,-36,-25,-36,-40,-31,
  /* [1107][0][][] */ 26,-17,86,-127,72,-14,81,-70,-1,50,-45,39,81,-112,-21,-45,
  /* [1108][0][][] */ 55,-10,-13,-103,10,-127,-31,-25,-38,82,-26,-30,-13,38,5,-48,
  /* [1109][0][][] */ 126,-76,27,101,48,-76,109,-45,-57,13,-28,103,122,53,127,-32,
  /* [1110][0][][] */ -9,-8,54,-57,-36,-45,-35,-107,-11,127,27,105,25,29,-27,-40,
  /* [1111][0][][] */ -29,91,-64,113,6,60,120,10,84,-56,-61,-30,-43,110,44,-127,
  /* [1112][0][][] */ 66,127,-15,-7,15,50,-65,60,57,111,-72,-3,106,-47,-30,-11,
  /* [1113][0][][] */ 67,88,117,40,-107,-55,-51,18,127,65,75,-11,-38,43,26,-50,
  /* [1114][0][][] */ 40,-29,-105,35,20,0,61,124,-18,-52,58,-48,49,50,35,127,
  /* [1115][0][][] */ 30,-68,51,70,125,21,-30,-50,-60,64,-127,15,-26,-102,33,-25,
  /* [1116][0][][] */ -31,-35,-30,9,34,56,30,42,-33,-44,-23,-25,127,-47,-49,-20,
  /* [1117][0][][] */ 46,108,127,48,51,-19,-19,-107,-45,7,34,-66,47,-22,10,-22,
  /* [1118][0][][] */ 93,-71,107,-76,3,21,127,-94,-71,-113,64,-17,36,-6,41,31,
  /* [1119][0][][] */ 39,65,-61,-31,114,55,-121,109,-120,104,127,46,-39,50,61,91,
  /* [1120][0][][] */ -94,66,-43,-121,110,-63,-86,-15,21,28,-60,127,-15,-82,-68,-46,
  /* [1121][0][][] */ -77,20,-56,18,88,19,3,-32,39,87,-51,-15,60,127,8,-26,
  /* [1122][0][][] */ -103,21,74,-102,-25,-9,25,-22,127,26,73,52,41,76,50,44,
  /* [1123][0][][] */ 61,-2,65,55,73,127,-49,-51,-15,65,6,-41,-65,-19,-76,-111,
  /* [1124][0][][] */ 127,44,-1,-95,-25,30,14,-8,84,4,-105,-35,97,35,30,-31,
  /* [1125][0][][] */ -65,-32,51,73,-52,-12,-30,72,127,-55,57,-34,63,78,-49,33,
  /* [1126][0][][] */ -42,-65,-32,43,48,22,-21,-25,126,50,65,-127,9,6,-32,-16,
  /* [1127][0][][] */ 12,124,42,-71,-19,-127,32,70,68,53,78,-33,104,25,12,33,
  /* [1128][0][][] */ 46,-91,-100,-58,-28,-50,-23,-127,33,19,85,73,56,18,66,-38,
  /* [1129][0][][] */ -127,35,-100,26,33,65,-57,-6,18,64,5,-23,-49,60,-37,-61,
  /* [1130][0][][] */ -25,-5,-31,-23,-41,-71,47,-34,63,127,98,-85,26,-14,40,-35,
  /* [1131][0][][] */ 13,-111,56,-6,-8,-15,127,22,-38,37,80,94,0,-76,-23,15,
  /* [1132][0][][] */ -127,-88,-21,23,17,-20,17,-20,5,-24,2,44,96,32,-44,-55,
  /* [1133][0][][] */ 46,-17,26,-20,52,-47,-75,-50,113,127,18,3,56,-36,32,-25,
  /* [1134][0][][] */ 19,-2,34,-48,86,22,-62,-48,-89,-13,-95,-127,-62,-90,51,-113,
  /* [1135][0][][] */ -1,127,27,48,-2,-5,-6,5,-54,-102,-17,-14,83,27,44,5,
  /* [1136][0][][] */ 68,50,10,27,-15,25,57,-92,7,83,78,4,-76,-74,-85,-127,
  /* [1137][0][][] */ 45,26,45,-127,16,-9,-30,39,115,-10,83,35,41,41,-40,-1,
  /* [1138][0][][] */ 3,127,26,35,47,53,-35,13,-22,-53,23,15,6,-86,51,-42,
  /* [1139][0][][] */ -75,-20,21,-53,-127,-7,64,-18,-24,53,115,-35,-7,-115,44,21,
  /* [1140][0][][] */ 21,-127,-9,-65,56,-18,-72,-15,-26,95,54,87,39,-102,-46,33,
  /* [1141][0][][] */ 114,60,-39,127,-35,47,-24,5,37,-64,-101,-63,-101,43,-96,58,
  /* [1142][0][][] */ 14,-2,-22,-11,-14,-104,-79,83,69,127,41,-105,-88,-126,-42,64,
  /* [1143][0][][] */ -79,42,-18,-41,-127,34,81,-17,53,52,105,-34,-82,-6,23,11,
  /* [1144][0][][] */ 48,-20,35,47,-31,-54,-72,-19,-127,104,-71,85,21,-27,-95,-35,
  /* [1145][0][][] */ 96,81,-16,66,81,-2,9,42,-7,35,99,-127,71,-29,33,-26,
  /* [1146][0][][] */ 36,49,13,127,-3,80,25,-67,30,-61,-4,74,-66,-110,86,48,
  /* [1147][0][][] */ 66,25,-9,-12,-4,4,-127,-112,11,66,18,67,-35,25,34,39,
  /* [1148][0][][] */ -127,41,-30,10,23,50,-51,-31,10,21,-60,5,-29,-57,-41,62,
  /* [1149][0][][] */ 91,32,127,-37,64,-52,-54,-47,93,-47,69,42,6,17,-9,-114,
  /* [1150][0][][] */ 46,26,-107,93,-50,-58,-40,-127,-69,52,-88,-12,121,-63,-53,-119,
  /* [1151][0][][] */ -68,62,89,-14,-6,127,63,-23,-9,61,29,-58,-57,2,45,-81,
  /* [1152][0][][] */ -19,127,109,-69,90,-8,120,54,94,-9,-67,104,-44,103,-79,-74,
  /* [1153][0][][] */ -15,-91,38,-38,-18,-15,-16,-34,-6,71,38,127,95,-69,35,-29,
  /* [1154][0][][] */ 10,58,-23,-39,15,127,-46,-69,-30,-54,-64,-20,-12,-2,93,-41,
  /* [1155][0][][] */ -13,-34,-12,-80,127,40,5,30,30,-78,59,69,-31,28,-5,67,
  /* [1156][0][][] */ -9,-83,-25,9,41,-62,-26,-64,56,21,-81,-127,43,-43,-5,47,
  /* [1157][0][][] */ -78,15,-1,-124,34,-32,29,-15,80,-6,-109,127,11,6,-79,5,
  /* [1158][0][][] */ 31,-63,60,-4,12,127,43,-12,-1,-25,-3,15,-7,87,3,-79,
  /* [1159][0][][] */ -5,-39,21,-6,12,127,-30,-1,-111,-94,-37,-5,-45,30,24,8,
  /* [1160][0][][] */ 111,-67,-1,-22,34,4,-36,95,127,-88,106,-14,-22,74,-78,-35,
  /* [1161][0][][] */ 57,10,22,5,-44,-36,127,-13,-90,-33,114,54,67,-112,93,101,
  /* [1162][0][][] */ 32,-53,-28,-40,-46,-19,7,-22,28,42,-10,-60,127,-110,43,-35,
  /* [1163][0][][] */ -17,127,60,-17,-42,-116,-66,-78,58,63,-64,-15,-75,-96,106,-104,
  /* [1164][0][][] */ 32,-104,-96,108,32,15,-29,-107,80,-28,127,96,26,-7,-78,-63,
  /* [1165][0][][] */ -55,-41,32,28,-89,-111,58,-4,127,82,78,4,92,0,92,-37,
  /* [1166][0][][] */ 43,-127,-41,51,-70,52,-125,-49,51,-35,64,-71,115,-47,41,59,
  /* [1167][0][][] */ -67,4,-16,120,80,-17,-56,-73,125,-1,85,-7,127,24,12,-73,
  /* [1168][0][][] */ -100,-1,-77,46,-19,-51,127,-8,27,51,-82,-75,21,73,51,66,
  /* [1169][0][][] */ 88,-10,5,-27,-78,47,36,42,127,-84,107,-10,10,63,-5,-16,
  /* [1170][0][][] */ 127,48,-35,-48,32,-74,-11,30,-5,46,-71,-37,-41,-65,-13,28,
  /* [1171][0][][] */ -6,-5,-27,6,22,-16,78,-29,-32,13,-108,7,71,26,30,-127,
  /* [1172][0][][] */ 94,66,14,-24,30,-32,-13,1,98,59,57,127,85,127,-66,-40,
  /* [1173][0][][] */ -92,-73,-7,33,-49,12,-38,-1,60,18,-23,-112,127,-124,61,9,
  /* [1174][0][][] */ -57,-76,-76,-12,127,32,-20,-57,28,7,72,64,13,-36,-60,-19,
  /* [1175][0][][] */ 0,-94,-51,-127,95,14,11,78,-40,-43,40,65,86,13,-30,-37,
  /* [1176][0][][] */ 13,61,13,27,127,46,-33,-3,-1,8,57,1,59,-17,52,-38,
  /* [1177][0][][] */ 84,108,-81,-11,22,29,21,-127,-11,47,-42,-41,-48,24,91,14,
  /* [1178][0][][] */ 83,-17,-1,21,-29,-58,-18,-100,32,35,-15,-1,79,-127,29,72,
  /* [1179][0][][] */ 66,10,12,58,64,-116,29,38,127,31,-34,2,85,46,-30,28,
  /* [1180][0][][] */ 23,6,44,14,12,-65,8,23,127,-27,-26,-31,-80,29,36,29,
  /* [1181][0][][] */ -50,80,83,-37,-68,-39,29,-62,-72,27,4,57,127,-2,83,-101,
  /* [1182][0][][] */ -21,-12,-87,56,38,127,-71,38,-24,33,7,-49,34,3,-96,56,
  /* [1183][0][][] */ 41,49,-78,-18,46,6,-64,8,-18,35,40,127,-8,-122,-94,7,
  /* [1184][0][][] */ -71,-81,2,-93,-34,127,43,44,56,23,80,-75,-51,-74,-54,-47,
  /* [1185][0][][] */ 5,-14,53,12,32,-22,35,-16,-111,9,-33,-15,61,73,127,-23,
  /* [1186][0][][] */ -21,15,-22,-8,-2,15,34,57,116,37,14,127,34,110,41,-90,
  /* [1187][0][][] */ -113,70,94,-24,-114,62,99,107,-24,97,-12,127,91,-46,-7,-36,
  /* [1188][0][][] */ -66,54,-54,-108,72,-10,-20,127,33,-18,-38,-91,49,-50,-47,-9,
  /* [1189][0][][] */ -30,29,-12,-33,46,41,107,15,2,127,25,23,-3,7,36,-73,
  /* [1190][0][][] */ 4,-39,-50,17,33,41,-26,-19,-69,27,16,21,14,15,127,26,
  /* [1191][0][][] */ 62,-7,-75,-31,-95,-6,-64,51,-69,-11,-57,-45,115,-127,63,45,
  /* [1192][0][][] */ 61,-18,38,77,23,41,-11,85,6,-95,51,-39,65,127,-31,-19,
  /* [1193][0][][] */ -115,46,-84,39,23,57,-124,-33,-44,-46,-75,-58,127,61,-63,60,
  /* [1194][0][][] */ 68,54,-4,-93,-71,127,-58,-43,-73,126,42,-22,24,69,-81,-99,
  /* [1195][0][][] */ 105,-1,-54,92,-68,-1,3,-64,-4,-127,-26,40,7,48,1,-23,
  /* [1196][0][][] */ -23,127,-51,83,-13,47,-21,12,-51,-65,-100,59,25,33,-53,-58,
  /* [1197][0][][] */ -4,-55,24,-2,71,86,-73,10,-33,92,127,12,-6,73,-44,-35,
  /* [1198][0][][] */ -56,-21,9,-16,63,41,127,0,27,-35,-16,-96,-44,-28,-13,-55,
  /* [1199][0][][] */ -115,-73,-65,-52,-24,-25,60,67,127,-6,-66,90,-86,12,12,61,
  /* [1200][0][][] */ -57,4,-87,-25,-115,50,5,-9,108,127,-28,6,-65,100,84,117,
  /* [1201][0][][] */ -40,43,-45,-35,70,20,-7,-14,-34,-100,-127,-52,116,22,-70,-55,
  /* [1202][0][][] */ 67,101,51,-4,-36,-59,-25,-32,-127,107,-55,106,48,-76,38,53,
  /* [1203][0][][] */ -80,72,55,-16,58,-39,22,-45,32,35,-9,45,-53,127,-48,-73,
  /* [1204][0][][] */ -36,-16,13,-52,6,11,127,-41,-36,19,-46,56,68,4,38,-27,
  /* [1205][0][][] */ -34,52,-2,12,-7,7,50,-11,-3,-42,-65,4,-12,20,127,41,
  /* [1206][0][][] */ -127,43,58,-57,-43,66,-32,-19,36,-92,-8,-36,19,107,-101,17,
  /* [1207][0][][] */ 118,-112,-8,92,24,65,28,-122,-114,54,-18,127,95,8,114,-38,
  /* [1208][0][][] */ -39,42,30,13,7,-13,26,51,60,127,-24,-40,28,-92,-43,49,
  /* [1209][0][][] */ 45,-31,103,23,57,22,-2,-123,50,-31,-127,-70,-4,35,11,4,
  /* [1210][0][][] */ 58,36,41,16,-58,1,52,-111,-127,-31,-49,64,27,13,-78,-13,
  /* [1211][0][][] */ -26,-30,-12,-127,55,-14,-5,-34,-77,72,-49,-28,-9,-16,20,-35,
  /* [1212][0][][] */ 6,-39,-62,97,18,35,-80,36,28,-105,-7,-127,41,72,13,-77,
  /* [1213][0][][] */ -42,7,-54,-127,-103,-46,-54,-8,-15,65,-33,17,15,93,21,24,
  /* [1214][0][][] */ -4,-16,-20,38,-83,69,6,8,-32,39,17,32,-11,-84,-36,-127,
  /* [1215][0][][] */ -56,59,-74,127,-61,-2,-29,-35,5,-51,25,2,-18,18,-31,-10,
  /* [1216][0][][] */ 95,40,42,-18,-40,-12,127,81,-114,30,2,-50,-84,-24,-12,44,
  /* [1217][0][][] */ 28,11,-8,15,-39,3,32,-84,-127,-69,-17,-64,-62,-28,-50,24,
  /* [1218][0][][] */ -26,-36,25,15,42,-14,33,81,59,30,-54,-11,-1,-41,45,127,
  /* [1219][0][][] */ -7,45,-50,-36,62,-62,-52,-41,-26,111,-127,-36,12,33,-28,-103,
  /* [1220][0][][] */ -6,-12,-18,45,-127,-65,99,9,-70,83,-74,-12,-30,34,19,-24,
  /* [1221][0][][] */ -19,-99,42,-35,67,28,63,-78,-127,-91,14,116,9,-30,-11,2,
  /* [1222][0][][] */ 82,44,27,-127,-20,19,12,6,3,11,67,87,-46,-66,-96,-67,
  /* [1223][0][][] */ 47,9,23,15,62,-111,45,14,-36,83,10,111,7,-47,-46,-127,
  /* [1224][0][][] */ -26,78,-83,-26,94,-21,25,41,-57,28,33,-95,-69,127,51,-71,
  /* [1225][0][][] */ 13,-3,-23,-8,10,-127,-55,-61,4,65,-55,103,-64,-3,8,1,
  /* [1226][0][][] */ -12,-110,127,35,37,-34,-63,-39,-65,14,91,43,66,-43,11,64,
  /* [1227][0][][] */ 125,-38,29,-40,41,19,34,48,-127,77,67,-2,28,-60,-82,14,
  /* [1228][0][][] */ -3,2,-39,-120,-91,-42,8,-53,-24,-34,-3,127,8,44,68,18,
  /* [1229][0][][] */ -29,92,25,-22,-2,-57,58,49,-36,-13,36,-10,127,67,16,-95,
  /* [1230][0][][] */ 52,47,68,70,21,-23,119,13,-127,-113,-37,13,72,69,62,-47,
  /* [1231][0][][] */ 9,37,-70,-14,65,-44,-31,102,15,-66,20,72,-97,-39,-127,-16,
  /* [1232][0][][] */ -94,-67,-9,-34,57,127,-9,-25,97,29,32,-78,-14,27,73,-8,
  /* [1233][0][][] */ 1,-103,32,21,-101,-111,-11,6,34,127,39,53,-92,1,-9,23,
  /* [1234][0][][] */ -18,127,78,104,50,77,2,-11,-1,68,86,39,38,24,42,-56,
  /* [1235][0][][] */ -4,-43,-47,-3,-56,29,127,17,111,50,37,24,41,-58,36,10,
  /* [1236][0][][] */ 56,31,-86,-2,-71,57,-36,-127,56,-33,56,59,-9,37,5,-70,
  /* [1237][0][][] */ 4,-31,-84,41,65,31,-13,-30,-11,127,63,-21,7,-37,36,-26,
  /* [1238][0][][] */ -70,20,-35,-127,-17,5,-82,-50,32,-87,43,31,49,-55,-50,125,
  /* [1239][0][][] */ 28,-20,-41,-29,-67,-10,48,0,87,57,-31,-41,-43,-80,46,-127,
  /* [1240][0][][] */ -19,-32,28,-77,64,-127,-10,-61,-7,48,-6,-19,-27,60,32,-49,
  /* [1241][0][][] */ 0,11,36,127,-88,-53,-60,-61,-36,-68,-26,66,30,-34,-1,-18,
  /* [1242][0][][] */ 70,-81,-10,101,-110,-42,-12,127,47,-106,6,-19,114,89,48,-44,
  /* [1243][0][][] */ 56,85,-36,-51,-26,-77,-19,-70,18,6,42,81,26,-96,127,52,
  /* [1244][0][][] */ 75,28,33,-62,34,-127,-66,24,32,-31,-24,91,50,-37,44,-61,
  /* [1245][0][][] */ 18,76,-16,41,-39,51,44,22,14,-63,-52,127,36,-10,70,-21,
  /* [1246][0][][] */ -30,117,38,-39,-60,79,2,50,-127,-24,-2,-31,65,16,24,-26,
  /* [1247][0][][] */ 8,22,5,1,5,41,21,-19,79,-84,-38,10,90,-92,-83,-127,
  /* [1248][0][][] */ 40,-15,0,-56,-5,50,22,-127,-32,0,42,17,84,-27,67,-114,
  /* [1249][0][][] */ 60,63,-108,32,22,71,-63,127,83,52,29,-56,58,-7,-52,-41,
  /* [1250][0][][] */ -51,-49,-127,98,74,17,-21,25,55,-21,107,45,19,-46,16,-54,
  /* [1251][0][][] */ 30,-38,27,94,62,-53,-78,-71,118,30,-7,-5,-127,-22,-37,123,
  /* [1252][0][][] */ -127,52,46,31,-14,37,-27,69,-9,83,-2,-91,39,27,4,-76,
  /* [1253][0][][] */ -59,-6,-15,-43,127,33,46,-95,-11,-7,-110,85,-48,-60,-26,48,
  /* [1254][0][][] */ -7,20,-46,-44,127,81,-46,17,44,11,21,-36,23,-20,27,29,
  /* [1255][0][][] */ -127,-74,-38,15,12,-13,-17,71,82,-76,80,-34,-51,2,-6,-3,
  /* [1256][0][][] */ -42,-42,36,127,-43,30,46,-39,-19,-43,17,-57,9,48,64,34,
  /* [1257][0][][] */ -97,56,75,35,127,-22,-7,62,-48,-67,-67,62,-105,95,-63,-5,
  /* [1258][0][][] */ 127,-28,-10,48,-9,-64,87,40,25,-2,-1,13,36,-24,-8,-26,
  /* [1259][0][][] */ -87,-50,-54,-48,-31,-71,-80,24,57,-36,-38,-22,122,-127,-63,-53,
  /* [1260][0][][] */ 42,53,21,-69,-58,-46,61,44,9,-62,-42,0,127,-18,45,39,
  /* [1261][0][][] */ -52,-33,31,-40,11,-16,-29,-18,37,26,-50,53,37,127,-79,-74,
  /* [1262][0][][] */ -47,100,-25,4,-28,-3,31,21,46,-19,35,127,-58,30,-71,98,
  /* [1263][0][][] */ -58,-73,-58,-10,17,40,27,-6,-80,76,-116,-94,-14,-25,-127,-21,
  /* [1264][0][][] */ -72,-5,23,-67,40,-48,-85,-53,-25,-57,63,127,67,-53,-55,-5,
  /* [1265][0][][] */ 14,-87,-11,-59,99,23,-29,103,107,-56,127,6,46,54,14,-5,
  /* [1266][0][][] */ 37,12,127,-16,81,48,72,35,-98,-62,57,26,-15,67,-42,16,
  /* [1267][0][][] */ 27,-27,85,-42,3,127,25,-31,4,66,42,-28,-40,-48,-81,36,
  /* [1268][0][][] */ 32,77,61,3,7,16,68,-39,82,-28,-50,-127,-38,34,56,-1,
  /* [1269][0][][] */ 112,52,34,108,-7,85,-127,36,92,-113,-27,-82,51,63,-83,15,
  /* [1270][0][][] */ 121,1,-35,-127,43,69,-28,79,-87,102,12,74,-98,-6,-73,-78,
  /* [1271][0][][] */ 20,-66,-43,38,-31,-55,37,52,-50,127,-47,-18,1,-50,-38,-38,
  /* [1272][0][][] */ -105,14,15,78,89,36,-85,-127,11,58,-15,-66,27,-83,-76,-55,
  /* [1273][0][][] */ 31,-32,72,-28,66,9,-18,-127,-1,82,-45,84,77,17,46,-80,
  /* [1274][0][][] */ -121,-18,39,35,51,-54,34,-10,-31,-21,-74,43,-127,-104,-24,10,
  /* [1275][0][][] */ -83,-4,-71,-127,45,41,-42,36,-30,62,-80,-1,-25,-58,40,23,
  /* [1276][0][][] */ -11,17,2,45,41,9,-59,21,-44,-79,31,52,127,4,6,27,
  /* [1277][0][][] */ 127,-37,-7,-42,-45,34,84,19,-35,80,17,-23,24,-7,-71,-24,
  /* [1278][0][][] */ -73,7,96,-62,105,-58,-11,80,-38,-24,34,-22,-6,-55,52,-127,
  /* [1279][0][][] */ 55,-11,127,-55,46,38,-5,49,-18,93,-2,65,-13,-57,-43,26,
};
const TfArray<4, int> tensor_dimension76 = { 4, { 1280,1,1,16 } };
const TfArray<1280, float> quant76_scale = { 1280, { 0.0054545318707823753, 0.0039630457758903503, 0.0050721485167741776, 0.0052831023931503296, 0.0046178721822798252, 0.0067197391763329506, 0.0063027180731296539, 0.0050705038011074066, 0.0063592535443603992, 0.0062466482631862164, 0.0050626522861421108, 0.0053506521508097649, 0.0061522745527327061, 0.0065171560272574425, 0.0045182774774730206, 0.0036311126314103603, 0.0056968284770846367, 0.0068035661242902279, 0.0052693611942231655, 0.0039643649943172932, 0.0051665725186467171, 0.0075956359505653381, 0.0069350004196166992, 0.0037531396374106407, 0.0041926871053874493, 0.0073473546653985977, 0.0061368593014776707, 0.0045945309102535248, 0.0047552147880196571, 0.0071060284972190857, 0.0053979698568582535, 0.0048501975834369659, 0.0044483570381999016, 0.0055233296006917953, 0.0051314504817128181, 0.0071869581006467342, 0.0057409852743148804, 0.005425705574452877, 0.0048278248868882656, 0.0058243335224688053, 0.0054430910386145115, 0.0048880241811275482, 0.0060612973757088184, 0.0058896858245134354, 0.0051568262279033661, 0.0053740069270133972, 0.0049363435246050358, 0.0060221194289624691, 0.0058078751899302006, 0.0044983630068600178, 0.0056970925070345402, 0.0043701552785933018, 0.0048158243298530579, 0.0057973903603851795, 0.0036486173048615456, 0.0051787532866001129, 0.0071243587881326675, 0.0048426338471472263, 0.0053130476735532284, 0.0042489292100071907, 0.0052229710854589939, 0.0049010571092367172, 0.0047630784101784229, 0.0056591578759253025, 0.003810968017205596, 0.0041609685868024826, 0.0062875542789697647, 0.0058658020570874214, 0.0052956086583435535, 0.0071827787905931473, 0.004090484231710434, 0.0065870983526110649, 0.005305243656039238, 0.005549571942538023, 0.0048643718473613262, 0.0055493940599262714, 0.0049627553671598434, 0.0065217902883887291, 0.0055519086308777332, 0.0044524208642542362, 0.0056483461521565914, 0.0033424242865294218, 0.0033535934053361416, 0.0052474429830908775, 0.0038017206825315952, 0.006336018443107605, 0.004470242653042078, 0.0037660896778106689, 0.0067426543682813644, 0.0055293822661042213, 0.0048527941107749939, 0.007101601455360651, 0.0061087715439498425, 0.0064291032031178474, 0.0037300470285117626, 0.0047544464468955994, 0.0057416600175201893, 0.0050127636641263962, 0.006959348451346159, 0.0051721637137234211, 0.0070337704382836819, 0.0049445568583905697, 0.004037030041217804, 0.0046145552769303322, 0.0049115577712655067, 0.0051532546058297157, 0.0047847889363765717, 0.0052285827696323395, 0.0053435019217431545, 0.0049467268399894238, 0.004929322749376297, 0.0052040019072592258, 0.0050656790845096111, 0.0062043084762990475, 0.0043889349326491356, 0.0056634941138327122, 0.0047272713854908943, 0.0066446191631257534, 0.0047574741765856743, 0.0038380157202482224, 0.0051623964682221413, 0.0052725179120898247, 0.005160982720553875, 0.0051010954193770885, 0.0046081137843430042, 0.005666694138199091, 0.0032697725109755993, 0.0052091712132096291, 0.0068192239850759506, 0.0052497759461402893, 0.0043155145831406116, 0.0057765538804233074, 0.0046926168724894524, 0.0065180128440260887, 0.0058081494644284248, 0.0062964889220893383, 0.0048168748617172241, 0.0056919590570032597, 0.0038963041733950377, 0.0042972560040652752, 0.0058311149477958679, 0.0050088227726519108, 0.0048119365237653255, 0.0040752766653895378, 0.0039937668479979038, 0.0066292891278862953, 0.0038181690033525229, 0.0036024469882249832, 0.0043962164781987667, 0.004294978454709053, 0.0040116477757692337, 0.0054705520160496235, 0.0045659281313419342, 0.0044532292522490025, 0.0053251706995069981, 0.0053578377701342106, 0.0046902652829885483, 0.006577945314347744, 0.0057163047604262829, 0.0049556391313672066, 0.0057967370375990868, 0.004618227481842041, 0.0056241508573293686, 0.0059735439717769623, 0.0047147409059107304, 0.0061007770709693432, 0.0035045782569795847, 0.0055961171165108681, 0.0040541035123169422, 0.0049140169285237789, 0.0085782790556550026, 0.0060610123910009861, 0.0049886628985404968, 0.0048903119750320911, 0.0047840499319136143, 0.0060716462321579456, 0.0055840504355728626, 0.004820551723241806, 0.005712208803743124, 0.0039789201691746712, 0.0044501759111881256, 0.0063857319764792919, 0.0048817899078130722, 0.0042303078807890415, 0.0041519980877637863, 0.0077053317800164223, 0.0046726958826184273, 0.0070369141176342964, 0.0067094597034156322, 0.0044894767925143242, 0.0042793969623744488, 0.0052304868586361408, 0.00536370649933815, 0.0059688789770007133, 0.0054710586555302143, 0.0043517914600670338, 0.0051915957592427731, 0.004929705522954464, 0.0048766806721687317, 0.0045650494284927845, 0.006739247590303421, 0.0062452862039208412, 0.0048986147157847881, 0.0051045846194028854, 0.0033804825507104397, 0.0036939666606485844, 0.0059008919633924961, 0.005595529917627573, 0.0067854137159883976, 0.0046570119448006153, 0.0047606285661458969, 0.0057968287728726864, 0.0045616556890308857, 0.0068782675080001354, 0.0039232592098414898, 0.0050945370458066463, 0.0053773890249431133, 0.0047383252531290054, 0.0046264408156275749, 0.0062061697244644165, 0.0051480378024280071, 0.0052133798599243164, 0.0062658083625137806, 0.0057414881885051727, 0.0053486577235162258, 0.0054099275730550289, 0.0046618068590760231, 0.0044749518856406212, 0.0051359264180064201, 0.0056877504102885723, 0.00502777099609375, 0.0065946872346103191, 0.006914693396538496, 0.00595841184258461, 0.0063255741260945797, 0.0046003428287804127, 0.0051198289729654789, 0.0044668903574347496, 0.0054716747254133224, 0.0051388111896812916, 0.0066773775033652782, 0.0039160405285656452, 0.0056373421102762222, 0.0048278006725013256, 0.0039447294548153877, 0.0054150447249412537, 0.0055079893209040165, 0.0051135243847966194, 0.0068128784187138081, 0.0048518064431846142, 0.004501712042838335, 0.0053686192259192467, 0.0064016426913440228, 0.0081080561503767967, 0.005015107337385416, 0.0058616106398403645, 0.0045980648137629032, 0.0045280861668288708, 0.0044580972753465176, 0.0046353372745215893, 0.0050005912780761719, 0.0052020181901752949, 0.0045912275090813637, 0.0049270954914391041, 0.0055738561786711216, 0.0054235770367085934, 0.0047181942500174046, 0.0043507758527994156, 0.0046240249648690224, 0.0039818901568651199, 0.0045283157378435135, 0.0045260987244546413, 0.0055305818095803261, 0.0045950552448630333, 0.0058230836875736713, 0.0052594463340938091, 0.004080834798514843, 0.0050570783205330372, 0.0046184388920664787, 0.0057763759978115559, 0.0049534821882843971, 0.0044694598764181137, 0.0036968877539038658, 0.0048447423614561558, 0.006391916424036026, 0.0049604075029492378, 0.0044603850692510605, 0.0057273651473224163, 0.0047033829614520073, 0.0048560425639152527, 0.0045124543830752373, 0.00430270005017519, 0.0073544164188206196, 0.0051521765999495983, 0.0071483245119452477, 0.0054577342234551907, 0.0048517361283302307, 0.0052424222230911255, 0.0051898444071412086, 0.0062459828332066536, 0.0043652625754475594, 0.0050359601154923439, 0.0054516573436558247, 0.0065241227857768536, 0.0043141092173755169, 0.0058429543860256672, 0.0045998366549611092, 0.0060476851649582386, 0.0051866290159523487, 0.0051166708581149578, 0.0048076682724058628, 0.0038683849852532148, 0.0038815841544419527, 0.0054480982944369316, 0.0065828152000904083, 0.0046721901744604111, 0.005751908291131258, 0.0056819193996489048, 0.0058458256535232067, 0.0056481519713997841, 0.0050928168930113316, 0.0042828163132071495, 0.0057899276725947857, 0.0048558851704001427, 0.005390537902712822, 0.003572933841496706, 0.0051714936271309853, 0.0069185574539005756, 0.0048063374124467373, 0.0038868258707225323, 0.006521331612020731, 0.0045218518935143948, 0.0061668632552027702, 0.0069769714027643204, 0.0045377989299595356, 0.0056004514917731285, 0.0043068286031484604, 0.0047169607132673264, 0.0070098219439387321, 0.0052884705364704132, 0.0048588183708488941, 0.0056521696969866753, 0.004027792252600193, 0.0039437804371118546, 0.0046298149973154068, 0.0060262037441134453, 0.0045052454806864262, 0.0045234537683427334, 0.007059877272695303, 0.0052129817195236683, 0.0043201739899814129, 0.0038489368744194508, 0.0042947367765009403, 0.0048828250728547573, 0.0049912575632333755, 0.003875277703627944, 0.004445456899702549, 0.0051712160930037498, 0.0040457951836287975, 0.0080491751432418823, 0.0045622317120432854, 0.0053604152053594589, 0.0050463816151022911, 0.0044059283100068569, 0.0065544154495000839, 0.0047506638802587986, 0.0068039549514651299, 0.0058058868162333965, 0.0046334555372595787, 0.0037452809046953917, 0.0067083840258419514, 0.0037023124750703573, 0.004997926764190197, 0.005488615483045578, 0.004268464632332325, 0.0047419271431863308, 0.0056188330054283142, 0.005637001246213913, 0.0045364643447101116, 0.0059941769577562809, 0.0041777514852583408, 0.0042613819241523743, 0.0036688903346657753, 0.0057894871570169926, 0.0058686975389719009, 0.0048402245156466961, 0.0053735151886940002, 0.0045400443486869335, 0.0059050875715911388, 0.0038701011799275875, 0.0049570444971323013, 0.0045782197266817093, 0.0040520611219108105, 0.0048258965834975243, 0.0045323260128498077, 0.0036651359405368567, 0.0040739732794463634, 0.0041212188079953194, 0.0044229710474610329, 0.0057023931294679642, 0.0063871662132441998, 0.0065890601836144924, 0.0051883324049413204, 0.004815918393433094, 0.0065678446553647518, 0.0064395829103887081, 0.004793146625161171, 0.0042731505818665028, 0.0052486909553408623, 0.0056711491197347641, 0.004389849491417408, 0.0065126167610287666, 0.0062677557580173016, 0.0044217710383236408, 0.0052890153601765633, 0.0037555794697254896, 0.0045409318991005421, 0.0071785501204431057, 0.0040825027972459793, 0.00563046894967556, 0.0044943112879991531, 0.0048237089067697525, 0.0053790779784321785, 0.0061312653124332428, 0.0077701103873550892, 0.0055599971674382687, 0.0052977469749748707, 0.0041059288196265697, 0.0038135969080030918, 0.0050608296878635883, 0.0057411096058785915, 0.006663633044809103, 0.0039940467104315758, 0.0053252861835062504, 0.0034592919982969761, 0.0060936161316931248, 0.0057451212778687477, 0.0044695711694657803, 0.0059293867088854313, 0.0057556112296879292, 0.0052173682488501072, 0.0052444655448198318, 0.0041648400947451591, 0.0051556583493947983, 0.0077807595953345299, 0.0040350127965211868, 0.0046833199448883533, 0.0044318344444036484, 0.0070861685089766979, 0.0042664334177970886, 0.0059251617640256882, 0.005101486574858427, 0.0049208975397050381, 0.0058679264038801193, 0.0048449477180838585, 0.0068504693917930126, 0.0051966886967420578, 0.0048606842756271362, 0.0055783814750611782, 0.00508152786642313, 0.0065925479866564274, 0.0050521711818873882, 0.0063558970578014851, 0.0052717933431267738, 0.0061022308655083179, 0.0038371644914150238, 0.0044641918502748013, 0.0059236437082290649, 0.0038953004404902458, 0.0064651216380298138, 0.0052475137636065483, 0.0063082990236580372, 0.0046656602062284946, 0.0038485364057123661, 0.0063375663012266159, 0.0049038776196539402, 0.0060801715590059757, 0.0040773302316665649, 0.0045867431908845901, 0.0043630655854940414, 0.0051136491820216179, 0.0064109242521226406, 0.0060888072475790977, 0.00432943319901824, 0.0040209623984992504, 0.0050590592436492443, 0.0068159131333231926, 0.0045260908082127571, 0.0066800862550735474, 0.0043295701034367085, 0.0052623092196881771, 0.0055888076312839985, 0.0056461361236870289, 0.0060321725904941559, 0.0050569898448884487, 0.0050130439922213554, 0.0040790890343487263, 0.0069187772460281849, 0.005565327126532793, 0.0047124582342803478, 0.0041291327215731144, 0.0070502539165318012, 0.0049174772575497627, 0.0066394614987075329, 0.0079436702653765678, 0.0049625704996287823, 0.0041570058092474937, 0.0058790836483240128, 0.0050903744995594025, 0.0052138986065983772, 0.0043626460246741772, 0.0061829178594052792, 0.005093245767056942, 0.0052690980955958366, 0.0048530683852732182, 0.0049767540767788887, 0.0045974045060575008, 0.0055208527483046055, 0.0043668304570019245, 0.0051833516918122768, 0.0036556941922754049, 0.0048525766469538212, 0.0054922844283282757, 0.0052815312519669533, 0.0052791074849665165, 0.0041452515870332718, 0.0064856121316552162, 0.0049248230643570423, 0.0051644849590957165, 0.0070610982365906239, 0.0059116804040968418, 0.006763828918337822, 0.0045310622081160545, 0.0045740990899503231, 0.0045781531371176243, 0.0054973862133920193, 0.0058209397830069065, 0.0048825982958078384, 0.0059726289473474026, 0.0040298691019415855, 0.0042206114158034325, 0.0039970548823475838, 0.0035326031502336264, 0.0043386146426200867, 0.0042672622948884964, 0.0069986339658498764, 0.0052370922639966011, 0.0060219485312700272, 0.0044960929080843925, 0.0070864553563296795, 0.005010153166949749, 0.0041130250319838524, 0.0053606303408741951, 0.0063652764074504375, 0.0061240661889314651, 0.0043936297297477722, 0.0067377248778939247, 0.0062581957317888737, 0.005568389780819416, 0.0073474226519465446, 0.0052651506848633289, 0.005161031149327755, 0.0059477463364601135, 0.0045922752469778061, 0.0046012420207262039, 0.0050609163008630276, 0.0043934728018939495, 0.0044422750361263752, 0.0062887961976230145, 0.0054709953255951405, 0.0044734273105859756, 0.0050197853706777096, 0.0054705217480659485, 0.0044369990937411785, 0.0040499987080693245, 0.0050883288495242596, 0.0072179799899458885, 0.0048445719294250011, 0.0042979288846254349, 0.005368212703615427, 0.0049819913692772388, 0.0041987234726548195, 0.0053722108714282513, 0.0064025293104350567, 0.0047398689202964306, 0.0048658554442226887, 0.0036509199999272823, 0.0060579841956496239, 0.0056929108686745167, 0.0045031094923615456, 0.0050681210123002529, 0.0048695667646825314, 0.0064042620360851288, 0.0056988196447491646, 0.006520361639559269, 0.0068071954883635044, 0.0049825282767415047, 0.0048320256173610687, 0.0044235009700059891, 0.0040893326513469219, 0.0059716878458857536, 0.0039965645410120487, 0.0041803363710641861, 0.0056159347295761108, 0.0050557181239128113, 0.0064944149926304817, 0.0055712061002850533, 0.0044870250858366489, 0.004305665846914053, 0.0051737520843744278, 0.0060398024506866932, 0.0048928768374025822, 0.0065679028630256653, 0.0047275228425860405, 0.0062996619381010532, 0.0053465450182557106, 0.0053710355423390865, 0.0040107821114361286, 0.0045171394012868404, 0.0048603750765323639, 0.0045721624046564102, 0.0056623928248882294, 0.0044019678607583046, 0.0046927342191338539, 0.0062434603460133076, 0.004345194436609745, 0.0058184992522001266, 0.0054473141208291054, 0.0054782889783382416, 0.0045516630634665489, 0.0049141859635710716, 0.0052366801537573338, 0.0045889993198215961, 0.0048541449941694736, 0.0073095019906759262, 0.0055051622912287712, 0.0057440167292952538, 0.0078682638704776764, 0.0046327258460223675, 0.0059900428168475628, 0.0050288154743611813, 0.0043792440555989742, 0.0054265544749796391, 0.0047284062020480633, 0.0053222258575260639, 0.0044900905340909958, 0.0056630424223840237, 0.0062947375699877739, 0.0051378132775425911, 0.0047831442207098007, 0.005150077398866415, 0.0053922859951853752, 0.0070358850061893463, 0.0062059313058853149, 0.0038447086699306965, 0.0071576391346752644, 0.0045807757414877415, 0.0051896045915782452, 0.004807058721780777, 0.0037122056819498539, 0.0068816347047686577, 0.0034714923240244389, 0.005288037471473217, 0.0049916780553758144, 0.0053866608068346977, 0.0040396843105554581, 0.0058026355691254139, 0.005766652524471283, 0.0058459537103772163, 0.0041438625194132328, 0.0067448178306221962, 0.0047287070192396641, 0.0061204922385513783, 0.004146612249314785, 0.0058616660535335541, 0.0037517014425247908, 0.0054252413101494312, 0.0066113322973251343, 0.0041013527661561966, 0.0063609126955270767, 0.0042126062326133251, 0.0052058030851185322, 0.0040627275593578815, 0.0046434015966951847, 0.0059052295982837677, 0.0063184476457536221, 0.004530884325504303, 0.0048230472020804882, 0.003775167278945446, 0.005599848460406065, 0.0052609997801482677, 0.0042412127368152142, 0.0040646232664585114, 0.0052907820791006088, 0.0056052319705486298, 0.0055593210272490978, 0.0068894489668309689, 0.007662053219974041, 0.0057195965200662613, 0.0045441235415637493, 0.005085404496639967, 0.003892483888193965, 0.0055596595630049706, 0.0059559685178101063, 0.0042620711028575897, 0.0046453224495053291, 0.0050586117431521416, 0.0057503506541252136, 0.0047838632017374039, 0.0037916414439678192, 0.0056344904005527496, 0.0041136802174150944, 0.0060042082332074642, 0.0055814431980252266, 0.0056365593336522579, 0.0042146383784711361, 0.0048085427843034267, 0.0050691524520516396, 0.003977388609200716, 0.0057047395966947079, 0.0051991944201290607, 0.0062909163534641266, 0.0044817458838224411, 0.0041693444363772869, 0.0063125616870820522, 0.0068349782377481461, 0.0051365639083087444, 0.0056432341225445271, 0.0062956470064818859, 0.004168141633272171, 0.003539747092872858, 0.0041791191324591637, 0.0038534058257937431, 0.004873709287494421, 0.0051326220855116844, 0.0056060049682855606, 0.0040088226087391376, 0.0048479214310646057, 0.0048131220974028111, 0.0050336737185716629, 0.0044928728602826595, 0.0039642895571887493, 0.0047550508752465248, 0.005066276527941227, 0.0062580821104347706, 0.0050058974884450436, 0.0042034178040921688, 0.006195547990500927, 0.0033818972297012806, 0.005107121542096138, 0.0048346235416829586, 0.0043264641426503658, 0.0047484631650149822, 0.0035226258914917707, 0.0066178399138152599, 0.0039658923633396626, 0.0044895983301103115, 0.0046861572191119194, 0.0054138298146426678, 0.0067781382240355015, 0.0051921033300459385, 0.005334251094609499, 0.005529564805328846, 0.0044677155092358589, 0.0066380701027810574, 0.0055763581767678261, 0.0055169225670397282, 0.0051338407211005688, 0.0051479330286383629, 0.0040999036282300949, 0.0048288814723491669, 0.0039386921562254429, 0.0060681216418743134, 0.0037793582305312157, 0.0084742875769734383, 0.0066953441128134727, 0.0056762374006211758, 0.0045752306468784809, 0.0056759780272841454, 0.0043341126292943954, 0.0042026974260807037, 0.0038294808473438025, 0.0063519440591335297, 0.0049712336622178555, 0.0054040160030126572, 0.0055239624343812466, 0.0040370626375079155, 0.006310279481112957, 0.00493280915543437, 0.0066996915265917778, 0.0053712590597569942, 0.0045042694546282291, 0.0057535474188625813, 0.004391595721244812, 0.003964434377849102, 0.0048424499109387398, 0.0053711016662418842, 0.0047536264173686504, 0.0043686111457645893, 0.0070983129553496838, 0.0069837090559303761, 0.0067423288710415363, 0.0051663331687450409, 0.0042868521995842457, 0.0058104903437197208, 0.004063023254275322, 0.0048772003501653671, 0.0042612403631210327, 0.0053301402367651463, 0.0044488552957773209, 0.0074058892205357552, 0.0053768390789628029, 0.0050889085978269577, 0.0050771608948707581, 0.0072441184893250465, 0.0043387236073613167, 0.0060329674743115902, 0.0047906171530485153, 0.0058124242350459099, 0.0056053441949188709, 0.0052135437726974487, 0.0047268467023968697, 0.0069651841185986996, 0.0057317526079714298, 0.005185465794056654, 0.0047777765430510044, 0.0044003608636558056, 0.0064143557101488113, 0.0066935154609382153, 0.004566107876598835, 0.0049694688059389591, 0.0054041324183344841, 0.0043916665017604828, 0.0044128065928816795, 0.0074913469143211842, 0.0042488332837820053, 0.0050207274034619331, 0.0050043514929711819, 0.0040186685509979725, 0.0039520463906228542, 0.0048956782557070255, 0.0038891476579010487, 0.0073130051605403423, 0.0045399176888167858, 0.0065199742093682289, 0.0044079022482037544, 0.0048340153880417347, 0.003519850317388773, 0.0045028147287666798, 0.0054169176146388054, 0.0037158532068133354, 0.0056385854259133339, 0.0041666729375720024, 0.0060534160584211349, 0.005299961194396019, 0.0046585854142904282, 0.0046219914220273495, 0.0041224528104066849, 0.0038390189874917269, 0.0045750918798148632, 0.0045280233025550842, 0.0060797980986535549, 0.0060151703655719757, 0.0046876375563442707, 0.0048791016452014446, 0.0055057480931282043, 0.0062468717806041241, 0.0054892366752028465, 0.00534392474219203, 0.0041329944506287575, 0.0053333188407123089, 0.0056535410694777966, 0.0061138318851590157, 0.0052726459689438343, 0.0056461775675415993, 0.0060492581687867641, 0.0031961505301296711, 0.004418584518134594, 0.0051881857216358185, 0.0034630047157406807, 0.0040356139652431011, 0.0041829082183539867, 0.0046067885123193264, 0.0043773707002401352, 0.0045403321273624897, 0.0035901013761758804, 0.0043226913549005985, 0.0045927152968943119, 0.0073844250291585922, 0.0053184940479695797, 0.006284395232796669, 0.0061565116047859192, 0.0057454141788184643, 0.0036993904504925013, 0.0038551888428628445, 0.00529490876942873, 0.0057480721734464169, 0.0039614583365619183, 0.005768198985606432, 0.0049578971229493618, 0.0059405569918453693, 0.0037984703667461872, 0.0061264527030289173, 0.0063135246746242046, 0.0056166546419262886, 0.0038795261643826962, 0.0054053380154073238, 0.0043513961136341095, 0.0049135354347527027, 0.0045197578147053719, 0.0047967764548957348, 0.0043675336055457592, 0.0047234832309186459, 0.005441104993224144, 0.0043707261793315411, 0.0051865600980818272, 0.0065845977514982224, 0.0049557420425117016, 0.0049651265144348145, 0.0064358646050095558, 0.0040982873179018497, 0.0041177598759531975, 0.0062015336006879807, 0.0046951966360211372, 0.0037779849953949451, 0.0064330613240599632, 0.0050499029457569122, 0.0044536273926496506, 0.0051324740052223206, 0.0057788514532148838, 0.0058025592006742954, 0.006299865897744894, 0.005677396897226572, 0.0057766679674386978, 0.0053270854987204075, 0.0056757982820272446, 0.0046667600981891155, 0.005751424003392458, 0.0053109112195670605, 0.00546667305752635, 0.0050675263628363609, 0.0039916299283504486, 0.0044277599081397057, 0.0048778699710965157, 0.0050995592027902603, 0.005400379654020071, 0.0043116360902786255, 0.0054492205381393433, 0.0047494824975728989, 0.0028134500607848167, 0.0068200826644897461, 0.0042829420417547226, 0.0045416755601763725, 0.0045021381229162216, 0.0049502192996442318, 0.003694155253469944, 0.0057529406622052193, 0.0046252128668129444, 0.0035732721444219351, 0.0048517221584916115, 0.0038105116691440344, 0.0052775354124605656, 0.0052844998426735401, 0.0045680715702474117, 0.0041560954414308071, 0.0030434008222073317, 0.0047595049254596233, 0.0065321982838213444, 0.0054870308376848698, 0.0044456594623625278, 0.0059947352856397629, 0.005651252344250679, 0.0039053137879818678, 0.0050622997805476189, 0.0037446729838848114, 0.0053732818923890591, 0.0049930443055927753, 0.005875742994248867, 0.0060143996961414814, 0.0050906841643154621, 0.0043510706163942814, 0.004692484624683857, 0.0048163835890591145, 0.004600385669618845, 0.004229844082146883, 0.0058950465172529221, 0.0057284636422991753, 0.0056824344210326672, 0.0037820311263203621, 0.004689428023993969, 0.0070209414698183537, 0.0047922255471348763, 0.0051146466284990311, 0.0049720555543899536, 0.0060174115933477879, 0.0071453382261097431, 0.0059870593249797821, 0.0047867647372186184, 0.0047899340279400349, 0.0058563593775033951, 0.005432620644569397, 0.0042560617439448833, 0.0040155509486794472, 0.0046852775849401951, 0.0051745134405791759, 0.005469747819006443, 0.0062644830904901028, 0.0048146662302315235, 0.0051156934350728989, 0.0069021349772810936, 0.0071720336563885212, 0.0040795160457491875, 0.0061603100039064884, 0.0051936274394392967, 0.0047271503135561943, 0.0041431994177401066, 0.0043042427860200405, 0.0058121387846767902, 0.0078143775463104248, 0.0042360993102192879, 0.0041525457054376602, 0.0031724900472909212, 0.0063699819147586823, 0.0052187829278409481, 0.0050680479034781456, 0.0056954794563353062, 0.0047503560781478882, 0.0034663670230656862, 0.0044575142674148083, 0.0044929422438144684, 0.0064520062878727913, 0.0054768798872828484, 0.0062960791401565075, 0.0056207906454801559, 0.0055933832190930843, 0.0046197297051548958, 0.0039713946171104908, 0.0054463199339807034, 0.0046494295820593834, 0.0066351350396871567, 0.0061630075797438622, 0.0055620456114411354, 0.0036354553885757923, 0.0056375316344201565, 0.0060538500547409058, 0.0061429888010025024, 0.0048274216242134571, 0.005547698587179184, 0.0057558021508157253, 0.0069250930100679398, 0.0052936729043722153, 0.0059466804377734661, 0.0053908252157270908, 0.0036470424383878708, 0.0037604821845889091, 0.0037862681783735752, 0.0050720786675810814, 0.0037113712169229984, 0.0056615271605551243, 0.006515825167298317, 0.0056527713313698769, 0.0053093270398676395, 0.0043861647136509418, 0.0043209320865571499, 0.0074872411787509918, 0.006029872689396143, 0.0045286240056157112, 0.0053604887798428535, 0.0052941520698368549, 0.0037216993514448404, 0.0052751451730728149, 0.0052462462335824966, 0.004477126058191061, 0.0045290538109838963, 0.0043639997020363808, 0.005459614098072052, 0.0040112254209816456, 0.0039136097766458988, 0.0058211875148117542, 0.0055267936550080776, 0.0051957191899418831, 0.0052790599875152111, 0.006998435128480196, 0.0043748160824179649, 0.004778561182320118, 0.0038121331017464399, 0.0041194986552000046, 0.0047770733945071697, 0.0057665882632136345, 0.0053694820962846279, 0.0054698372259736061, 0.0044058398343622684, 0.0038939446676522493, 0.0047401208430528641, 0.0048985788598656654, 0.0057430481538176537, 0.0043917614966630936, 0.0049144118092954159, 0.0047793942503631115, 0.0039974050596356392, 0.00352504663169384, 0.0059716110117733479, 0.0074203247204422951, 0.0054863947443664074, 0.0044520390219986439, 0.0066033340990543365, 0.006440452765673399, 0.004318412858992815, 0.0052172578871250153, 0.0040781251154839993, 0.0051077995449304581, 0.0041125407442450523, 0.004371370654553175, 0.004033123143017292, 0.004590142983943224, 0.0047327633947134018, 0.0059578255750238895, 0.0048930258490145206, 0.0040157046169042587, 0.003866617102175951, 0.0042615057900547981, 0.0054176365956664085, 0.0041775275021791458, 0.006336594931781292, 0.0047006122767925262, 0.0051597603596746922, 0.0053560133092105389, 0.0042530084028840065, 0.0055774669162929058, 0.0058217146433889866, 0.0056939865462481976, 0.0053191566839814186, 0.0061187213286757469, 0.0052257557399570942, 0.0050212452188134193, 0.0067582582123577595, 0.0040477979928255081, 0.0057535450905561447, 0.0064114434644579887, 0.0053562447428703308, 0.0050312499515712261, 0.0046850894577801228, 0.0050432099960744381, 0.005396026186645031, 0.0043046427890658379, 0.0041425437666475773, 0.0041805696673691273, 0.0058853118680417538, 0.0058635999448597431, 0.0047843889333307743, 0.0035696160048246384, 0.0058554899878799915, 0.003667821642011404, 0.0048681567423045635, 0.0057715452276170254, 0.0047558541409671307, 0.0057193958200514317, 0.0044100801460444927, 0.0063339793123304844, 0.0057406597770750523, 0.0051196524873375893, 0.0043565020896494389, 0.0052906977944076061, 0.0044965441338717937, 0.0052195573225617409, 0.0048294831067323685, 0.0040094656869769096, 0.0046373927034437656, 0.0056471037678420544, 0.0055106049403548241, 0.0054431739263236523, 0.0053548440337181091, 0.0037853820249438286, 0.004189356230199337, 0.0059184776619076729, 0.0049027213826775551, 0.0074327802285552025, 0.0043778014369308949, 0.0051073567010462284, 0.0044783963821828365, 0.0066647622734308243, 0.0051251421682536602, 0.0053358851000666618, 0.0053174961358308792, 0.0054655321873724461, 0.0066054523922502995, 0.0046077994629740715, 0.0035221346188336611, 0.005413801409304142, 0.0056763659231364727, 0.0064813075587153435, 0.0041259368881583214, 0.0060254759155213833, 0.0042372127063572407, 0.0043363389559090137, 0.0058236783370375633, 0.0054665100760757923, 0.006255412008613348, 0.0058906315825879574, 0.0043983780778944492, 0.0038404238875955343, 0.0049343602731823921, 0.0050819371826946735, 0.0045957658439874649, 0.0068890196271240711, 0.0081418305635452271, 0.0046908506192266941, 0.0038888517301529646, 0.0054337573237717152, 0.0059610488824546337, 0.0049137291498482227, 0.0065422705374658108, 0.0041568931192159653, 0.0051331198774278164, 0.0055689583532512188, 0.0052758650854229927, 0.0050339773297309875, 0.0052578463219106197, 0.0056399567984044552, 0.0048123393207788467, 0.0052486266940832138, 0.0040376419201493263, 0.0049453889951109886, 0.0044665830209851265, 0.0041218232363462448, 0.006265539675951004, 0.0047709932550787926, 0.0046176793985068798, 0.006194655317813158, 0.005073231179267168, 0.0048878868110477924, 0.0047499663196504116, 0.0049888668581843376, 0.0056857084855437279, 0.0048376657068729401, 0.0054700984619557858, 0.0056679043918848038, 0.007375841960310936, 0.0044133332557976246, 0.0058497642166912556, 0.0063974750228226185, 0.0046689794398844242, 0.0035578438546508551, 0.0055346861481666565, 0.0052640917710959911, 0.0062284148298203945, 0.0058950884267687798, 0.0050454777665436268, 0.0060311206616461277, 0.0045141400769352913, 0.0062580825760960579, 0.0043243700638413429, 0.0059118643403053284, 0.0045265397056937218, 0.00574480090290308, 0.0049093193374574184, 0.0067431656643748283, 0.0046368604525923729, 0.0052484557963907719, 0.0044206748716533184, 0.0063646691851317883, 0.0052671576850116253, 0.0047662500292062759, 0.0049882992170751095, 0.0045688813552260399, 0.0050917943008244038, 0.0051278630271553993, 0.0053043877705931664, 0.0054501262493431568, 0.0043581402860581875, 0.0038545865099877119, 0.0053388928063213825, 0.0060892272740602493, 0.0050841709598898888, 0.004775454755872488, 0.0048530134372413158, 0.00754213472828269, 0.0049302675761282444, 0.0049616312608122826, 0.0047980975359678268, } };
const TfArray<1280, int> quant76_zero = { 1280, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant76 = { (TfLiteFloatArray*)&quant76_scale, (TfLiteIntArray*)&quant76_zero, 0 };
const ALIGN(8) int8_t tensor_data77[1*3*3*8] = {
  /* [0][0][][] */ 1,-17,-4,7,0,-1,0,-5, -13,18,-11,127,4,3,-3,64, 0,-1,-3,5,-1,3,1,1,
  /* [0][1][][] */ -9,-127,-7,-3,1,1,-127,-1, 127,-1,-127,1,-127,127,-5,-13, -7,4,-3,-1,1,7,0,3,
  /* [0][2][][] */ 0,7,-8,-4,-1,1,8,2, -8,9,0,5,4,-18,3,-127, -1,-3,-1,-1,-2,1,1,-19,
};
const TfArray<4, int> tensor_dimension77 = { 4, { 1,3,3,8 } };
const TfArray<8, float> quant77_scale = { 8, { 0.0096412086859345436, 0.0046483725309371948, 0.013894679956138134, 0.0083508361130952835, 0.014161180704832077, 0.0074575357139110565, 0.0063511882908642292, 0.0078233126550912857, } };
const TfArray<8, int> quant77_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant77 = { (TfLiteFloatArray*)&quant77_scale, (TfLiteIntArray*)&quant77_zero, 3 };
const ALIGN(8) int32_t tensor_data78[8] = { 5379, -9135, -10010, 4888, 7106, 284, -10261, 11078, };
const TfArray<1, int> tensor_dimension78 = { 1, { 8 } };
const TfArray<8, float> quant78_scale = { 8, { 0.00019402586622163653, 5.5657405027886853e-05, 0.00010523219680180773, 7.90325429989025e-05, 3.741346881724894e-05, 9.7153315437026322e-05, 4.2132516682613641e-05, 5.8630157582229003e-05, } };
const TfArray<8, int> quant78_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant78 = { (TfLiteFloatArray*)&quant78_scale, (TfLiteIntArray*)&quant78_zero, 0 };
const ALIGN(8) int8_t tensor_data79[1*3*3*48] = {
  /* [0][0][][] */ -49,113,35,36,-77,-78,-19,75,-89,-90,51,13,60,-127,-74,-75,93,-88,-109,-31,71,-56,34,24,113,80,-103,101,-23,26,-55,-69,-68,33,-3,81,105,77,-77,95,70,2,-113,58,-44,-46,-78,-46, 85,71,22,-127,-88,-115,-27,75,34,-127,54,-114,84,-37,-121,90,102,-95,-115,-34,106,-97,-81,98,-121,86,18,-127,-74,43,-82,-93,-87,40,-57,0,127,94,82,77,-80,-15,0,95,-97,-49,-116,-67, -20,-13,-11,88,-37,-21,12,13,48,-54,-21,84,9,-22,-38,-44,24,-10,-16,-8,74,-40,-17,41,11,31,97,26,-71,8,-43,-28,-36,-4,2,-13,43,42,-17,28,13,6,-10,52,-71,-16,-27,-13,
  /* [0][1][][] */ -76,127,-126,-21,-127,-87,-95,96,127,24,116,18,111,-68,-83,-86,112,-127,-96,-79,86,98,-71,21,-127,113,-127,-72,-27,-86,84,-110,-93,115,-56,127,-18,119,-90,127,17,-54,-127,68,-89,-101,-97,-98, 127,53,-127,119,-107,-127,-127,127,-46,23,127,-122,127,29,-127,127,127,-112,-127,-127,127,127,127,127,119,127,-12,99,-127,-127,127,-127,-127,127,-127,82,-4,127,127,57,-47,-77,-20,127,-127,-127,-127,-127, -24,-23,-27,-98,-46,-30,-26,31,-71,7,1,127,22,24,-44,-69,29,4,-42,-45,85,54,12,51,8,48,100,-18,-95,-75,68,-50,-67,13,-9,-2,-7,27,-19,29,28,-32,0,64,-94,-46,-59,-36,
  /* [0][2][][] */ -34,46,96,-17,-72,-3,-94,7,-34,67,91,-5,50,-47,-33,-55,42,-52,1,-71,10,-28,36,6,14,27,-45,-11,-1,85,-22,-47,-57,57,5,54,-70,24,-51,53,-86,-92,-64,16,-34,-61,-40,-40, 52,28,96,8,-61,-21,-115,14,11,78,87,-63,46,17,-45,72,29,-35,11,-90,21,-38,-43,45,2,32,-18,7,-83,122,-49,-45,-66,58,-10,56,-114,10,61,2,127,-127,4,51,-48,-70,-66,-44, -9,-5,36,10,-3,3,-64,-1,21,22,1,59,6,21,-1,-51,13,15,-1,-35,10,-20,7,-5,-17,27,32,-4,-48,71,-27,-9,-37,-2,12,18,-43,1,7,11,-39,-49,11,11,-32,-17,-19,-3,
};
const TfArray<4, int> tensor_dimension79 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant79_scale = { 48, { 0.01043145265430212, 0.0040926956571638584, 0.01286227535456419, 0.023484289646148682, 0.0070057609118521214, 0.0036128601059317589, 0.0035440241917967796, 0.0039978446438908577, 0.018676565960049629, 0.0035850042477250099, 0.0049428059719502926, 0.0047158421948552132, 0.0020810696296393871, 0.008478640578687191, 0.005476086400449276, 0.0043857456184923649, 0.0060314950533211231, 0.0053149140439927578, 0.0028795592952519655, 0.00542454794049263, 0.0036176396533846855, 0.0090530207380652428, 0.042116411030292511, 0.0043904935009777546, 0.020627066493034363, 0.0026438841596245766, 0.0047174543142318726, 0.024031508713960648, 0.0050785061903297901, 0.009218897670507431, 0.012229002080857754, 0.0077596884220838547, 0.0054111499339342117, 0.013527576811611652, 0.0067969281226396561, 0.0050129448063671589, 0.0064019509591162205, 0.005089824553579092, 0.0050687068141996861, 0.00239384057931602, 0.028503753244876862, 0.0053194151259958744, 0.010109648108482361, 0.0028006106149405241, 0.0038213147781789303, 0.0051766303367912769, 0.0047842352651059628, 0.0025015701539814472, } };
const TfArray<48, int> quant79_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant79 = { (TfLiteFloatArray*)&quant79_scale, (TfLiteIntArray*)&quant79_zero, 3 };
const ALIGN(8) int32_t tensor_data80[8] = { -16367, -5722, -5545, -501, 8875, 12683, -12095, 6135, };
const TfArray<1, int> tensor_dimension80 = { 1, { 8 } };
const TfArray<8, float> quant80_scale = { 8, { 0.0001563678088132292, 0.0001042586300172843, 0.00015366752631962299, 0.00014446023851633072, 0.00013868781388737261, 0.00014408740389626473, 0.00017232776735909283, 0.00010795734124258161, } };
const TfArray<8, int> quant80_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant80 = { (TfLiteFloatArray*)&quant80_scale, (TfLiteIntArray*)&quant80_zero, 0 };
const ALIGN(8) int8_t tensor_data81[1*3*3*48] = {
  /* [0][0][][] */ 13,36,-89,-20,-78,11,99,9,48,67,8,9,-45,-1,-8,-8,100,-4,12,-117,-109,-9,16,76,-15,-16,15,-13,75,13,-19,-16,-26,1,-17,-111,-37,-2,-12,36,32,-55,-22,-40,48,27,0,-32, 116,127,127,-42,-103,74,-38,127,93,104,-33,-61,-9,-56,0,21,127,59,28,75,127,-30,-3,127,56,127,68,8,-61,16,7,127,-127,12,-36,-40,50,-38,-69,127,66,127,-127,26,-44,-44,-4,-37, 9,32,19,41,-29,-27,-95,-37,18,45,10,33,-5,27,-14,1,-5,-24,-2,41,-5,-2,9,67,-27,-48,12,-13,-44,10,-11,-9,-28,7,42,-116,5,33,-9,38,-84,-20,5,-47,39,-5,-9,0,
  /* [0][1][][] */ 49,-40,-126,-96,-24,2,127,-45,-54,6,5,-75,27,-127,21,24,109,-9,27,127,87,-17,2,-36,-55,14,-41,-13,127,34,31,72,37,4,0,-127,-47,40,49,-40,20,31,25,51,29,104,99,127, 28,-2,118,4,36,-42,-16,-71,-127,121,127,-127,-127,-67,127,127,72,-127,-127,-71,-79,-127,127,-81,127,-66,-127,127,-46,-127,127,59,85,127,-104,-74,-45,-127,127,-5,72,-82,105,127,-127,-127,127,-39, 42,-28,-72,127,-18,1,-104,-38,-13,-3,-21,-28,37,-18,2,37,33,55,65,-79,9,-6,-4,-53,-73,25,-42,-5,-42,19,-16,14,39,13,127,-110,127,101,32,-52,-127,5,1,13,25,53,57,-98,
  /* [0][2][][] */ 15,-68,-83,-24,-6,-42,-32,4,-1,59,-10,63,36,0,-25,3,-17,37,4,-19,40,-12,11,-39,-21,8,27,-9,87,-10,-30,1,-4,12,-5,71,-14,-18,-31,-23,29,24,-3,-3,26,48,-4,-95, 127,14,92,-27,-127,-127,16,48,30,-127,-37,-49,23,-56,6,2,11,30,67,-2,-61,-1,-21,-44,47,-62,66,2,-116,48,-33,79,33,37,-31,17,36,-9,-71,-44,42,-31,21,34,-34,-67,-13,32, 10,-80,15,-37,-44,-40,48,-13,-14,57,1,65,59,27,-22,5,10,8,-2,14,-8,-11,9,-26,-35,21,21,-4,-20,-9,-15,-8,-9,25,19,77,7,11,-21,-11,-88,8,-2,6,27,1,-17,-16,
};
const TfArray<4, int> tensor_dimension81 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant81_scale = { 48, { 0.0054330197162926197, 0.0088657001033425331, 0.0059890546835958958, 0.0034333588555455208, 0.009386429563164711, 0.0058158589527010918, 0.028354715555906296, 0.014929462224245071, 0.0091205425560474396, 0.0094519834965467453, 0.025030570104718208, 0.006608723197132349, 0.020842097699642181, 0.0049478150904178619, 0.023874811828136444, 0.0099764596670866013, 0.0046020215377211571, 0.16852405667304993, 0.012168065644800663, 0.038622908294200897, 0.01032409630715847, 0.0070218048058450222, 0.0081046679988503456, 0.010060194879770279, 0.014330169185996056, 0.010166567750275135, 0.011377880349755287, 0.023970061913132668, 0.010558802634477615, 0.05373777449131012, 0.023377729579806328, 0.0026895550545305014, 0.010617928579449654, 0.012245521880686283, 0.01360455434769392, 0.005081529263406992, 0.0065609137527644634, 0.0091555928811430931, 0.022838633507490158, 0.015192383900284767, 0.005417725071310997, 0.035218782722949982, 0.013770016841590405, 0.032990731298923492, 0.017552973702549934, 0.0081687606871128082, 0.011565154418349266, 0.006404142826795578, } };
const TfArray<48, int> quant81_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant81 = { (TfLiteFloatArray*)&quant81_scale, (TfLiteIntArray*)&quant81_zero, 3 };
const ALIGN(8) int32_t tensor_data82[8] = { -18818, 1501, -4590, 24823, -15445, -2556, 8640, -10003, };
const TfArray<1, int> tensor_dimension82 = { 1, { 8 } };
const TfArray<8, float> quant82_scale = { 8, { 0.00011865965643664822, 0.00010629642201820388, 7.5832998845726252e-05, 0.00011255600838921964, 0.00019764548051171005, 0.00010106901754625142, 7.7197568316478282e-05, 0.00011738239845726639, } };
const TfArray<8, int> quant82_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant82 = { (TfLiteFloatArray*)&quant82_scale, (TfLiteIntArray*)&quant82_zero, 0 };
const ALIGN(8) int8_t tensor_data83[1*3*3*48] = {
  /* [0][0][][] */ -89,78,-82,120,73,-68,12,-119,-77,80,87,-65,78,51,-112,-95,56,-58,-98,74,-89,78,81,88,-102,74,71,67,-39,-52,-65,96,72,-59,-59,-74,-78,78,-66,99,-37,51,-97,-52,-87,95,58,-62, -122,115,-99,-77,-43,-94,-63,-118,-116,105,95,-93,127,78,-127,-106,93,-68,-90,83,-87,98,107,127,-90,89,94,98,-63,-83,-86,119,92,-73,-86,-94,-71,112,-115,111,-57,86,-104,-81,-111,117,82,-91, -52,55,-63,-24,-90,-38,-71,-47,-46,41,28,-32,50,33,-45,-49,29,-46,-50,50,-34,61,37,43,-53,34,33,24,-33,-34,-45,49,34,-49,-46,-39,-35,59,-62,29,-1,29,-37,-44,-47,32,33,-24,
  /* [0][1][][] */ -106,96,-108,127,68,-103,5,-123,-93,93,102,-94,-9,91,-112,-116,64,-102,-112,102,-124,105,108,83,-127,102,100,87,-77,-93,-104,100,101,-123,-83,-100,-127,90,-96,105,-89,86,-127,-80,-108,104,106,-92, -127,127,-127,-126,-105,-127,-112,-127,-127,127,127,-127,-4,127,-99,-127,127,-127,-127,127,-127,127,127,120,-111,127,127,127,-127,-127,-127,127,127,-127,-127,-127,-110,127,-127,127,-127,127,-121,-127,-127,127,127,-127, -74,64,-84,-95,-127,-67,-127,-44,-48,49,45,-52,2,55,-62,-57,44,-66,-74,63,-52,66,41,32,-58,46,40,41,-69,-72,-80,54,45,-100,-49,-47,-77,50,-80,32,-31,60,-45,-62,-55,34,65,-56,
  /* [0][2][][] */ -78,37,-39,59,67,-66,3,-69,-34,22,39,-41,-82,48,-59,-73,15,-50,-40,44,-59,60,40,-12,-28,28,28,38,-50,-48,-69,22,39,-36,-38,-51,-61,16,-46,32,-54,39,-70,-30,-48,29,52,-23, -95,39,-72,-46,-76,-74,-71,-60,-32,32,60,-58,-116,67,-85,-64,44,-56,-76,50,-52,78,41,-15,-24,54,35,40,-68,-75,-79,33,49,-56,-54,-56,-61,29,-64,34,-71,62,-64,-62,-61,19,67,-49, -46,24,-14,-61,-110,-38,-84,-13,-10,24,30,-33,-65,22,-2,-20,18,-23,-50,27,-19,21,11,-14,-9,16,15,38,-57,-37,-52,12,8,-45,-7,-7,-15,3,-27,6,-28,29,-24,-26,0,14,29,-22,
};
const TfArray<4, int> tensor_dimension83 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant83_scale = { 48, { 0.0041944142431020737, 0.0047686356119811535, 0.0041037225164473057, 0.0039555639959871769, 0.0043239975348114967, 0.0042765303514897823, 0.0041914037428796291, 0.0033856427762657404, 0.0023894980549812317, 0.0050469366833567619, 0.0049326657317578793, 0.0033821864053606987, 0.0064997770823538303, 0.0038705114275217056, 0.0038095545023679733, 0.0027809529565274715, 0.0041933157481253147, 0.0046365568414330482, 0.0037021285388618708, 0.010844261385500431, 0.0038724006153643131, 0.0060847783461213112, 0.0081725511699914932, 0.0031069607939571142, 0.0046545700170099735, 0.020734982565045357, 0.0042830947786569595, 0.021829767152667046, 0.0039420421235263348, 0.0054536070674657822, 0.0039299996569752693, 0.0015606974484398961, 0.0048887073062360287, 0.0033965101465582848, 0.0056657982058823109, 0.004293534904718399, 0.004697056021541357, 0.0047511323355138302, 0.0043546832166612148, 0.0036098277196288109, 0.002366113243624568, 0.0033262115903198719, 0.0024352155160158873, 0.0042861886322498322, 0.0030791410245001316, 0.0024737166240811348, 0.0028919996693730354, 0.0045806374400854111, } };
const TfArray<48, int> quant83_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant83 = { (TfLiteFloatArray*)&quant83_scale, (TfLiteIntArray*)&quant83_zero, 3 };
const ALIGN(8) int32_t tensor_data84[8] = { 9879, -15808, -28726, 4243, 521, 7884, -5443, 35651, };
const TfArray<1, int> tensor_dimension84 = { 1, { 8 } };
const TfArray<8, float> quant84_scale = { 8, { 0.00010091779404319823, 7.1211492468137294e-05, 6.8763365561608225e-05, 9.9978118669241667e-05, 8.5376734205055982e-05, 8.2951599324587733e-05, 8.8392524048686028e-05, 7.3382092523388565e-05, } };
const TfArray<8, int> quant84_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant84 = { (TfLiteFloatArray*)&quant84_scale, (TfLiteIntArray*)&quant84_zero, 0 };
const ALIGN(8) int8_t tensor_data85[1*3*3*48] = {
  /* [0][0][][] */ 1,-22,21,-24,-103,6,-30,11,-6,66,-50,-94,-42,-127,-19,-120,-98,-24,-5,-1,7,38,-10,28,-127,2,-80,-111,-41,24,11,-37,-13,69,-30,-51,-37,-17,-13,-80,126,4,97,19,28,34,15,19, 46,-12,33,-127,-114,66,50,127,-75,-75,-116,33,26,-47,-127,41,103,-18,-12,-4,-79,2,11,-21,-31,-1,-76,-127,-127,67,88,-29,-3,127,-40,-87,-110,-67,-14,-127,-127,51,127,52,34,36,18,44, -2,32,4,-8,-41,0,-52,6,3,90,-46,-92,36,-87,-5,-95,56,-22,-15,9,3,34,0,34,-111,-3,-90,-105,-36,22,14,-41,-4,37,-7,-38,-13,-45,-15,-92,126,-8,75,-127,12,35,-16,32,
  /* [0][1][][] */ 32,-111,-27,34,-107,2,111,-25,3,30,-108,28,-78,-9,-66,-30,82,-39,-30,-93,81,25,127,8,-76,-32,-108,-21,-50,117,2,-18,-31,51,-11,-127,12,-69,7,-110,-82,24,-88,105,8,26,127,26, 127,13,127,59,127,127,127,-60,-80,-83,-26,127,-51,1,-113,-127,18,127,127,-19,-127,127,-95,127,-74,-74,107,103,-80,76,-127,-90,-127,41,127,40,95,-1,-127,6,-100,127,-110,17,127,-127,-48,86, 40,127,-42,16,-68,2,112,-22,5,80,-127,16,127,30,-49,-37,-78,-82,-50,127,59,14,-30,8,-74,127,-127,-59,-42,91,-15,-10,-49,30,-88,-120,12,-127,5,-106,-79,1,-61,-53,1,20,-84,-38,
  /* [0][2][][] */ -8,-37,10,-2,-71,15,-61,19,12,127,-54,13,-8,-63,11,-107,-127,0,-41,12,28,-7,6,4,-120,8,-84,-110,28,127,-12,69,-12,45,-76,-43,-29,16,50,-58,109,-52,0,1,21,28,6,-34, -3,-28,15,65,-74,-26,84,-71,127,96,-118,-27,-21,-37,-102,21,31,-56,-36,-46,-36,36,4,23,-29,0,72,-87,-18,-49,38,127,-32,1,-107,-72,-127,-46,67,-127,-104,-40,8,-70,-16,12,-14,-127, 6,47,13,-8,-40,2,-66,18,1,82,-40,4,18,-35,18,-87,25,2,-42,25,11,9,-12,6,-121,-4,-97,-91,38,83,-3,57,-7,52,-26,-4,-17,-4,49,-56,105,-45,-6,-76,9,24,0,-9,
};
const TfArray<4, int> tensor_dimension85 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant85_scale = { 48, { 0.0053727212361991405, 0.011182785965502262, 0.013540560379624367, 0.028148137032985687, 0.0051770112477242947, 0.012525882571935654, 0.0047132731415331364, 0.019493278115987778, 0.012992230243980885, 0.003219568869099021, 0.0033811316825449467, 0.012724478729069233, 0.011623146012425423, 0.0043969559483230114, 0.0067485487088561058, 0.0055547174997627735, 0.011702786199748516, 0.013903071172535419, 0.0062344521284103394, 0.011583771556615829, 0.015200401656329632, 0.024003930389881134, 0.020050538703799248, 0.0068807546049356461, 0.0038371838163584471, 0.019393656402826309, 0.0042390041053295135, 0.0032199621200561523, 0.0035513602197170258, 0.012552449479699135, 0.01489645428955555, 0.0086498521268367767, 0.006741388700902462, 0.0032368479296565056, 0.0059243980795145035, 0.0047679799608886242, 0.0061935549601912498, 0.0052458769641816616, 0.012191725894808769, 0.0038480348885059357, 0.0049758292734622955, 0.010100732557475567, 0.00919309351593256, 0.020743111148476601, 0.060663066804409027, 0.009215756319463253, 0.014893470332026482, 0.016098121181130409, } };
const TfArray<48, int> quant85_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant85 = { (TfLiteFloatArray*)&quant85_scale, (TfLiteIntArray*)&quant85_zero, 3 };
const ALIGN(8) int32_t tensor_data86[8] = { -8493, 11429, -15517, 18585, -3431, -10797, 3709, -7612, };
const TfArray<1, int> tensor_dimension86 = { 1, { 8 } };
const TfArray<8, float> quant86_scale = { 8, { 5.8140889450442046e-05, 6.5916879975702614e-05, 3.4631211747182533e-05, 6.6684100602287799e-05, 5.5381031415890902e-05, 6.732469773851335e-05, 5.814047108287923e-05, 5.712106212740764e-05, } };
const TfArray<8, int> quant86_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant86 = { (TfLiteFloatArray*)&quant86_scale, (TfLiteIntArray*)&quant86_zero, 0 };
const ALIGN(8) int8_t tensor_data87[1*3*3*48] = {
  /* [0][0][][] */ 43,13,114,-126,-17,-11,-26,51,-94,-68,-20,-71,12,-44,110,72,-117,119,57,66,-4,-3,15,79,13,-48,-124,77,-45,88,-24,47,-35,-61,-42,54,-14,-123,32,32,-12,-51,-107,30,-22,-65,12,-14, -12,85,124,-127,22,36,-11,127,21,-71,-126,-79,67,6,-28,127,-51,91,-127,-32,-95,101,53,-24,76,-118,-25,98,-127,56,-127,79,23,4,127,110,-49,-127,-17,27,-127,127,1,75,32,-66,5,42, 25,-98,124,-121,-13,16,17,36,-84,-65,-31,-58,-4,50,-62,36,-127,108,52,43,6,-4,16,-49,15,-51,-88,67,-27,48,-19,32,-35,-45,-66,42,-5,-87,-12,22,-9,-28,65,6,-12,-52,6,-43,
  /* [0][1][][] */ 62,43,-4,86,70,-117,-127,-10,59,-60,-95,-99,31,-24,127,48,-88,127,39,-54,-119,-2,34,68,13,-15,-120,120,38,77,-15,44,90,0,52,89,-34,-48,127,-6,-107,33,-114,85,8,-125,23,8, 127,89,51,91,127,-61,13,-104,127,11,127,61,127,-75,-55,67,-33,32,73,127,-8,127,127,-127,-127,127,27,-83,108,-127,52,127,127,16,125,-127,103,-42,-103,127,-49,113,17,-14,30,-127,113,127, 26,-127,-69,92,26,-5,-23,-6,49,-66,-117,-105,9,127,-59,13,-101,58,38,25,-127,-10,-22,25,10,-33,-37,127,20,16,-19,38,73,7,43,69,-46,2,-8,-32,-101,-38,107,78,-15,-104,16,-6,
  /* [0][2][][] */ 46,74,100,25,21,-100,29,-25,-61,71,-32,-59,27,-23,87,114,-25,35,16,33,19,-5,21,103,9,28,-127,-42,10,65,23,6,-18,12,-61,60,-15,-72,10,-52,-45,-39,-127,-11,-127,-50,-45,-11, -82,-23,28,29,36,-127,-40,5,14,127,-79,-127,-5,-34,-73,52,-59,70,14,4,-79,-51,25,-38,-10,7,-25,18,1,20,82,77,39,127,-79,94,-127,43,-12,-96,-31,46,35,127,-75,36,-127,-21, 47,-67,127,17,-11,-9,77,-22,-40,79,-52,-51,27,72,-13,20,-31,50,17,15,-1,3,18,-24,5,15,-91,1,9,34,29,-21,-23,4,-62,39,1,-69,-20,-78,-40,4,76,-31,-83,-27,-38,-34,
};
const TfArray<4, int> tensor_dimension87 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant87_scale = { 48, { 0.0074593476019799709, 0.0066795824095606804, 0.0037093828432261944, 0.0066528045572340488, 0.0079588759690523148, 0.0035920438822358847, 0.0093393567949533463, 0.011716779321432114, 0.015938080847263336, 0.0075343395583331585, 0.0064348159357905388, 0.0044365189969539642, 0.0094788568094372749, 0.010847746394574642, 0.007901439443230629, 0.0028227437287569046, 0.0047370134852826595, 0.0036177204456180334, 0.0094144474714994431, 0.0071242759004235268, 0.0040359259583055973, 0.010410415008664131, 0.0063355020247399807, 0.010848758742213249, 0.027708727866411209, 0.009160495363175869, 0.0028891903348267078, 0.014904782176017761, 0.014658564701676369, 0.0050182747654616833, 0.0089510073885321617, 0.005898443516343832, 0.0055421111173927784, 0.014628206379711628, 0.0088687436655163765, 0.0050735324621200562, 0.0099868280813097954, 0.0037262567784637213, 0.011729582212865353, 0.011089710518717766, 0.004879421554505825, 0.0084825912490487099, 0.005603911355137825, 0.0058081387542188168, 0.0088903298601508141, 0.0030313925817608833, 0.013414569199085236, 0.017187861725687981, } };
const TfArray<48, int> quant87_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant87 = { (TfLiteFloatArray*)&quant87_scale, (TfLiteIntArray*)&quant87_zero, 3 };
const ALIGN(8) int32_t tensor_data88[8] = { 5807, 23765, -1167, 11888, 1827, -20723, -106, -1673, };
const TfArray<1, int> tensor_dimension88 = { 1, { 8 } };
const TfArray<8, float> quant88_scale = { 8, { 8.865790005074814e-05, 0.00021527594071812928, 9.2954782303422689e-05, 8.3345687016844749e-05, 7.0316382334567606e-05, 9.269927249988541e-05, 9.3207825557328761e-05, 6.3513041823171079e-05, } };
const TfArray<8, int> quant88_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant88 = { (TfLiteFloatArray*)&quant88_scale, (TfLiteIntArray*)&quant88_zero, 0 };
const ALIGN(8) int8_t tensor_data89[1*3*3*48] = {
  /* [0][0][][] */ -49,56,-110,-34,-84,78,73,56,92,79,76,-56,-92,119,-55,-66,-33,107,-37,-77,-90,-50,-90,-44,88,97,62,90,61,-67,-60,-97,-78,-91,79,37,70,-105,127,55,-75,75,90,-42,62,-83,76,70, -75,72,-124,-55,-92,96,95,83,111,87,79,-83,-110,114,-88,55,-88,119,-63,-99,-71,-77,-103,-62,116,104,76,104,76,-87,-80,-108,-98,-127,104,52,88,-113,-4,72,-83,83,109,-75,86,-93,92,87, -27,29,-71,-28,-32,31,36,39,47,41,43,-28,-52,39,-49,81,-20,24,-30,-14,-5,-38,-49,-33,52,38,20,33,14,-39,-10,-51,-26,-78,30,59,32,-31,-23,28,-20,28,52,-33,54,-35,42,27,
  /* [0][1][][] */ -96,103,-127,-80,-96,100,110,86,112,102,118,-93,-105,127,-85,-58,-66,118,-82,-107,-127,-90,-115,-113,96,127,100,101,105,-110,-95,-127,-106,32,104,-83,90,-93,115,102,-111,109,112,-74,96,-108,107,96, -127,127,-127,-127,-127,127,127,127,127,127,127,-127,-127,116,-127,81,-127,127,-127,-127,-113,-127,-127,-127,127,127,127,127,127,-127,-127,-113,-127,41,127,-84,127,-127,-109,127,-127,127,127,-127,127,-127,127,127, -37,39,-51,-59,-30,32,52,62,53,40,62,-38,-56,61,-58,127,-71,34,-68,-30,8,-68,-63,-36,48,27,46,53,33,-23,-27,-79,-32,33,41,-44,58,-61,-61,45,-55,41,76,-48,82,-42,51,46,
  /* [0][2][][] */ -42,48,-21,-40,-30,30,31,40,19,42,79,-40,-56,23,-14,12,-41,75,-50,-44,-80,-48,-47,-64,22,58,50,39,46,-58,-55,-87,-41,15,45,-127,37,-43,70,68,-48,36,43,-34,58,-68,38,40, -66,60,-33,-70,-56,39,56,63,42,58,89,-43,-75,-4,-35,87,-70,100,-78,-51,-83,-66,-62,-59,30,65,61,54,53,-82,-62,-96,-54,12,61,-105,62,-69,-73,85,-59,41,54,-58,82,-92,48,58, -26,33,-22,-24,-2,9,47,37,31,29,32,-15,-16,-3,-8,124,-48,48,-39,-23,4,-34,-2,19,11,40,32,36,28,-26,-7,-29,-2,9,27,-104,27,-34,-83,45,-43,12,45,-6,53,3,24,23,
};
const TfArray<4, int> tensor_dimension89 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant89_scale = { 48, { 0.0023744604550302029, 0.0038841394707560539, 0.0020164377056062222, 0.0031454048585146666, 0.0058144186623394489, 0.0041428664699196815, 0.003271779278293252, 0.0029676309786736965, 0.0057068667374551296, 0.0059724114835262299, 0.00356842833571136, 0.0059388424269855022, 0.0038201815914362669, 0.01026776060461998, 0.0029869766440242529, 0.0051862890832126141, 0.0047410940751433372, 0.0065618911758065224, 0.0022679518442600965, 0.0035262764431536198, 0.0046567558310925961, 0.002083613071590662, 0.0040409485809504986, 0.0034339663106948137, 0.0030810881871730089, 0.0097609469667077065, 0.0039463667199015617, 0.0035276284907013178, 0.0034014643169939518, 0.0036161881871521473, 0.0045490092597901821, 0.0033459269907325506, 0.0032681890297681093, 0.0063573848456144333, 0.0060882894322276115, 0.0035992769990116358, 0.0050616119988262653, 0.0029764927458018064, 0.006252792663872242, 0.0076641985215246677, 0.0034063658677041531, 0.0034011676907539368, 0.0059793791733682156, 0.0029924851842224598, 0.0060153026133775711, 0.0034779452253133059, 0.004255328793078661, 0.0033515505492687225, } };
const TfArray<48, int> quant89_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant89 = { (TfLiteFloatArray*)&quant89_scale, (TfLiteIntArray*)&quant89_zero, 3 };
const ALIGN(8) int32_t tensor_data90[8] = { -2041, -24345, -798, -6744, -9231, -9673, -5165, -9177, };
const TfArray<1, int> tensor_dimension90 = { 1, { 8 } };
const TfArray<8, float> quant90_scale = { 8, { 6.7078173742629588e-05, 7.465666567441076e-05, 6.3786639657337219e-05, 8.0920333857648075e-05, 5.4727934184484184e-05, 6.8780987930949777e-05, 7.1931310230866075e-05, 9.1308254923205823e-05, } };
const TfArray<8, int> quant90_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant90 = { (TfLiteFloatArray*)&quant90_scale, (TfLiteIntArray*)&quant90_zero, 0 };
const ALIGN(8) int8_t tensor_data91[1*3*3*48] = {
  /* [0][0][][] */ -30,3,52,-30,-40,5,4,3,-101,-127,-13,22,-17,-80,26,33,-127,-56,-1,-41,44,2,28,-4,-29,-85,118,-43,33,0,-7,62,35,-15,-103,-21,32,-13,-39,34,16,32,48,-68,27,-26,-104,-85, -15,37,127,-51,56,77,-6,127,-127,-86,26,127,34,-127,122,46,-2,-68,4,36,23,-35,80,32,-125,-127,45,53,-29,41,3,-21,-78,-30,-67,-127,127,45,-14,124,-51,127,-6,-31,23,-80,96,57, -18,4,30,-14,-30,12,5,-4,-78,-120,7,14,-15,-13,24,7,-112,-46,5,-56,38,-9,21,0,105,-54,107,-31,40,-14,20,53,21,-9,-110,-18,16,-48,-14,-9,17,29,43,-86,18,-31,3,-127,
  /* [0][1][][] */ -72,35,-23,-69,0,-22,-27,-21,51,-74,-5,-6,-66,-68,5,-46,-31,-46,9,20,45,-31,54,41,-67,-14,-47,-23,58,-2,-126,34,127,52,20,19,-19,23,-127,63,-80,23,119,-63,49,-28,-127,20, 109,-127,28,-85,124,-32,127,-119,126,-73,-21,-121,-53,-73,14,-82,-27,127,-114,127,-127,-125,-127,127,-31,71,-122,127,127,127,32,-127,-55,127,81,108,-97,127,-57,15,-127,-86,-127,127,127,-102,126,-124, -73,26,9,-64,5,-33,-43,-74,43,-39,-7,-10,-57,-49,6,-65,-40,-55,2,-17,28,-35,64,29,127,-46,-21,-38,13,-5,127,35,-86,9,2,8,-18,-48,-101,44,-78,12,-119,-67,67,2,30,39,
  /* [0][2][][] */ 76,31,-53,41,2,29,-16,-108,28,-88,-32,-4,65,-3,-36,-127,-97,-52,-1,-9,24,29,17,2,24,-72,127,-33,19,-2,-26,40,28,-74,-127,-3,-22,-66,72,127,52,-39,38,-102,20,36,-63,-11, 127,-1,-119,-127,-127,127,-24,-41,55,-81,-127,-23,127,-81,-127,-49,-56,-5,127,-109,-10,127,-12,51,-47,-116,63,43,-3,55,-20,-27,-63,-58,-59,59,-8,-61,-56,97,-98,-5,107,-72,24,127,30,-55, -48,25,-52,48,3,37,-17,-115,-4,-113,-27,1,51,42,-39,-63,-124,-56,-8,11,31,47,14,-7,30,-52,108,-23,14,4,38,33,44,-69,-127,-6,-27,-10,61,56,49,-33,45,-77,19,16,-28,-17,
};
const TfArray<4, int> tensor_dimension91 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant91_scale = { 48, { 0.0083295563235878944, 0.02003210037946701, 0.0077964253723621368, 0.0055223684757947922, 0.016205096617341042, 0.0085461810231208801, 0.01334474328905344, 0.0050716688856482506, 0.0066428622230887413, 0.0029822110664099455, 0.0062067587859928608, 0.016194071620702744, 0.0079328930005431175, 0.0039847991429269314, 0.0076667247340083122, 0.0056169405579566956, 0.0039827711880207062, 0.0083069708198308945, 0.01421352569013834, 0.010780039243400097, 0.011135157197713852, 0.0084151662886142731, 0.010227286256849766, 0.0064437147229909897, 0.0074546518735587597, 0.0061051240190863609, 0.0045794537290930748, 0.014585938304662704, 0.0059862793423235416, 0.017007986083626747, 0.0087653286755084991, 0.0079641910269856453, 0.010648737661540508, 0.011721847578883171, 0.0044478173367679119, 0.013217022642493248, 0.012237892486155033, 0.02606954425573349, 0.0075783506035804749, 0.0050159287638962269, 0.0073216091841459274, 0.01218466367572546, 0.009684806689620018, 0.008998427540063858, 0.0066728787496685982, 0.0072145764715969563, 0.0063048265874385834, 0.0079602394253015518, } };
const TfArray<48, int> quant91_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant91 = { (TfLiteFloatArray*)&quant91_scale, (TfLiteIntArray*)&quant91_zero, 3 };
const ALIGN(8) int32_t tensor_data92[8] = { 8855, 8360, -2502, 2921, -25101, 446, -2083, 8017, };
const TfArray<1, int> tensor_dimension92 = { 1, { 8 } };
const TfArray<8, float> quant92_scale = { 8, { 9.3845628725830466e-05, 6.364597356878221e-05, 7.5657662819139659e-05, 5.2254512411309406e-05, 5.2158495236653835e-05, 8.077313395915553e-05, 4.4668842747341841e-05, 4.6784902224317193e-05, } };
const TfArray<8, int> quant92_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant92 = { (TfLiteFloatArray*)&quant92_scale, (TfLiteIntArray*)&quant92_zero, 0 };
const ALIGN(8) int8_t tensor_data93[1*3*3*48] = {
  /* [0][0][][] */ -103,-26,-25,-114,13,105,89,-1,-23,3,20,84,-54,-82,-111,-117,-10,24,36,-3,16,-4,17,8,127,120,37,-16,6,17,9,-32,-21,61,-24,-101,47,-101,2,29,33,33,-86,102,-48,19,-25,99, 20,-4,86,-127,-38,45,42,29,67,21,10,-36,-17,-127,-57,-71,-13,107,-51,46,127,91,-24,127,-1,34,31,-17,-113,52,127,50,118,109,-26,-97,2,-125,-40,127,127,-127,-127,-39,101,125,53,-8, -46,-16,-15,-108,14,87,81,3,72,4,26,-66,-29,-67,-109,-120,-28,18,46,-13,-12,-5,9,4,73,127,27,-17,11,-103,4,-37,-7,70,-25,-127,-60,-56,-6,22,10,30,-88,96,-25,-1,-37,-36,
  /* [0][1][][] */ -82,22,103,-66,95,20,3,32,0,97,-39,61,13,-48,-90,127,-112,8,127,-62,-12,68,-9,9,50,40,75,6,5,71,-10,52,-35,22,-44,-38,127,-17,-39,117,-1,-9,-104,43,-84,70,-35,91, 15,-127,-127,-92,6,-127,-127,127,-127,-127,127,8,127,-35,34,115,89,-89,23,22,-101,19,127,-55,13,-59,68,-127,127,29,-62,-127,-47,-127,-127,2,29,127,127,17,-63,-10,-36,-80,-104,127,127,-10, 91,15,86,-51,80,-19,-9,18,44,84,-47,-62,5,-42,-127,112,-125,12,70,-50,-5,65,21,5,101,31,36,12,-13,-127,-4,38,-36,-9,-7,-45,-116,-100,-28,126,-3,-8,-92,75,-120,35,-2,-127,
  /* [0][2][][] */ -127,21,-6,-91,56,69,-28,5,-61,12,-21,-127,18,-27,-72,-28,-14,-7,-110,35,-10,-21,31,7,3,14,-39,62,-27,44,-3,6,-20,12,6,-43,22,-16,-15,29,-38,24,9,127,-32,-19,-39,95, 75,36,-92,-111,127,-59,-36,50,16,34,-2,38,12,-28,-99,-8,-127,-127,-4,127,-27,-127,59,-6,22,-31,-127,80,12,-69,-19,122,127,-68,-40,48,-7,40,6,32,14,32,2,-25,127,59,-4,-108, 26,52,-17,-86,36,47,-25,20,40,6,-34,107,29,-18,-53,-25,-9,-11,-77,23,-12,-27,35,13,-29,39,-24,37,-32,-6,-5,9,-6,-5,18,-29,-21,-25,-14,52,-30,27,45,72,-58,10,-34,-30,
};
const TfArray<4, int> tensor_dimension93 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant93_scale = { 48, { 0.0068281264975667, 0.012349221855401993, 0.010717069730162621, 0.0052718082442879677, 0.0043543190695345402, 0.0051915384829044342, 0.0068958071060478687, 0.0071625551208853722, 0.0096420291811227798, 0.0099679548293352127, 0.013458791188895702, 0.0098699061200022697, 0.011543584056198597, 0.005333340261131525, 0.0035991065669804811, 0.0074205775745213032, 0.0067983516491949558, 0.0096967648714780807, 0.00820175651460886, 0.0086469277739524841, 0.012889156118035316, 0.0082125738263130188, 0.008060806430876255, 0.015558970160782337, 0.018383437767624855, 0.0055071436800062656, 0.0069365282543003559, 0.01124310027807951, 0.015153359621763229, 0.0081504788249731064, 0.014227149076759815, 0.011634958907961845, 0.010620907880365849, 0.007260915357619524, 0.0075394120067358017, 0.0059204711578786373, 0.0072834733873605728, 0.0065134251490235329, 0.016530312597751617, 0.0064418073743581772, 0.010125015862286091, 0.025435138493776321, 0.0030907758045941591, 0.0049673076719045639, 0.0054025524295866489, 0.0067043597809970379, 0.016016941517591476, 0.006336479913443327, } };
const TfArray<48, int> quant93_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant93 = { (TfLiteFloatArray*)&quant93_scale, (TfLiteIntArray*)&quant93_zero, 3 };
const ALIGN(8) int32_t tensor_data94[8] = { -7757, -2005, 11880, 7929, 1522, 16107, 4450, -6589, };
const TfArray<1, int> tensor_dimension94 = { 1, { 8 } };
const TfArray<8, float> quant94_scale = { 8, { 4.3608575651887804e-05, 4.7972800530260429e-05, 6.1270242440514266e-05, 7.6576572610065341e-05, 9.2542824859265238e-05, 4.1337902075611055e-05, 3.4560220228740945e-05, 5.8966885262634605e-05, } };
const TfArray<8, int> quant94_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant94 = { (TfLiteFloatArray*)&quant94_scale, (TfLiteIntArray*)&quant94_zero, 0 };
const ALIGN(8) int8_t tensor_data95[1*3*3*48] = {
  /* [0][0][][] */ -35,5,-102,-9,20,-26,100,-5,106,-27,-26,0,-35,-111,-71,66,32,2,-36,-107,127,41,-127,82,30,7,4,-70,29,28,35,85,13,-53,-98,-72,-116,96,-21,-3,55,40,127,-6,-100,0,23,5, 20,-127,-98,1,-3,42,7,-13,-46,7,-21,-127,-127,-25,-92,-38,121,43,26,122,-113,-127,17,-127,127,31,87,-97,-1,105,92,-90,127,-127,-96,-127,-30,110,-23,-5,54,-12,-52,-127,-47,-74,-89,94, -32,3,-66,-9,17,-26,120,-9,-40,-27,-29,-19,-66,-119,127,39,43,-6,20,-127,-54,44,-78,78,21,-13,-29,-82,25,30,30,57,17,-39,-60,-104,-106,99,-11,0,-127,26,-104,15,-127,49,-4,37,
  /* [0][1][][] */ 89,12,38,26,-68,28,50,33,-127,16,-27,-115,-61,-110,-3,80,0,-127,-127,119,62,26,22,-41,30,42,101,-127,16,-1,74,-126,22,59,51,-59,15,124,3,6,73,-11,51,37,-119,30,-127,-14, 126,27,-127,127,127,124,127,115,60,127,127,40,-41,1,69,-127,-127,-94,-5,121,63,-102,-17,-63,-126,127,30,-68,-127,127,-127,-51,-63,74,127,89,-87,-127,127,127,-103,-123,81,35,1,121,-32,127, 94,10,-17,17,-64,47,-45,24,10,18,-34,-115,-78,-127,67,83,-3,-120,121,99,23,39,27,-23,13,25,127,-122,17,1,60,-127,15,47,39,-81,17,63,7,-12,44,-3,-88,18,-116,-7,-103,14,
  /* [0][2][][] */ -40,-9,-72,-40,-37,-18,-11,-25,-116,-20,-30,-11,-29,-2,1,45,-20,-86,-14,-86,40,5,-106,-18,2,-33,15,-8,33,-94,10,101,-30,-22,-14,3,-61,106,-23,-10,62,-127,58,11,-26,83,5,14, 127,-36,97,-60,56,127,-30,-127,79,33,-38,-83,3,18,-89,61,-3,60,-9,77,-92,-62,0,32,9,-60,13,-95,43,-86,-51,-23,-59,70,106,122,-127,12,40,-37,-22,-40,-40,84,27,127,-102,3, -49,-17,-50,-32,-10,-15,29,-10,27,-24,-29,22,-38,0,62,32,-12,-94,28,-91,11,-10,-111,-43,3,-61,23,-1,35,-76,16,42,-27,-12,7,-10,-56,105,-28,-16,-57,-115,-66,-36,-96,95,-28,6,
};
const TfArray<4, int> tensor_dimension95 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant95_scale = { 48, { 0.0041266824118793011, 0.019497176632285118, 0.002986883046105504, 0.012019375339150429, 0.015443187206983566, 0.0055901650339365005, 0.0076904152520000935, 0.017823908478021622, 0.010843323543667793, 0.010695742443203926, 0.013326223939657211, 0.0037242579273879528, 0.0037653623148798943, 0.0036608788650482893, 0.0070334482006728649, 0.0068738311529159546, 0.013055048882961273, 0.004100569523870945, 0.0095833688974380493, 0.0061575658619403839, 0.0082361437380313873, 0.0062794205732643604, 0.0055118333548307419, 0.0098827248439192772, 0.011854369193315506, 0.0075294743292033672, 0.0046958113089203835, 0.0043450319208204746, 0.012966297566890717, 0.0071594058535993099, 0.0089791677892208099, 0.0062647820450365543, 0.011210612021386623, 0.010184849612414837, 0.0065059778280556202, 0.0062518804334104061, 0.0045306896790862083, 0.0041943355463445187, 0.012300768867135048, 0.01487343292683363, 0.0075097656808793545, 0.0049548009410500526, 0.0062256273813545704, 0.010427058674395084, 0.0034070434048771858, 0.0069568650797009468, 0.0041326964274048805, 0.0061251064762473106, } };
const TfArray<48, int> quant95_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant95 = { (TfLiteFloatArray*)&quant95_scale, (TfLiteIntArray*)&quant95_zero, 3 };
const ALIGN(8) int32_t tensor_data96[8] = { -779, 12245, 3040, -2045, -29579, 19603, -1178, 12016, };
const TfArray<1, int> tensor_dimension96 = { 1, { 8 } };
const TfArray<8, float> quant96_scale = { 8, { 3.1975767342373729e-05, 4.5296492316992953e-05, 5.3219097026158124e-05, 4.1590308683225885e-05, 4.2939806007780135e-05, 6.3699480961076915e-05, 4.176118818577379e-05, 5.0624246796360239e-05, } };
const TfArray<8, int> quant96_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant96 = { (TfLiteFloatArray*)&quant96_scale, (TfLiteIntArray*)&quant96_zero, 0 };
const ALIGN(8) int8_t tensor_data97[1*3*3*48] = {
  /* [0][0][][] */ 17,37,-19,0,37,41,10,-7,-26,-60,-96,19,-6,29,-121,28,-32,72,-46,25,-56,-42,1,35,-43,13,-19,-38,11,-24,-97,83,28,24,-28,-36,-127,-28,-28,-25,-8,-107,73,4,68,78,-13,37, 5,-10,127,-15,-127,57,127,2,127,-51,-90,127,-23,-6,-31,127,50,100,-38,127,-19,22,127,-43,-60,127,-105,127,20,20,-112,108,-33,-127,-105,106,-53,127,-116,-46,72,23,126,48,-32,127,127,83, -37,-44,-33,1,66,12,16,-11,34,-46,-127,-23,-13,27,101,30,-31,6,-44,7,-54,44,-15,52,-29,7,-33,-18,-5,-39,-71,60,23,1,4,-42,-104,-22,31,-19,-22,99,43,6,61,87,-49,17,
  /* [0][1][][] */ 40,127,78,35,26,69,-26,-1,-57,22,-1,117,-13,-118,21,-9,40,127,106,1,-34,-127,11,-20,25,-5,-53,-38,55,-54,-71,-54,-49,-20,-109,31,-87,13,43,-54,37,-127,127,-57,28,-60,32,7, 99,-11,22,127,-46,-127,113,-127,-113,127,0,-11,127,-36,14,43,127,-44,63,36,-127,2,3,-127,127,-100,127,-17,127,7,-95,-127,127,-65,28,127,-45,39,127,40,127,-47,85,-15,-127,-32,119,-2, -127,-47,53,19,-17,33,-49,2,67,-4,17,-3,-19,-127,29,-6,49,68,103,6,-85,117,6,23,13,-29,-43,-36,-18,-33,-77,-57,-54,-29,-127,7,-95,-34,-36,-47,-25,99,67,-63,9,-85,2,16,
  /* [0][2][][] */ -54,22,-92,-10,-19,14,7,38,-19,-6,-38,-39,7,55,-113,-35,1,58,127,3,-46,-49,3,53,13,-33,-2,23,-9,26,-127,67,-58,10,-83,-21,-77,-113,-1,75,7,-47,33,16,-45,41,-24,51, -41,-17,12,11,24,2,-107,107,-33,7,21,-81,60,-125,-52,-8,7,101,40,8,0,10,8,52,15,5,40,72,34,-127,-118,113,-67,-33,-105,-23,-109,2,21,127,-109,66,32,127,-13,85,-84,-127, 63,-60,-81,-16,-20,21,0,31,4,-4,-54,-48,-1,53,127,-19,-2,72,81,2,-41,42,7,42,14,-21,-5,32,-31,20,-118,71,-58,0,-79,-22,-73,-113,4,47,16,54,29,10,-50,49,-7,30,
};
const TfArray<4, int> tensor_dimension97 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant97_scale = { 48, { 0.016155412420630455, 0.00928485207259655, 0.0073474887758493423, 0.0090066688135266304, 0.012941106222569942, 0.012507314793765545, 0.0069102016277611256, 0.010374994017183781, 0.0089795226231217384, 0.013756100088357925, 0.0049229557625949383, 0.0075943740084767342, 0.0098706036806106567, 0.0070143095217645168, 0.0072377785108983517, 0.008542696014046669, 0.0076690809801220894, 0.002227401128038764, 0.0039380788803100586, 0.014770424924790859, 0.0045457389205694199, 0.0063238912262022495, 0.012205620296299458, 0.011970652267336845, 0.011885780841112137, 0.0093395169824361801, 0.010966924950480461, 0.0086510805413126945, 0.012119301594793797, 0.012189073488116264, 0.0035029025748372078, 0.005225298460572958, 0.011846074834465981, 0.007878531701862812, 0.0034935616422444582, 0.0085814967751502991, 0.003715819213539362, 0.00635950593277812, 0.01398327574133873, 0.0084522515535354614, 0.010050486773252487, 0.0062063420191407204, 0.015939859673380852, 0.014719576574862003, 0.009789569303393364, 0.0094319991767406464, 0.0080299228429794312, 0.017320571467280388, } };
const TfArray<48, int> quant97_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant97 = { (TfLiteFloatArray*)&quant97_scale, (TfLiteIntArray*)&quant97_zero, 3 };
const ALIGN(8) int32_t tensor_data98[8] = { 20948, -11723, -11063, -15547, -6739, 16045, 10332, 2228, };
const TfArray<1, int> tensor_dimension98 = { 1, { 8 } };
const TfArray<8, float> quant98_scale = { 8, { 4.697089025285095e-05, 5.9734997194027528e-05, 6.9442874519154429e-05, 8.210651867557317e-05, 5.9129735745955259e-05, 0.0001565990096423775, 5.1118659030180424e-05, 5.0965707487193868e-05, } };
const TfArray<8, int> quant98_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant98 = { (TfLiteFloatArray*)&quant98_scale, (TfLiteIntArray*)&quant98_zero, 0 };
const ALIGN(8) int8_t tensor_data99[1*3*3*48] = {
  /* [0][0][][] */ 11,-127,41,127,-14,41,-19,6,7,20,41,-9,-63,63,4,16,-51,-80,127,-14,-2,21,61,43,-39,38,55,127,-117,62,-36,46,-127,33,-22,-47,-27,-90,24,-51,28,-6,-59,47,-3,34,57,-64, -53,103,127,-28,14,72,-125,56,104,-20,127,-16,45,95,62,-4,-91,-71,-69,-77,127,21,127,20,82,123,112,18,-60,39,-69,26,6,127,32,-127,21,60,14,-127,127,16,-21,-127,-60,-23,-4,-93, 17,19,16,75,-11,102,1,-32,10,12,56,13,27,51,-4,11,-28,-74,-69,66,4,4,4,-26,-29,11,48,118,-91,38,-44,40,14,26,-13,-21,-21,-74,25,-63,-8,-13,-8,66,2,49,59,-13,
  /* [0][1][][] */ -58,-76,92,127,-25,31,65,26,-7,7,-31,27,127,127,40,127,27,-30,-69,54,57,8,-17,101,81,45,32,45,58,-35,-93,-24,-6,35,18,40,-19,32,1,-8,30,-40,39,-41,0,9,52,69, 67,27,77,-46,127,94,-81,127,-127,-127,33,-32,-96,-91,86,-105,120,-33,16,57,-14,127,86,-127,127,-55,-70,-2,-54,16,73,-127,1,81,79,-29,-127,125,-127,11,-40,-125,5,-30,127,-127,-36,-17, -65,34,59,73,-29,-103,60,-65,-13,9,-21,-27,-25,91,24,117,42,-20,50,-15,65,-22,0,15,73,55,47,26,-56,-57,-95,-12,23,-5,46,51,-36,43,-3,4,21,83,87,2,-2,28,63,30,
  /* [0][2][][] */ -76,-32,-23,-55,-9,-51,94,-18,-16,32,-43,127,114,-27,-122,-12,99,-124,-96,-40,-80,-31,-47,0,-65,-28,-47,40,-63,54,-94,54,21,-39,-53,-117,-32,-127,-4,-39,-61,95,-10,10,81,10,127,3, -127,-8,102,32,-23,127,15,2,31,-46,-6,34,-42,-20,-33,-17,-127,23,73,-127,-29,-96,-15,-20,-6,-127,-127,-7,-127,127,-127,58,50,-52,127,-74,0,26,13,124,-37,127,127,-89,88,43,71,127, -33,6,-28,38,-1,3,127,-21,-25,6,-44,-122,-92,1,-127,6,92,-127,56,80,-73,-12,-40,0,-89,-33,-45,43,-61,33,-79,37,4,-11,-46,-76,-4,-115,-3,-41,-27,-50,-6,20,33,21,117,-12,
};
const TfArray<4, int> tensor_dimension99 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant99_scale = { 48, { 0.00653097964823246, 0.0097325369715690613, 0.0049450523220002651, 0.006082264706492424, 0.017571981996297836, 0.0081879515200853348, 0.0060939015820622444, 0.017416121438145638, 0.010610696859657764, 0.0086249895393848419, 0.0090231141075491905, 0.0088960984721779823, 0.0070271980948746204, 0.00661104591563344, 0.0068680774420499802, 0.0059472406283020973, 0.0069599687121808529, 0.0040600588545203209, 0.0094944639131426811, 0.010021367110311985, 0.0084074093028903008, 0.010792547836899757, 0.0083684418350458145, 0.013036048039793968, 0.0061146710067987442, 0.0077757807448506355, 0.0069453641772270203, 0.0058149686083197594, 0.0046323877759277821, 0.0093243792653083801, 0.0052791307680308819, 0.012474187649786472, 0.012655522674322128, 0.0097464527934789658, 0.0074297874234616756, 0.0046413009986281395, 0.0065132207237184048, 0.0085568763315677643, 0.015311466529965401, 0.0059532085433602333, 0.013134604319930077, 0.010183030739426613, 0.0087910257279872894, 0.010961066000163555, 0.0059094768948853016, 0.021537002176046371, 0.0057131093926727772, 0.010200296528637409, } };
const TfArray<48, int> quant99_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant99 = { (TfLiteFloatArray*)&quant99_scale, (TfLiteIntArray*)&quant99_zero, 3 };
const ALIGN(8) int32_t tensor_data100[8] = { 3079, -5449, -14437, 2754, -9274, -10008, -8988, -7017, };
const TfArray<1, int> tensor_dimension100 = { 1, { 8 } };
const TfArray<8, float> quant100_scale = { 8, { 7.3244213126599789e-05, 6.6349319240543991e-05, 7.8776050941087306e-05, 6.5498177718836814e-05, 6.6691005486063659e-05, 8.7257889390457422e-05, 3.7134315789444372e-05, 4.2846710130106658e-05, } };
const TfArray<8, int> quant100_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant100 = { (TfLiteFloatArray*)&quant100_scale, (TfLiteIntArray*)&quant100_zero, 0 };
const ALIGN(8) int8_t tensor_data101[1*3*3*48] = {
  /* [0][0][][] */ 40,111,-66,-68,34,22,33,75,-19,52,81,24,-57,10,-75,-127,-112,20,-81,74,17,-46,-88,-7,-12,62,-127,21,97,-61,-29,113,74,-10,77,-127,21,21,127,-125,-19,-6,26,-23,127,-6,-15,-51, 28,34,-29,-31,65,47,-85,58,127,-41,101,127,89,19,127,-43,-7,-14,-114,12,-127,13,-27,72,-52,101,23,31,127,-39,-44,-127,72,-63,-22,-90,49,77,-113,127,127,127,127,-101,-11,-110,-2,92, 39,91,-41,-58,38,13,33,63,-38,43,66,6,-91,7,-25,-91,127,27,-66,52,41,-50,-72,-16,4,12,101,22,28,-97,-18,121,76,-5,60,0,48,-67,64,17,-54,-10,-36,-105,123,-3,-5,-127,
  /* [0][1][][] */ 60,50,-127,51,-26,36,27,-90,33,102,64,-23,125,127,-40,28,-65,42,25,-48,31,0,38,103,40,-45,69,22,0,-100,-1,11,-34,-21,66,-76,127,5,-24,-33,-62,9,26,-34,38,1,14,-39, -127,-127,-48,127,-127,-118,-95,127,101,27,-127,12,4,-30,80,67,-22,127,-127,127,36,127,127,98,127,127,-20,-127,-15,-17,-22,-98,-127,127,-127,-14,-5,127,-57,-42,-62,-12,119,91,-115,-3,1,83, 45,25,-125,19,-34,21,25,-67,0,60,4,-10,59,67,7,43,38,0,-12,-38,-8,15,10,78,-41,-29,-37,9,-3,-127,8,-13,-43,-76,29,-54,114,39,97,49,-51,-39,-42,-127,8,4,-12,-9,
  /* [0][2][][] */ 43,66,-59,60,21,-127,47,28,11,-127,-16,-49,1,9,-17,59,-47,-86,-25,-70,113,-23,34,-77,-56,-38,91,30,36,-89,32,9,-26,89,63,32,-5,-6,25,-86,7,-97,22,22,124,1,-127,-26, -45,15,-70,46,-36,-24,127,44,23,-94,-12,-10,-127,54,16,-16,45,-48,-65,-74,4,34,46,127,-88,26,-12,-17,-11,-80,127,-49,31,76,-72,25,62,-3,68,62,-68,-119,-78,12,56,127,103,64, 42,68,-41,27,17,-118,36,-46,7,-91,-10,-58,8,3,-5,44,45,-57,-18,-65,95,-24,46,-78,-11,-67,-78,30,16,-99,18,29,-42,-70,75,53,8,-26,-25,-3,-6,-74,36,-39,111,11,31,-35,
};
const TfArray<4, int> tensor_dimension101 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant101_scale = { 48, { 0.0083528179675340652, 0.0051712552085518837, 0.0048126885667443275, 0.0062085320241749287, 0.0081233540549874306, 0.003655226668342948, 0.0074840565212070942, 0.0095205912366509438, 0.007394447922706604, 0.0061653624288737774, 0.0096966689452528954, 0.0090972445905208588, 0.0065796929411590099, 0.0074400301091372967, 0.0092265158891677856, 0.0096235228702425957, 0.0085859214887022972, 0.014137577265501022, 0.003147707786411047, 0.0082494784146547318, 0.0068060625344514847, 0.010490252636373043, 0.0071953525766730309, 0.005304303951561451, 0.0089340563863515854, 0.0085697276517748833, 0.010843665339052677, 0.012509094551205635, 0.011238791048526764, 0.0035656711552292109, 0.0063729989342391491, 0.0083930725231766701, 0.0080366553738713264, 0.009077032096683979, 0.0090051442384719849, 0.0070994221605360508, 0.0071258074603974819, 0.0078184138983488083, 0.0085357651114463806, 0.0084546953439712524, 0.009615875780582428, 0.0057142283767461777, 0.0082656648010015488, 0.0060357106849551201, 0.0054246452637016773, 0.010194741189479828, 0.016726057976484299, 0.011202114634215832, } };
const TfArray<48, int> quant101_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant101 = { (TfLiteFloatArray*)&quant101_scale, (TfLiteIntArray*)&quant101_zero, 3 };
const ALIGN(8) int32_t tensor_data102[8] = { 9366, -3350, -11188, 12155, 5345, -1571, 19084, -13677, };
const TfArray<1, int> tensor_dimension102 = { 1, { 8 } };
const TfArray<8, float> quant102_scale = { 8, { 0.00011256780999246985, 6.6033207986038178e-05, 0.00014946440933272243, 7.6836637163069099e-05, 7.9511206422466785e-05, 0.0001137517174356617, 7.7868884545750916e-05, 7.1546724939253181e-05, } };
const TfArray<8, int> quant102_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant102 = { (TfLiteFloatArray*)&quant102_scale, (TfLiteIntArray*)&quant102_zero, 0 };
const ALIGN(8) int8_t tensor_data103[1*3*3*48] = {
  /* [0][0][][] */ 125,127,-67,127,71,83,95,127,26,84,-110,56,-82,116,97,110,86,104,54,-76,-52,-49,-99,93,33,101,-127,-71,127,83,-127,95,127,122,99,89,82,98,80,56,-56,-73,-100,124,-68,80,-101,125, 127,112,-65,121,70,94,90,124,-13,87,-127,64,-127,112,127,114,79,127,63,-122,-76,-40,-112,121,41,118,-98,-82,119,84,-112,127,125,127,115,127,78,113,86,53,-58,-120,-104,127,-106,74,-127,119, 56,40,9,27,24,32,11,46,37,26,-48,26,-53,33,72,63,51,27,18,5,18,-13,11,40,21,45,-24,-9,16,18,-18,45,51,43,30,46,19,35,-5,-3,5,-127,-27,6,-26,36,-16,36,
  /* [0][1][][] */ -12,99,-104,74,117,-76,126,111,127,117,-68,112,-25,127,-84,114,111,79,108,-127,-24,-66,-127,98,109,106,-87,-98,44,123,45,93,90,93,113,73,126,119,121,121,-119,-117,-102,73,-127,127,-101,117, -12,103,-127,66,127,-70,127,116,123,127,-75,127,-48,125,-120,127,104,78,127,-123,-59,-59,-104,127,127,127,-112,-127,16,127,55,108,75,93,127,92,127,127,127,127,-127,-90,-127,68,-119,116,-80,127, 37,31,-83,36,41,-71,20,25,58,31,-68,28,-9,26,-22,65,46,23,39,-45,-28,-64,-29,44,47,47,-34,-26,9,-1,44,33,71,38,17,4,57,27,12,17,-69,95,-26,1,-65,32,-53,14,
  /* [0][2][][] */ -26,40,-48,-69,52,-127,52,45,97,66,32,61,-47,36,-7,44,123,68,65,-77,118,-127,-103,11,88,87,-38,-35,-5,51,125,-7,58,32,26,54,-90,26,19,41,-45,-44,-22,90,-83,84,-35,13, -23,17,-36,-104,51,-87,43,19,96,78,73,62,-57,35,-6,49,127,51,63,-54,127,-50,-91,3,107,126,6,-73,-8,42,126,-4,42,30,24,51,-68,32,31,46,-79,-37,-26,86,-112,73,-22,0, -13,57,-59,-2,28,12,27,16,45,22,38,31,-49,11,-1,23,56,21,38,-18,37,-56,7,6,46,32,-60,-9,-11,1,72,-24,53,17,10,-19,18,2,14,-35,-26,-94,5,79,-28,32,7,16,
};
const TfArray<4, int> tensor_dimension103 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant103_scale = { 48, { 0.0042090108618140221, 0.0020564387086778879, 0.0025378505233675241, 0.0036065513268113136, 0.0031947577372193336, 0.0040226816199719906, 0.0062902034260332584, 0.0029565852601081133, 0.0053758220747113228, 0.0034671206958591938, 0.0030364508274942636, 0.0030214556027203798, 0.0059416634030640125, 0.0028431520331650972, 0.0053442986682057381, 0.0032077643554657698, 0.0022341129370033741, 0.004555962048470974, 0.0059150769375264645, 0.0027365440037101507, 0.0055509824305772781, 0.003655559616163373, 0.0046844566240906715, 0.004759080708026886, 0.0045568891800940037, 0.0023843937087804079, 0.0025765325408428907, 0.0027487550396472216, 0.0043952809646725655, 0.0074205971322953701, 0.0059010908007621765, 0.0061485408805310726, 0.0025042598135769367, 0.0031451995018869638, 0.0033396687358617783, 0.015578489750623703, 0.0039422758854925632, 0.0035503674298524857, 0.0029920446686446667, 0.0071656596846878529, 0.0026464185211807489, 0.0028588487766683102, 0.0033229305408895016, 0.0047919121570885181, 0.0025392752140760422, 0.0031517434399574995, 0.0032428812701255083, 0.0044585149735212326, } };
const TfArray<48, int> quant103_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant103 = { (TfLiteFloatArray*)&quant103_scale, (TfLiteIntArray*)&quant103_zero, 3 };
const ALIGN(8) int32_t tensor_data104[8] = { -6013, -11921, 2846, 3675, -12097, -10876, -7747, -12170, };
const TfArray<1, int> tensor_dimension104 = { 1, { 8 } };
const TfArray<8, float> quant104_scale = { 8, { 8.8112115918193012e-05, 0.00012722585233859718, 0.00011748341785278171, 0.00010541192023083568, 9.3803908384870738e-05, 0.00013850948016624898, 0.00014499964891001582, 7.5172603828832507e-05, } };
const TfArray<8, int> quant104_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant104 = { (TfLiteFloatArray*)&quant104_scale, (TfLiteIntArray*)&quant104_zero, 0 };
const ALIGN(8) int8_t tensor_data105[1*3*3*48] = {
  /* [0][0][][] */ 33,-45,-52,-29,-64,28,-81,7,-32,52,127,-4,-9,6,-20,49,35,-56,6,115,-44,-15,39,-3,-59,116,-12,-40,-39,-79,-1,-29,40,-29,-90,-43,20,-66,119,-27,-41,87,-30,-9,-37,86,3,-18, 104,-127,127,8,-68,-15,-73,-99,-96,45,54,-25,-39,17,-41,86,102,-78,41,87,12,-47,-71,127,-5,9,-31,7,11,-36,-127,-113,94,-50,5,12,46,-26,19,90,-14,115,-63,-127,-56,-22,51,127, 17,-25,-15,-61,-86,-35,-61,6,-28,37,77,0,-8,9,-4,42,16,-62,8,118,21,-7,38,15,62,127,-12,32,32,-51,26,-12,12,-23,57,-47,16,-65,127,1,-34,54,-44,-2,-33,46,-9,-35,
  /* [0][1][][] */ 21,-17,70,-44,-127,46,-65,-34,20,90,43,-127,-51,-44,-39,90,125,-127,39,-127,-71,-44,-97,-101,-127,27,-53,-127,-91,-60,39,127,-55,-58,-127,-54,16,-75,9,44,-9,28,-62,11,-71,109,70,76, -127,47,-97,127,-101,92,-13,-127,127,-105,-3,-2,127,127,127,-92,120,7,43,119,-17,127,127,7,-1,16,127,33,-28,117,91,-58,127,127,42,127,11,127,-12,127,127,-45,127,25,127,-127,-127,2, 44,-34,59,-23,-95,-127,-98,-31,-6,127,36,-112,-61,-33,-57,127,127,-112,32,-124,82,-49,-117,-96,127,11,-59,108,127,-76,25,116,-42,-65,120,-57,13,-93,14,25,-25,79,-79,10,-79,83,73,112,
  /* [0][2][][] */ 30,-57,-75,24,-23,16,127,38,-1,76,114,1,-40,-8,-25,102,42,-15,-29,-104,-127,-34,24,1,-79,53,-40,-55,-55,-127,-12,42,-68,-27,-51,-12,7,-41,72,11,-2,54,-54,6,-15,81,21,53, 78,-116,8,-74,39,40,112,-53,70,112,47,20,-66,-25,-30,66,-9,-94,-127,-23,56,2,-25,106,45,20,-30,34,15,-43,-111,-27,-124,-39,15,-17,17,33,-69,105,-42,127,71,92,-12,-8,48,117, 2,-51,-61,6,-57,-30,123,31,-4,73,71,0,-43,-13,-12,104,44,-29,-18,-53,84,-33,17,-16,44,64,-37,31,50,-93,1,45,-46,-29,48,-14,-127,-37,70,20,8,56,-64,-9,-11,41,11,15,
};
const TfArray<4, int> tensor_dimension105 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant105_scale = { 48, { 0.0086789978668093681, 0.0049410671927034855, 0.012120031751692295, 0.023659704253077507, 0.010600889101624489, 0.0083170495927333832, 0.0054301787167787552, 0.0053070276044309139, 0.0080026024952530861, 0.0034005311317741871, 0.0040140370838344097, 0.0082824593409895897, 0.018853370100259781, 0.014763268642127514, 0.010806085541844368, 0.0044699306599795818, 0.0030347276479005814, 0.009687383659183979, 0.0082199880853295326, 0.0061030457727611065, 0.006369628943502903, 0.013313282281160355, 0.012050953693687916, 0.006610487587749958, 0.0074696773663163185, 0.0061123962514102459, 0.015894686803221703, 0.0091568557545542717, 0.0087188864126801491, 0.0062741395086050034, 0.0094003835693001747, 0.0073700672946870327, 0.0052498565055429935, 0.012547580525279045, 0.0056959199719130993, 0.018406502902507782, 0.011302289552986622, 0.011799046769738197, 0.0063401786610484123, 0.0038541865069419146, 0.012046159245073795, 0.0038495885673910379, 0.011364199221134186, 0.013995859771966934, 0.019197419285774231, 0.0080059003084897995, 0.012501395307481289, 0.0026614621747285128, } };
const TfArray<48, int> quant105_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant105 = { (TfLiteFloatArray*)&quant105_scale, (TfLiteIntArray*)&quant105_zero, 3 };
const ALIGN(8) int32_t tensor_data106[8] = { -15367, -9162, 12321, -5204, -21209, 2694, 12790, 10374, };
const TfArray<1, int> tensor_dimension106 = { 1, { 8 } };
const TfArray<8, float> quant106_scale = { 8, { 5.1938019169028848e-05, 6.2695988162886351e-05, 9.1622678155545145e-05, 7.1484166255686432e-05, 4.8563342716079205e-05, 6.5085368987638503e-05, 8.0845558841247112e-05, 4.1448780393693596e-05, } };
const TfArray<8, int> quant106_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant106 = { (TfLiteFloatArray*)&quant106_scale, (TfLiteIntArray*)&quant106_zero, 0 };
const ALIGN(8) int8_t tensor_data107[1*3*3*48] = {
  /* [0][0][][] */ 78,11,-24,69,-18,9,-8,-21,9,12,49,-61,64,-71,20,-16,32,15,127,14,40,53,-24,-115,41,-54,-43,-52,-99,26,0,-5,41,-39,11,-7,26,122,29,52,-69,-24,92,-90,-100,-127,-47,37, 65,73,-45,-1,0,-127,-33,54,127,5,31,5,-72,-83,95,-127,127,71,-92,3,127,127,-127,95,8,-75,-127,-102,-127,14,-77,101,66,-127,-43,127,127,35,63,127,53,15,104,-127,65,-16,19,-57, 111,-14,31,83,-20,-11,-17,-27,-1,18,-52,-54,76,-59,0,-10,33,13,124,21,37,22,-18,33,6,-60,22,-52,-92,-15,-2,-1,43,-36,-1,-4,25,127,28,36,-74,-44,82,-78,-127,84,-28,-59,
  /* [0][1][][] */ 56,-32,-127,39,-22,4,-45,113,102,49,95,43,119,-90,47,-80,76,-16,79,13,28,38,-83,-19,127,-87,-71,-15,-76,-20,25,86,61,-103,-60,11,4,73,91,-20,-62,8,-18,-60,-31,-102,65,64, 53,126,87,-32,127,-29,127,21,73,127,13,-85,-23,-45,94,-106,20,-10,-94,-127,-41,79,80,23,-6,-14,59,127,-41,127,127,87,-34,-55,111,12,-9,-107,127,-59,127,33,71,-62,85,7,127,67, 59,-90,31,59,-27,-1,-51,127,103,41,-127,57,127,-93,32,-79,57,-22,88,19,22,48,-80,111,100,-89,-76,-14,-57,-66,25,127,65,-105,-23,27,10,70,64,-49,-59,8,34,-24,-57,89,84,-127,
  /* [0][2][][] */ 114,-20,-34,127,-11,23,-17,70,54,-15,40,-29,27,-127,-29,-44,-19,46,95,44,16,5,55,-127,55,-32,21,-4,-27,-24,-18,32,10,-49,-58,-108,9,93,-3,-45,-13,-125,-127,-77,97,-81,40,17, 11,-127,65,13,-26,51,-48,48,107,78,32,-127,-24,-96,-127,-6,-57,127,-72,-94,28,26,-41,54,75,-127,50,39,-72,-58,-71,-12,127,-44,127,6,99,120,57,-30,28,-84,-102,-79,1,25,34,77, 127,-26,-4,101,-5,26,-16,62,41,-5,-70,-29,-27,-113,-14,-13,-6,52,81,50,24,11,54,28,38,-30,-14,-3,-28,-46,-38,32,-8,-50,-7,-61,12,85,-6,-50,-6,-127,-71,-37,92,84,60,-80,
};
const TfArray<4, int> tensor_dimension107 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant107_scale = { 48, { 0.0051245051436126232, 0.0074583739042282104, 0.0087612941861152649, 0.0085342573001980782, 0.017281444743275642, 0.0090024434030056, 0.013526532799005508, 0.0054467581212520599, 0.0040701674297451973, 0.0083010811358690262, 0.0074288086034357548, 0.00823206827044487, 0.0075537571683526039, 0.0047294232062995434, 0.0060020671226084232, 0.0054865670390427113, 0.0071740704588592052, 0.008811265230178833, 0.010997884906828403, 0.0097032971680164337, 0.0097305970266461372, 0.0080957980826497078, 0.0088488152250647545, 0.006779741495847702, 0.0049883569590747356, 0.0087582031264901161, 0.010735823772847652, 0.0104701928794384, 0.005676737055182457, 0.012868057005107403, 0.0097900871187448502, 0.0063022002577781677, 0.011008209548890591, 0.0039275661110877991, 0.010260204784572124, 0.0097481394186615944, 0.0070897229015827179, 0.0038049810100346804, 0.0057366024702787399, 0.0062931077554821968, 0.012255345471203327, 0.0058276276104152203, 0.0052428939379751682, 0.0049618477933108807, 0.0064994227141141891, 0.005223528016358614, 0.0056622042320668697, 0.0066107106395065784, } };
const TfArray<48, int> quant107_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant107 = { (TfLiteFloatArray*)&quant107_scale, (TfLiteIntArray*)&quant107_zero, 3 };
const ALIGN(8) int32_t tensor_data108[8] = { -3089, -4023, 33797, -4184, 30908, -8872, -1435, 24504, };
const TfArray<1, int> tensor_dimension108 = { 1, { 8 } };
const TfArray<8, float> quant108_scale = { 8, { 3.2499203371116892e-05, 3.1413204851560295e-05, 2.4401753762504086e-05, 2.7145024432684295e-05, 3.7697274819947779e-05, 2.39584860537434e-05, 2.1042464140919037e-05, 2.6454426915734075e-05, } };
const TfArray<8, int> quant108_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant108 = { (TfLiteFloatArray*)&quant108_scale, (TfLiteIntArray*)&quant108_zero, 0 };
const ALIGN(8) int8_t tensor_data109[1*3*3*48] = {
  /* [0][0][][] */ 41,-8,-20,39,7,-89,21,-84,-114,0,-122,3,-35,0,-6,-3,13,10,22,-5,-13,-17,2,-111,16,13,-3,6,18,-8,15,15,9,15,9,39,-8,-13,3,-45,-16,-55,53,23,-5,19,9,6, 22,6,21,127,7,-127,39,-17,-127,2,-86,39,-51,51,-33,35,124,-8,38,-2,-41,-58,-36,-127,85,-62,-1,31,87,3,53,68,-20,-48,31,127,-7,-20,8,-8,-38,-88,108,62,-6,65,70,-3, 41,-6,-18,42,6,-82,23,-69,-107,1,-126,1,-12,0,-5,-4,12,0,27,-6,-12,-17,0,-109,11,15,1,7,22,-4,16,10,3,13,8,34,-6,-15,2,38,-15,-39,58,28,-17,22,20,6,
  /* [0][1][][] */ 25,-12,8,12,21,-102,36,-118,-44,-2,-87,21,-79,1,-49,17,2,-23,18,-6,-15,-111,94,-77,2,127,24,9,56,3,36,-1,32,11,25,-1,-3,25,-2,-127,-1,-81,32,64,19,26,24,14, 127,-127,127,-100,127,60,127,-75,-86,127,-55,127,-89,-127,-127,127,127,-127,127,-127,-112,-127,127,-126,127,-123,127,127,127,127,127,-127,127,-127,127,42,127,127,-127,10,127,-127,127,127,127,127,127,-32, 23,-8,3,18,18,-84,39,-127,-42,-3,-87,22,-55,7,-49,18,1,-44,18,-6,-15,-105,93,-71,-4,110,30,7,52,2,24,2,29,12,22,-11,-5,22,3,117,-1,-65,39,84,-20,29,47,21,
  /* [0][2][][] */ 8,-17,-3,-5,20,-96,25,-50,-57,0,-88,-6,-59,26,-19,-2,-3,-6,3,-3,26,-90,52,-87,-11,33,-1,10,-13,-5,16,18,12,14,0,-33,-9,4,0,-23,11,0,10,23,3,24,-10,27, -2,-22,82,-41,34,-109,104,10,-109,5,-127,-68,-127,127,-55,15,-10,-79,19,-11,127,-97,116,-81,-53,-56,55,23,54,5,10,-56,30,51,33,-106,-2,38,-13,-4,124,53,1,73,41,73,5,127, 10,-20,-3,-8,21,-80,25,-44,-51,1,-85,-4,-54,26,-19,-1,2,-5,-1,-3,28,-72,56,-82,-9,28,3,9,-6,-6,13,17,7,11,-1,-27,-10,-2,-1,18,13,13,4,19,-2,30,0,31,
};
const TfArray<4, int> tensor_dimension109 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant109_scale = { 48, { 0.0058264839462935925, 0.007971959188580513, 0.0055093886330723763, 0.0085321515798568726, 0.010927244089543819, 0.002933732233941555, 0.0046161157079041004, 0.0027505990583449602, 0.0027731670998036861, 0.017027849331498146, 0.0026816125027835369, 0.00762568274512887, 0.0033716084435582161, 0.012595676816999912, 0.0063722296617925167, 0.0077942563220858574, 0.0058417432010173798, 0.0039794282056391239, 0.0064146053045988083, 0.020451882854104042, 0.012340093031525612, 0.00299216085113585, 0.0034170907456427813, 0.0025885454379022121, 0.0072330161929130554, 0.0084365876391530037, 0.0063713104464113712, 0.010662773624062538, 0.00439043203368783, 0.00758393295109272, 0.0051155174151062965, 0.0065423552878201008, 0.0062529528513550758, 0.0077284094877541065, 0.0063419057987630367, 0.0077057634480297565, 0.010804989375174046, 0.0098908552899956703, 0.014847858808934689, 0.0061144391074776649, 0.0066118915565311909, 0.0034266365692019463, 0.0047576092183589935, 0.0035795599687844515, 0.0072967298328876495, 0.0095805628225207329, 0.0048092254437506199, 0.0059050880372524261, } };
const TfArray<48, int> quant109_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant109 = { (TfLiteFloatArray*)&quant109_scale, (TfLiteIntArray*)&quant109_zero, 3 };
const ALIGN(8) int32_t tensor_data110[16] = { -11720, -9803, -6244, -39405, 24318, -19795, -15047, -31179, -2352, -40615, 7149, 17653, -38823, -128, 11989, 11199, };
const TfArray<1, int> tensor_dimension110 = { 1, { 16 } };
const TfArray<16, float> quant110_scale = { 16, { 0.00014095565711613744, 0.00013286624744068831, 0.00014957757957745343, 0.00020503057749010623, 0.0001288390631088987, 0.00012604257790371776, 9.6132651378866285e-05, 0.00013038486940786242, 0.000145893674925901, 0.00010828769154613838, 0.00011577611439861357, 9.5757917733862996e-05, 0.00012305162090342492, 0.00014332203136291355, 0.00016984101966954768, 0.00010225281585007906, } };
const TfArray<16, int> quant110_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant110 = { (TfLiteFloatArray*)&quant110_scale, (TfLiteIntArray*)&quant110_zero, 0 };
const TfArray<4, int> tensor_dimension111 = { 4, { 1,33,33,1 } };
const TfArray<1, float> quant111_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant111_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant111 = { (TfLiteFloatArray*)&quant111_scale, (TfLiteIntArray*)&quant111_zero, 0 };
const TfArray<4, int> tensor_dimension112 = { 4, { 1,16,16,8 } };
const TfArray<1, float> quant112_scale = { 1, { 0.022900057956576347, } };
const TfArray<1, int> quant112_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant112 = { (TfLiteFloatArray*)&quant112_scale, (TfLiteIntArray*)&quant112_zero, 0 };
const TfArray<4, int> tensor_dimension113 = { 4, { 1,16,16,8 } };
const TfArray<1, float> quant113_scale = { 1, { 0.014644226059317589, } };
const TfArray<1, int> quant113_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant113 = { (TfLiteFloatArray*)&quant113_scale, (TfLiteIntArray*)&quant113_zero, 0 };
const TfArray<4, int> tensor_dimension114 = { 4, { 1,16,16,8 } };
const TfArray<1, float> quant114_scale = { 1, { 0.02953735738992691, } };
const TfArray<1, int> quant114_zero = { 1, { 21 } };
const TfLiteAffineQuantization quant114 = { (TfLiteFloatArray*)&quant114_scale, (TfLiteIntArray*)&quant114_zero, 0 };
const TfArray<4, int> tensor_dimension115 = { 4, { 1,16,16,8 } };
const TfArray<1, float> quant115_scale = { 1, { 0.044505175203084946, } };
const TfArray<1, int> quant115_zero = { 1, { -29 } };
const TfLiteAffineQuantization quant115 = { (TfLiteFloatArray*)&quant115_scale, (TfLiteIntArray*)&quant115_zero, 0 };
const TfArray<4, int> tensor_dimension116 = { 4, { 1,16,16,48 } };
const TfArray<1, float> quant116_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant116_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant116 = { (TfLiteFloatArray*)&quant116_scale, (TfLiteIntArray*)&quant116_zero, 0 };
const TfArray<4, int> tensor_dimension117 = { 4, { 1,17,17,48 } };
const TfArray<1, float> quant117_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant117_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant117 = { (TfLiteFloatArray*)&quant117_scale, (TfLiteIntArray*)&quant117_zero, 0 };
const TfArray<4, int> tensor_dimension118 = { 4, { 1,8,8,48 } };
const TfArray<1, float> quant118_scale = { 1, { 0.022075612097978592, } };
const TfArray<1, int> quant118_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant118 = { (TfLiteFloatArray*)&quant118_scale, (TfLiteIntArray*)&quant118_zero, 0 };
const TfArray<4, int> tensor_dimension119 = { 4, { 1,8,8,8 } };
const TfArray<1, float> quant119_scale = { 1, { 0.031697455793619156, } };
const TfArray<1, int> quant119_zero = { 1, { 9 } };
const TfLiteAffineQuantization quant119 = { (TfLiteFloatArray*)&quant119_scale, (TfLiteIntArray*)&quant119_zero, 0 };
const TfArray<4, int> tensor_dimension120 = { 4, { 1,8,8,48 } };
const TfArray<1, float> quant120_scale = { 1, { 0.016767473891377449, } };
const TfArray<1, int> quant120_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant120 = { (TfLiteFloatArray*)&quant120_scale, (TfLiteIntArray*)&quant120_zero, 0 };
const TfArray<4, int> tensor_dimension121 = { 4, { 1,8,8,48 } };
const TfArray<1, float> quant121_scale = { 1, { 0.015340306796133518, } };
const TfArray<1, int> quant121_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant121 = { (TfLiteFloatArray*)&quant121_scale, (TfLiteIntArray*)&quant121_zero, 0 };
const TfArray<4, int> tensor_dimension122 = { 4, { 1,8,8,8 } };
const TfArray<1, float> quant122_scale = { 1, { 0.040329519659280777, } };
const TfArray<1, int> quant122_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant122 = { (TfLiteFloatArray*)&quant122_scale, (TfLiteIntArray*)&quant122_zero, 0 };
const TfArray<4, int> tensor_dimension123 = { 4, { 1,8,8,8 } };
const TfArray<1, float> quant123_scale = { 1, { 0.043798878788948059, } };
const TfArray<1, int> quant123_zero = { 1, { -3 } };
const TfLiteAffineQuantization quant123 = { (TfLiteFloatArray*)&quant123_scale, (TfLiteIntArray*)&quant123_zero, 0 };
const TfArray<4, int> tensor_dimension124 = { 4, { 1,8,8,48 } };
const TfArray<1, float> quant124_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant124_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant124 = { (TfLiteFloatArray*)&quant124_scale, (TfLiteIntArray*)&quant124_zero, 0 };
const TfArray<4, int> tensor_dimension125 = { 4, { 1,9,9,48 } };
const TfArray<1, float> quant125_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant125_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant125 = { (TfLiteFloatArray*)&quant125_scale, (TfLiteIntArray*)&quant125_zero, 0 };
const TfArray<4, int> tensor_dimension126 = { 4, { 1,4,4,48 } };
const TfArray<1, float> quant126_scale = { 1, { 0.015867143869400024, } };
const TfArray<1, int> quant126_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant126 = { (TfLiteFloatArray*)&quant126_scale, (TfLiteIntArray*)&quant126_zero, 0 };
const TfArray<4, int> tensor_dimension127 = { 4, { 1,4,4,8 } };
const TfArray<1, float> quant127_scale = { 1, { 0.030060062184929848, } };
const TfArray<1, int> quant127_zero = { 1, { 3 } };
const TfLiteAffineQuantization quant127 = { (TfLiteFloatArray*)&quant127_scale, (TfLiteIntArray*)&quant127_zero, 0 };
const TfArray<4, int> tensor_dimension128 = { 4, { 1,4,4,48 } };
const TfArray<1, float> quant128_scale = { 1, { 0.014356369152665138, } };
const TfArray<1, int> quant128_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant128 = { (TfLiteFloatArray*)&quant128_scale, (TfLiteIntArray*)&quant128_zero, 0 };
const TfArray<4, int> tensor_dimension129 = { 4, { 1,4,4,48 } };
const TfArray<1, float> quant129_scale = { 1, { 0.015054481104016304, } };
const TfArray<1, int> quant129_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant129 = { (TfLiteFloatArray*)&quant129_scale, (TfLiteIntArray*)&quant129_zero, 0 };
const TfArray<4, int> tensor_dimension130 = { 4, { 1,4,4,8 } };
const TfArray<1, float> quant130_scale = { 1, { 0.020254265516996384, } };
const TfArray<1, int> quant130_zero = { 1, { 8 } };
const TfLiteAffineQuantization quant130 = { (TfLiteFloatArray*)&quant130_scale, (TfLiteIntArray*)&quant130_zero, 0 };
const TfArray<4, int> tensor_dimension131 = { 4, { 1,4,4,8 } };
const TfArray<1, float> quant131_scale = { 1, { 0.0464802086353302, } };
const TfArray<1, int> quant131_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant131 = { (TfLiteFloatArray*)&quant131_scale, (TfLiteIntArray*)&quant131_zero, 0 };
const TfArray<4, int> tensor_dimension132 = { 4, { 1,4,4,48 } };
const TfArray<1, float> quant132_scale = { 1, { 0.016341375187039375, } };
const TfArray<1, int> quant132_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant132 = { (TfLiteFloatArray*)&quant132_scale, (TfLiteIntArray*)&quant132_zero, 0 };
const TfArray<4, int> tensor_dimension133 = { 4, { 1,4,4,48 } };
const TfArray<1, float> quant133_scale = { 1, { 0.020141627639532089, } };
const TfArray<1, int> quant133_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant133 = { (TfLiteFloatArray*)&quant133_scale, (TfLiteIntArray*)&quant133_zero, 0 };
const TfArray<4, int> tensor_dimension134 = { 4, { 1,4,4,8 } };
const TfArray<1, float> quant134_scale = { 1, { 0.046925466507673264, } };
const TfArray<1, int> quant134_zero = { 1, { 47 } };
const TfLiteAffineQuantization quant134 = { (TfLiteFloatArray*)&quant134_scale, (TfLiteIntArray*)&quant134_zero, 0 };
const TfArray<4, int> tensor_dimension135 = { 4, { 1,4,4,8 } };
const TfArray<1, float> quant135_scale = { 1, { 0.056099619716405869, } };
const TfArray<1, int> quant135_zero = { 1, { 18 } };
const TfLiteAffineQuantization quant135 = { (TfLiteFloatArray*)&quant135_scale, (TfLiteIntArray*)&quant135_zero, 0 };
const TfArray<4, int> tensor_dimension136 = { 4, { 1,4,4,48 } };
const TfArray<1, float> quant136_scale = { 1, { 0.016069315373897552, } };
const TfArray<1, int> quant136_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant136 = { (TfLiteFloatArray*)&quant136_scale, (TfLiteIntArray*)&quant136_zero, 0 };
const TfArray<4, int> tensor_dimension137 = { 4, { 1,5,5,48 } };
const TfArray<1, float> quant137_scale = { 1, { 0.016069315373897552, } };
const TfArray<1, int> quant137_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant137 = { (TfLiteFloatArray*)&quant137_scale, (TfLiteIntArray*)&quant137_zero, 0 };
const TfArray<4, int> tensor_dimension138 = { 4, { 1,2,2,48 } };
const TfArray<1, float> quant138_scale = { 1, { 0.015384969301521778, } };
const TfArray<1, int> quant138_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant138 = { (TfLiteFloatArray*)&quant138_scale, (TfLiteIntArray*)&quant138_zero, 0 };
const TfArray<4, int> tensor_dimension139 = { 4, { 1,2,2,8 } };
const TfArray<1, float> quant139_scale = { 1, { 0.037945542484521866, } };
const TfArray<1, int> quant139_zero = { 1, { 5 } };
const TfLiteAffineQuantization quant139 = { (TfLiteFloatArray*)&quant139_scale, (TfLiteIntArray*)&quant139_zero, 0 };
const TfArray<4, int> tensor_dimension140 = { 4, { 1,2,2,48 } };
const TfArray<1, float> quant140_scale = { 1, { 0.014580694027245045, } };
const TfArray<1, int> quant140_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant140 = { (TfLiteFloatArray*)&quant140_scale, (TfLiteIntArray*)&quant140_zero, 0 };
const TfArray<4, int> tensor_dimension141 = { 4, { 1,2,2,48 } };
const TfArray<1, float> quant141_scale = { 1, { 0.018097735941410065, } };
const TfArray<1, int> quant141_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant141 = { (TfLiteFloatArray*)&quant141_scale, (TfLiteIntArray*)&quant141_zero, 0 };
const TfArray<4, int> tensor_dimension142 = { 4, { 1,2,2,8 } };
const TfArray<1, float> quant142_scale = { 1, { 0.022363269701600075, } };
const TfArray<1, int> quant142_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant142 = { (TfLiteFloatArray*)&quant142_scale, (TfLiteIntArray*)&quant142_zero, 0 };
const TfArray<4, int> tensor_dimension143 = { 4, { 1,2,2,8 } };
const TfArray<1, float> quant143_scale = { 1, { 0.046033866703510284, } };
const TfArray<1, int> quant143_zero = { 1, { 8 } };
const TfLiteAffineQuantization quant143 = { (TfLiteFloatArray*)&quant143_scale, (TfLiteIntArray*)&quant143_zero, 0 };
const TfArray<4, int> tensor_dimension144 = { 4, { 1,2,2,48 } };
const TfArray<1, float> quant144_scale = { 1, { 0.01807798258960247, } };
const TfArray<1, int> quant144_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant144 = { (TfLiteFloatArray*)&quant144_scale, (TfLiteIntArray*)&quant144_zero, 0 };
const TfArray<4, int> tensor_dimension145 = { 4, { 1,2,2,48 } };
const TfArray<1, float> quant145_scale = { 1, { 0.017146008089184761, } };
const TfArray<1, int> quant145_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant145 = { (TfLiteFloatArray*)&quant145_scale, (TfLiteIntArray*)&quant145_zero, 0 };
const TfArray<4, int> tensor_dimension146 = { 4, { 1,2,2,8 } };
const TfArray<1, float> quant146_scale = { 1, { 0.022863544523715973, } };
const TfArray<1, int> quant146_zero = { 1, { -4 } };
const TfLiteAffineQuantization quant146 = { (TfLiteFloatArray*)&quant146_scale, (TfLiteIntArray*)&quant146_zero, 0 };
const TfArray<4, int> tensor_dimension147 = { 4, { 1,2,2,8 } };
const TfArray<1, float> quant147_scale = { 1, { 0.051738079637289047, } };
const TfArray<1, int> quant147_zero = { 1, { 21 } };
const TfLiteAffineQuantization quant147 = { (TfLiteFloatArray*)&quant147_scale, (TfLiteIntArray*)&quant147_zero, 0 };
const TfArray<4, int> tensor_dimension148 = { 4, { 1,2,2,48 } };
const TfArray<1, float> quant148_scale = { 1, { 0.013124235905706882, } };
const TfArray<1, int> quant148_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant148 = { (TfLiteFloatArray*)&quant148_scale, (TfLiteIntArray*)&quant148_zero, 0 };
const TfArray<4, int> tensor_dimension149 = { 4, { 1,2,2,48 } };
const TfArray<1, float> quant149_scale = { 1, { 0.014921825379133224, } };
const TfArray<1, int> quant149_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant149 = { (TfLiteFloatArray*)&quant149_scale, (TfLiteIntArray*)&quant149_zero, 0 };
const TfArray<4, int> tensor_dimension150 = { 4, { 1,2,2,8 } };
const TfArray<1, float> quant150_scale = { 1, { 0.016775993630290031, } };
const TfArray<1, int> quant150_zero = { 1, { 16 } };
const TfLiteAffineQuantization quant150 = { (TfLiteFloatArray*)&quant150_scale, (TfLiteIntArray*)&quant150_zero, 0 };
const TfArray<4, int> tensor_dimension151 = { 4, { 1,2,2,8 } };
const TfArray<1, float> quant151_scale = { 1, { 0.052665248513221741, } };
const TfArray<1, int> quant151_zero = { 1, { 14 } };
const TfLiteAffineQuantization quant151 = { (TfLiteFloatArray*)&quant151_scale, (TfLiteIntArray*)&quant151_zero, 0 };
const TfArray<4, int> tensor_dimension152 = { 4, { 1,2,2,48 } };
const TfArray<1, float> quant152_scale = { 1, { 0.016579044982790947, } };
const TfArray<1, int> quant152_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant152 = { (TfLiteFloatArray*)&quant152_scale, (TfLiteIntArray*)&quant152_zero, 0 };
const TfArray<4, int> tensor_dimension153 = { 4, { 1,2,2,48 } };
const TfArray<1, float> quant153_scale = { 1, { 0.016928935423493385, } };
const TfArray<1, int> quant153_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant153 = { (TfLiteFloatArray*)&quant153_scale, (TfLiteIntArray*)&quant153_zero, 0 };
const TfArray<4, int> tensor_dimension154 = { 4, { 1,2,2,8 } };
const TfArray<1, float> quant154_scale = { 1, { 0.026772566139698029, } };
const TfArray<1, int> quant154_zero = { 1, { -37 } };
const TfLiteAffineQuantization quant154 = { (TfLiteFloatArray*)&quant154_scale, (TfLiteIntArray*)&quant154_zero, 0 };
const TfArray<4, int> tensor_dimension155 = { 4, { 1,2,2,8 } };
const TfArray<1, float> quant155_scale = { 1, { 0.06126779317855835, } };
const TfArray<1, int> quant155_zero = { 1, { 7 } };
const TfLiteAffineQuantization quant155 = { (TfLiteFloatArray*)&quant155_scale, (TfLiteIntArray*)&quant155_zero, 0 };
const TfArray<4, int> tensor_dimension156 = { 4, { 1,2,2,48 } };
const TfArray<1, float> quant156_scale = { 1, { 0.020623229444026947, } };
const TfArray<1, int> quant156_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant156 = { (TfLiteFloatArray*)&quant156_scale, (TfLiteIntArray*)&quant156_zero, 0 };
const TfArray<4, int> tensor_dimension157 = { 4, { 1,2,2,48 } };
const TfArray<1, float> quant157_scale = { 1, { 0.017404627054929733, } };
const TfArray<1, int> quant157_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant157 = { (TfLiteFloatArray*)&quant157_scale, (TfLiteIntArray*)&quant157_zero, 0 };
const TfArray<4, int> tensor_dimension158 = { 4, { 1,2,2,8 } };
const TfArray<1, float> quant158_scale = { 1, { 0.017302446067333221, } };
const TfArray<1, int> quant158_zero = { 1, { 15 } };
const TfLiteAffineQuantization quant158 = { (TfLiteFloatArray*)&quant158_scale, (TfLiteIntArray*)&quant158_zero, 0 };
const TfArray<4, int> tensor_dimension159 = { 4, { 1,2,2,8 } };
const TfArray<1, float> quant159_scale = { 1, { 0.065192423760890961, } };
const TfArray<1, int> quant159_zero = { 1, { 12 } };
const TfLiteAffineQuantization quant159 = { (TfLiteFloatArray*)&quant159_scale, (TfLiteIntArray*)&quant159_zero, 0 };
const TfArray<4, int> tensor_dimension160 = { 4, { 1,2,2,48 } };
const TfArray<1, float> quant160_scale = { 1, { 0.017771705985069275, } };
const TfArray<1, int> quant160_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant160 = { (TfLiteFloatArray*)&quant160_scale, (TfLiteIntArray*)&quant160_zero, 0 };
const TfArray<4, int> tensor_dimension161 = { 4, { 1,2,2,48 } };
const TfArray<1, float> quant161_scale = { 1, { 0.018946129828691483, } };
const TfArray<1, int> quant161_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant161 = { (TfLiteFloatArray*)&quant161_scale, (TfLiteIntArray*)&quant161_zero, 0 };
const TfArray<4, int> tensor_dimension162 = { 4, { 1,2,2,8 } };
const TfArray<1, float> quant162_scale = { 1, { 0.02547285333275795, } };
const TfArray<1, int> quant162_zero = { 1, { 2 } };
const TfLiteAffineQuantization quant162 = { (TfLiteFloatArray*)&quant162_scale, (TfLiteIntArray*)&quant162_zero, 0 };
const TfArray<4, int> tensor_dimension163 = { 4, { 1,2,2,8 } };
const TfArray<1, float> quant163_scale = { 1, { 0.080767542123794556, } };
const TfArray<1, int> quant163_zero = { 1, { 5 } };
const TfLiteAffineQuantization quant163 = { (TfLiteFloatArray*)&quant163_scale, (TfLiteIntArray*)&quant163_zero, 0 };
const TfArray<4, int> tensor_dimension164 = { 4, { 1,2,2,48 } };
const TfArray<1, float> quant164_scale = { 1, { 0.016609849408268929, } };
const TfArray<1, int> quant164_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant164 = { (TfLiteFloatArray*)&quant164_scale, (TfLiteIntArray*)&quant164_zero, 0 };
const TfArray<4, int> tensor_dimension165 = { 4, { 1,3,3,48 } };
const TfArray<1, float> quant165_scale = { 1, { 0.016609849408268929, } };
const TfArray<1, int> quant165_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant165 = { (TfLiteFloatArray*)&quant165_scale, (TfLiteIntArray*)&quant165_zero, 0 };
const TfArray<4, int> tensor_dimension166 = { 4, { 1,1,1,48 } };
const TfArray<1, float> quant166_scale = { 1, { 0.020070288330316544, } };
const TfArray<1, int> quant166_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant166 = { (TfLiteFloatArray*)&quant166_scale, (TfLiteIntArray*)&quant166_zero, 0 };
const TfArray<4, int> tensor_dimension167 = { 4, { 1,1,1,8 } };
const TfArray<1, float> quant167_scale = { 1, { 0.032627470791339874, } };
const TfArray<1, int> quant167_zero = { 1, { 18 } };
const TfLiteAffineQuantization quant167 = { (TfLiteFloatArray*)&quant167_scale, (TfLiteIntArray*)&quant167_zero, 0 };
const TfArray<4, int> tensor_dimension168 = { 4, { 1,1,1,48 } };
const TfArray<1, float> quant168_scale = { 1, { 0.01133207231760025, } };
const TfArray<1, int> quant168_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant168 = { (TfLiteFloatArray*)&quant168_scale, (TfLiteIntArray*)&quant168_zero, 0 };
const TfArray<4, int> tensor_dimension169 = { 4, { 1,1,1,48 } };
const TfArray<1, float> quant169_scale = { 1, { 0.018726060166954994, } };
const TfArray<1, int> quant169_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant169 = { (TfLiteFloatArray*)&quant169_scale, (TfLiteIntArray*)&quant169_zero, 0 };
const TfArray<4, int> tensor_dimension170 = { 4, { 1,1,1,8 } };
const TfArray<1, float> quant170_scale = { 1, { 0.015708185732364655, } };
const TfArray<1, int> quant170_zero = { 1, { -30 } };
const TfLiteAffineQuantization quant170 = { (TfLiteFloatArray*)&quant170_scale, (TfLiteIntArray*)&quant170_zero, 0 };
const TfArray<4, int> tensor_dimension171 = { 4, { 1,1,1,8 } };
const TfArray<1, float> quant171_scale = { 1, { 0.02822662889957428, } };
const TfArray<1, int> quant171_zero = { 1, { 2 } };
const TfLiteAffineQuantization quant171 = { (TfLiteFloatArray*)&quant171_scale, (TfLiteIntArray*)&quant171_zero, 0 };
const TfArray<4, int> tensor_dimension172 = { 4, { 1,1,1,48 } };
const TfArray<1, float> quant172_scale = { 1, { 0.010722917504608631, } };
const TfArray<1, int> quant172_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant172 = { (TfLiteFloatArray*)&quant172_scale, (TfLiteIntArray*)&quant172_zero, 0 };
const TfArray<4, int> tensor_dimension173 = { 4, { 1,1,1,48 } };
const TfArray<1, float> quant173_scale = { 1, { 0.01286808867007494, } };
const TfArray<1, int> quant173_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant173 = { (TfLiteFloatArray*)&quant173_scale, (TfLiteIntArray*)&quant173_zero, 0 };
const TfArray<4, int> tensor_dimension174 = { 4, { 1,1,1,8 } };
const TfArray<1, float> quant174_scale = { 1, { 0.0092702973634004593, } };
const TfArray<1, int> quant174_zero = { 1, { -4 } };
const TfLiteAffineQuantization quant174 = { (TfLiteFloatArray*)&quant174_scale, (TfLiteIntArray*)&quant174_zero, 0 };
const TfArray<4, int> tensor_dimension175 = { 4, { 1,1,1,8 } };
const TfArray<1, float> quant175_scale = { 1, { 0.028341356664896011, } };
const TfArray<1, int> quant175_zero = { 1, { -6 } };
const TfLiteAffineQuantization quant175 = { (TfLiteFloatArray*)&quant175_scale, (TfLiteIntArray*)&quant175_zero, 0 };
const TfArray<4, int> tensor_dimension176 = { 4, { 1,1,1,48 } };
const TfArray<1, float> quant176_scale = { 1, { 0.01065572164952755, } };
const TfArray<1, int> quant176_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant176 = { (TfLiteFloatArray*)&quant176_scale, (TfLiteIntArray*)&quant176_zero, 0 };
const TfArray<4, int> tensor_dimension177 = { 4, { 1,1,1,48 } };
const TfArray<1, float> quant177_scale = { 1, { 0.014173149131238461, } };
const TfArray<1, int> quant177_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant177 = { (TfLiteFloatArray*)&quant177_scale, (TfLiteIntArray*)&quant177_zero, 0 };
const TfArray<4, int> tensor_dimension178 = { 4, { 1,1,1,16 } };
const TfArray<1, float> quant178_scale = { 1, { 0.029987622052431107, } };
const TfArray<1, int> quant178_zero = { 1, { 1 } };
const TfLiteAffineQuantization quant178 = { (TfLiteFloatArray*)&quant178_scale, (TfLiteIntArray*)&quant178_zero, 0 };
const TfArray<4, int> tensor_dimension179 = { 4, { 1,1,1,1280 } };
const TfArray<1, float> quant179_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant179_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant179 = { (TfLiteFloatArray*)&quant179_scale, (TfLiteIntArray*)&quant179_zero, 0 };
const TfArray<2, int> tensor_dimension180 = { 2, { 1,1280 } };
const TfArray<1, float> quant180_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant180_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant180 = { (TfLiteFloatArray*)&quant180_scale, (TfLiteIntArray*)&quant180_zero, 0 };
const TfArray<2, int> tensor_dimension181 = { 2, { 1,10 } };
const TfArray<1, float> quant181_scale = { 1, { 0.029273549094796181, } };
const TfArray<1, int> quant181_zero = { 1, { 22 } };
const TfLiteAffineQuantization quant181 = { (TfLiteFloatArray*)&quant181_scale, (TfLiteIntArray*)&quant181_zero, 0 };
const TfArray<2, int> tensor_dimension182 = { 2, { 1,3 } };
const TfArray<1, float> quant182_scale = { 1, { 0.04204825684428215, } };
const TfArray<1, int> quant182_zero = { 1, { -7 } };
const TfLiteAffineQuantization quant182 = { (TfLiteFloatArray*)&quant182_scale, (TfLiteIntArray*)&quant182_zero, 0 };
const TfArray<2, int> tensor_dimension183 = { 2, { 1,3 } };
const TfArray<1, float> quant183_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant183_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant183 = { (TfLiteFloatArray*)&quant183_scale, (TfLiteIntArray*)&quant183_zero, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,1 } };
const TfArray<1, int> outputs0 = { 1, { 111 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingValid, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 111,42,5 } };
const TfArray<1, int> outputs1 = { 1, { 112 } };
const TfLiteDepthwiseConvParams opdata2 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 112,77,34 } };
const TfArray<1, int> outputs2 = { 1, { 113 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 113,43,78 } };
const TfArray<1, int> outputs3 = { 1, { 114 } };
const TfLiteAddParams opdata4 = { kTfLiteActNone };
const TfArray<2, int> inputs4 = { 2, { 112,114 } };
const TfArray<1, int> outputs4 = { 1, { 115 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 115,44,12 } };
const TfArray<1, int> outputs5 = { 1, { 116 } };
const TfArray<2, int> inputs6 = { 2, { 116,1 } };
const TfArray<1, int> outputs6 = { 1, { 117 } };
const TfLiteDepthwiseConvParams opdata7 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 117,79,20 } };
const TfArray<1, int> outputs7 = { 1, { 118 } };
const TfLiteConvParams opdata8 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 118,45,80 } };
const TfArray<1, int> outputs8 = { 1, { 119 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 119,46,31 } };
const TfArray<1, int> outputs9 = { 1, { 120 } };
const TfLiteDepthwiseConvParams opdata10 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs10 = { 3, { 120,81,32 } };
const TfArray<1, int> outputs10 = { 1, { 121 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 121,47,82 } };
const TfArray<1, int> outputs11 = { 1, { 122 } };
const TfLiteAddParams opdata12 = { kTfLiteActNone };
const TfArray<2, int> inputs12 = { 2, { 119,122 } };
const TfArray<1, int> outputs12 = { 1, { 123 } };
const TfLiteConvParams opdata13 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 123,48,33 } };
const TfArray<1, int> outputs13 = { 1, { 124 } };
const TfArray<2, int> inputs14 = { 2, { 124,1 } };
const TfArray<1, int> outputs14 = { 1, { 125 } };
const TfLiteDepthwiseConvParams opdata15 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 125,83,35 } };
const TfArray<1, int> outputs15 = { 1, { 126 } };
const TfLiteConvParams opdata16 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 126,49,84 } };
const TfArray<1, int> outputs16 = { 1, { 127 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 127,50,36 } };
const TfArray<1, int> outputs17 = { 1, { 128 } };
const TfLiteDepthwiseConvParams opdata18 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs18 = { 3, { 128,85,37 } };
const TfArray<1, int> outputs18 = { 1, { 129 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 129,51,86 } };
const TfArray<1, int> outputs19 = { 1, { 130 } };
const TfLiteAddParams opdata20 = { kTfLiteActNone };
const TfArray<2, int> inputs20 = { 2, { 127,130 } };
const TfArray<1, int> outputs20 = { 1, { 131 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 131,52,38 } };
const TfArray<1, int> outputs21 = { 1, { 132 } };
const TfLiteDepthwiseConvParams opdata22 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs22 = { 3, { 132,87,39 } };
const TfArray<1, int> outputs22 = { 1, { 133 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 133,53,88 } };
const TfArray<1, int> outputs23 = { 1, { 134 } };
const TfLiteAddParams opdata24 = { kTfLiteActNone };
const TfArray<2, int> inputs24 = { 2, { 131,134 } };
const TfArray<1, int> outputs24 = { 1, { 135 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 135,54,40 } };
const TfArray<1, int> outputs25 = { 1, { 136 } };
const TfArray<2, int> inputs26 = { 2, { 136,1 } };
const TfArray<1, int> outputs26 = { 1, { 137 } };
const TfLiteDepthwiseConvParams opdata27 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs27 = { 3, { 137,89,41 } };
const TfArray<1, int> outputs27 = { 1, { 138 } };
const TfLiteConvParams opdata28 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs28 = { 3, { 138,55,90 } };
const TfArray<1, int> outputs28 = { 1, { 139 } };
const TfLiteConvParams opdata29 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs29 = { 3, { 139,56,6 } };
const TfArray<1, int> outputs29 = { 1, { 140 } };
const TfLiteDepthwiseConvParams opdata30 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs30 = { 3, { 140,91,7 } };
const TfArray<1, int> outputs30 = { 1, { 141 } };
const TfLiteConvParams opdata31 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs31 = { 3, { 141,57,92 } };
const TfArray<1, int> outputs31 = { 1, { 142 } };
const TfLiteAddParams opdata32 = { kTfLiteActNone };
const TfArray<2, int> inputs32 = { 2, { 139,142 } };
const TfArray<1, int> outputs32 = { 1, { 143 } };
const TfLiteConvParams opdata33 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs33 = { 3, { 143,58,8 } };
const TfArray<1, int> outputs33 = { 1, { 144 } };
const TfLiteDepthwiseConvParams opdata34 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs34 = { 3, { 144,93,9 } };
const TfArray<1, int> outputs34 = { 1, { 145 } };
const TfLiteConvParams opdata35 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs35 = { 3, { 145,59,94 } };
const TfArray<1, int> outputs35 = { 1, { 146 } };
const TfLiteAddParams opdata36 = { kTfLiteActNone };
const TfArray<2, int> inputs36 = { 2, { 143,146 } };
const TfArray<1, int> outputs36 = { 1, { 147 } };
const TfLiteConvParams opdata37 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs37 = { 3, { 147,60,10 } };
const TfArray<1, int> outputs37 = { 1, { 148 } };
const TfLiteDepthwiseConvParams opdata38 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs38 = { 3, { 148,95,11 } };
const TfArray<1, int> outputs38 = { 1, { 149 } };
const TfLiteConvParams opdata39 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs39 = { 3, { 149,61,96 } };
const TfArray<1, int> outputs39 = { 1, { 150 } };
const TfLiteAddParams opdata40 = { kTfLiteActNone };
const TfArray<2, int> inputs40 = { 2, { 147,150 } };
const TfArray<1, int> outputs40 = { 1, { 151 } };
const TfLiteConvParams opdata41 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs41 = { 3, { 151,62,13 } };
const TfArray<1, int> outputs41 = { 1, { 152 } };
const TfLiteDepthwiseConvParams opdata42 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs42 = { 3, { 152,97,14 } };
const TfArray<1, int> outputs42 = { 1, { 153 } };
const TfLiteConvParams opdata43 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs43 = { 3, { 153,63,98 } };
const TfArray<1, int> outputs43 = { 1, { 154 } };
const TfLiteAddParams opdata44 = { kTfLiteActNone };
const TfArray<2, int> inputs44 = { 2, { 151,154 } };
const TfArray<1, int> outputs44 = { 1, { 155 } };
const TfLiteConvParams opdata45 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs45 = { 3, { 155,64,15 } };
const TfArray<1, int> outputs45 = { 1, { 156 } };
const TfLiteDepthwiseConvParams opdata46 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs46 = { 3, { 156,99,16 } };
const TfArray<1, int> outputs46 = { 1, { 157 } };
const TfLiteConvParams opdata47 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs47 = { 3, { 157,65,100 } };
const TfArray<1, int> outputs47 = { 1, { 158 } };
const TfLiteAddParams opdata48 = { kTfLiteActNone };
const TfArray<2, int> inputs48 = { 2, { 155,158 } };
const TfArray<1, int> outputs48 = { 1, { 159 } };
const TfLiteConvParams opdata49 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs49 = { 3, { 159,66,17 } };
const TfArray<1, int> outputs49 = { 1, { 160 } };
const TfLiteDepthwiseConvParams opdata50 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs50 = { 3, { 160,101,18 } };
const TfArray<1, int> outputs50 = { 1, { 161 } };
const TfLiteConvParams opdata51 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs51 = { 3, { 161,67,102 } };
const TfArray<1, int> outputs51 = { 1, { 162 } };
const TfLiteAddParams opdata52 = { kTfLiteActNone };
const TfArray<2, int> inputs52 = { 2, { 159,162 } };
const TfArray<1, int> outputs52 = { 1, { 163 } };
const TfLiteConvParams opdata53 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs53 = { 3, { 163,68,19 } };
const TfArray<1, int> outputs53 = { 1, { 164 } };
const TfArray<2, int> inputs54 = { 2, { 164,1 } };
const TfArray<1, int> outputs54 = { 1, { 165 } };
const TfLiteDepthwiseConvParams opdata55 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs55 = { 3, { 165,103,21 } };
const TfArray<1, int> outputs55 = { 1, { 166 } };
const TfLiteConvParams opdata56 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs56 = { 3, { 166,69,104 } };
const TfArray<1, int> outputs56 = { 1, { 167 } };
const TfLiteConvParams opdata57 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs57 = { 3, { 167,70,22 } };
const TfArray<1, int> outputs57 = { 1, { 168 } };
const TfLiteDepthwiseConvParams opdata58 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs58 = { 3, { 168,105,23 } };
const TfArray<1, int> outputs58 = { 1, { 169 } };
const TfLiteConvParams opdata59 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs59 = { 3, { 169,71,106 } };
const TfArray<1, int> outputs59 = { 1, { 170 } };
const TfLiteAddParams opdata60 = { kTfLiteActNone };
const TfArray<2, int> inputs60 = { 2, { 167,170 } };
const TfArray<1, int> outputs60 = { 1, { 171 } };
const TfLiteConvParams opdata61 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs61 = { 3, { 171,72,24 } };
const TfArray<1, int> outputs61 = { 1, { 172 } };
const TfLiteDepthwiseConvParams opdata62 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs62 = { 3, { 172,107,25 } };
const TfArray<1, int> outputs62 = { 1, { 173 } };
const TfLiteConvParams opdata63 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs63 = { 3, { 173,73,108 } };
const TfArray<1, int> outputs63 = { 1, { 174 } };
const TfLiteAddParams opdata64 = { kTfLiteActNone };
const TfArray<2, int> inputs64 = { 2, { 171,174 } };
const TfArray<1, int> outputs64 = { 1, { 175 } };
const TfLiteConvParams opdata65 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs65 = { 3, { 175,74,26 } };
const TfArray<1, int> outputs65 = { 1, { 176 } };
const TfLiteDepthwiseConvParams opdata66 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs66 = { 3, { 176,109,27 } };
const TfArray<1, int> outputs66 = { 1, { 177 } };
const TfLiteConvParams opdata67 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs67 = { 3, { 177,75,110 } };
const TfArray<1, int> outputs67 = { 1, { 178 } };
const TfLiteConvParams opdata68 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs68 = { 3, { 178,76,28 } };
const TfArray<1, int> outputs68 = { 1, { 179 } };
const TfLiteReshapeParams opdata69 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs69 = { 2, { 179,4 } };
const TfArray<1, int> outputs69 = { 1, { 180 } };
const TfLiteFullyConnectedParams opdata70 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs70 = { 3, { 180,29,2 } };
const TfArray<1, int> outputs70 = { 1, { 181 } };
const TfLiteFullyConnectedParams opdata71 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs71 = { 3, { 181,30,3 } };
const TfArray<1, int> outputs71 = { 1, { 182 } };
const TfLiteSoftmaxParams opdata72 = { 1 };
const TfArray<1, int> inputs72 = { 1, { 182 } };
const TfArray<1, int> outputs72 = { 1, { 183 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1104, (TfLiteIntArray*)&tensor_dimension0, 1024, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 40, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data16, (TfLiteIntArray*)&tensor_dimension16, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data17, (TfLiteIntArray*)&tensor_dimension17, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data18, (TfLiteIntArray*)&tensor_dimension18, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data19, (TfLiteIntArray*)&tensor_dimension19, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data20, (TfLiteIntArray*)&tensor_dimension20, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data21, (TfLiteIntArray*)&tensor_dimension21, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data22, (TfLiteIntArray*)&tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data23, (TfLiteIntArray*)&tensor_dimension23, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant23))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data24, (TfLiteIntArray*)&tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data25, (TfLiteIntArray*)&tensor_dimension25, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant25))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data26, (TfLiteIntArray*)&tensor_dimension26, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data27, (TfLiteIntArray*)&tensor_dimension27, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant27))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data28, (TfLiteIntArray*)&tensor_dimension28, 5120, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant28))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data29, (TfLiteIntArray*)&tensor_dimension29, 12800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant29))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data30, (TfLiteIntArray*)&tensor_dimension30, 30, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant30))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data31, (TfLiteIntArray*)&tensor_dimension31, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant31))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data32, (TfLiteIntArray*)&tensor_dimension32, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant32))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data33, (TfLiteIntArray*)&tensor_dimension33, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant33))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data34, (TfLiteIntArray*)&tensor_dimension34, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant34))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data35, (TfLiteIntArray*)&tensor_dimension35, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant35))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data36, (TfLiteIntArray*)&tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant36))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data37, (TfLiteIntArray*)&tensor_dimension37, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant37))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data38, (TfLiteIntArray*)&tensor_dimension38, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant38))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data39, (TfLiteIntArray*)&tensor_dimension39, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant39))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data40, (TfLiteIntArray*)&tensor_dimension40, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant40))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data41, (TfLiteIntArray*)&tensor_dimension41, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant41))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data42, (TfLiteIntArray*)&tensor_dimension42, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant42))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data43, (TfLiteIntArray*)&tensor_dimension43, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant43))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data44, (TfLiteIntArray*)&tensor_dimension44, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant44))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data45, (TfLiteIntArray*)&tensor_dimension45, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant45))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data46, (TfLiteIntArray*)&tensor_dimension46, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant46))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data47, (TfLiteIntArray*)&tensor_dimension47, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant47))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data48, (TfLiteIntArray*)&tensor_dimension48, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant48))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data49, (TfLiteIntArray*)&tensor_dimension49, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant49))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data50, (TfLiteIntArray*)&tensor_dimension50, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant50))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data51, (TfLiteIntArray*)&tensor_dimension51, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant51))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data52, (TfLiteIntArray*)&tensor_dimension52, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant52))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data53, (TfLiteIntArray*)&tensor_dimension53, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant53))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data54, (TfLiteIntArray*)&tensor_dimension54, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant54))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data55, (TfLiteIntArray*)&tensor_dimension55, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant55))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data56, (TfLiteIntArray*)&tensor_dimension56, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant56))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data57, (TfLiteIntArray*)&tensor_dimension57, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant57))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data58, (TfLiteIntArray*)&tensor_dimension58, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant58))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data59, (TfLiteIntArray*)&tensor_dimension59, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant59))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data60, (TfLiteIntArray*)&tensor_dimension60, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant60))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data61, (TfLiteIntArray*)&tensor_dimension61, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant61))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data62, (TfLiteIntArray*)&tensor_dimension62, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant62))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data63, (TfLiteIntArray*)&tensor_dimension63, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant63))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data64, (TfLiteIntArray*)&tensor_dimension64, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant64))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data65, (TfLiteIntArray*)&tensor_dimension65, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant65))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data66, (TfLiteIntArray*)&tensor_dimension66, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant66))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data67, (TfLiteIntArray*)&tensor_dimension67, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant67))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data68, (TfLiteIntArray*)&tensor_dimension68, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant68))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data69, (TfLiteIntArray*)&tensor_dimension69, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant69))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data70, (TfLiteIntArray*)&tensor_dimension70, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant70))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data71, (TfLiteIntArray*)&tensor_dimension71, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant71))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data72, (TfLiteIntArray*)&tensor_dimension72, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant72))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data73, (TfLiteIntArray*)&tensor_dimension73, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant73))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data74, (TfLiteIntArray*)&tensor_dimension74, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant74))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data75, (TfLiteIntArray*)&tensor_dimension75, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant75))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data76, (TfLiteIntArray*)&tensor_dimension76, 20480, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant76))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data77, (TfLiteIntArray*)&tensor_dimension77, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant77))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data78, (TfLiteIntArray*)&tensor_dimension78, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant78))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data79, (TfLiteIntArray*)&tensor_dimension79, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant79))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data80, (TfLiteIntArray*)&tensor_dimension80, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant80))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data81, (TfLiteIntArray*)&tensor_dimension81, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant81))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data82, (TfLiteIntArray*)&tensor_dimension82, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant82))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data83, (TfLiteIntArray*)&tensor_dimension83, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant83))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data84, (TfLiteIntArray*)&tensor_dimension84, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant84))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data85, (TfLiteIntArray*)&tensor_dimension85, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant85))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data86, (TfLiteIntArray*)&tensor_dimension86, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant86))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data87, (TfLiteIntArray*)&tensor_dimension87, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant87))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data88, (TfLiteIntArray*)&tensor_dimension88, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant88))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data89, (TfLiteIntArray*)&tensor_dimension89, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant89))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data90, (TfLiteIntArray*)&tensor_dimension90, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant90))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data91, (TfLiteIntArray*)&tensor_dimension91, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant91))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data92, (TfLiteIntArray*)&tensor_dimension92, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant92))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data93, (TfLiteIntArray*)&tensor_dimension93, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant93))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data94, (TfLiteIntArray*)&tensor_dimension94, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant94))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data95, (TfLiteIntArray*)&tensor_dimension95, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant95))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data96, (TfLiteIntArray*)&tensor_dimension96, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant96))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data97, (TfLiteIntArray*)&tensor_dimension97, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant97))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data98, (TfLiteIntArray*)&tensor_dimension98, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant98))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data99, (TfLiteIntArray*)&tensor_dimension99, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant99))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data100, (TfLiteIntArray*)&tensor_dimension100, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant100))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data101, (TfLiteIntArray*)&tensor_dimension101, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant101))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data102, (TfLiteIntArray*)&tensor_dimension102, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant102))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data103, (TfLiteIntArray*)&tensor_dimension103, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant103))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data104, (TfLiteIntArray*)&tensor_dimension104, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant104))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data105, (TfLiteIntArray*)&tensor_dimension105, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant105))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data106, (TfLiteIntArray*)&tensor_dimension106, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant106))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data107, (TfLiteIntArray*)&tensor_dimension107, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant107))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data108, (TfLiteIntArray*)&tensor_dimension108, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant108))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data109, (TfLiteIntArray*)&tensor_dimension109, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant109))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data110, (TfLiteIntArray*)&tensor_dimension110, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant110))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension111, 1089, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant111))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 4096, (TfLiteIntArray*)&tensor_dimension112, 2048, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant112))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension113, 2048, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant113))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 2048, (TfLiteIntArray*)&tensor_dimension114, 2048, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant114))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension115, 2048, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant115))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13872, (TfLiteIntArray*)&tensor_dimension116, 12288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant116))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension117, 13872, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant117))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13872, (TfLiteIntArray*)&tensor_dimension118, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant118))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 6144, (TfLiteIntArray*)&tensor_dimension119, 512, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant119))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3072, (TfLiteIntArray*)&tensor_dimension120, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant120))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension121, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant121))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3072, (TfLiteIntArray*)&tensor_dimension122, 512, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant122))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension123, 512, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant123))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3888, (TfLiteIntArray*)&tensor_dimension124, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant124))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension125, 3888, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant125))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3888, (TfLiteIntArray*)&tensor_dimension126, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant126))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1664, (TfLiteIntArray*)&tensor_dimension127, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant127))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 768, (TfLiteIntArray*)&tensor_dimension128, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant128))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension129, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant129))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 768, (TfLiteIntArray*)&tensor_dimension130, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant130))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1536, (TfLiteIntArray*)&tensor_dimension131, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant131))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 768, (TfLiteIntArray*)&tensor_dimension132, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant132))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension133, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant133))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 768, (TfLiteIntArray*)&tensor_dimension134, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant134))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension135, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant135))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1200, (TfLiteIntArray*)&tensor_dimension136, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant136))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension137, 1200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant137))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1200, (TfLiteIntArray*)&tensor_dimension138, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant138))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 416, (TfLiteIntArray*)&tensor_dimension139, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant139))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 192, (TfLiteIntArray*)&tensor_dimension140, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant140))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension141, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant141))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 192, (TfLiteIntArray*)&tensor_dimension142, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant142))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 384, (TfLiteIntArray*)&tensor_dimension143, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant143))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 192, (TfLiteIntArray*)&tensor_dimension144, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant144))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension145, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant145))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 192, (TfLiteIntArray*)&tensor_dimension146, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant146))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 416, (TfLiteIntArray*)&tensor_dimension147, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant147))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 192, (TfLiteIntArray*)&tensor_dimension148, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant148))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension149, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant149))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 192, (TfLiteIntArray*)&tensor_dimension150, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant150))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 384, (TfLiteIntArray*)&tensor_dimension151, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant151))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 192, (TfLiteIntArray*)&tensor_dimension152, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant152))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension153, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant153))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 192, (TfLiteIntArray*)&tensor_dimension154, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant154))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 416, (TfLiteIntArray*)&tensor_dimension155, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant155))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 192, (TfLiteIntArray*)&tensor_dimension156, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant156))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension157, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant157))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 192, (TfLiteIntArray*)&tensor_dimension158, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant158))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 384, (TfLiteIntArray*)&tensor_dimension159, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant159))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 192, (TfLiteIntArray*)&tensor_dimension160, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant160))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension161, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant161))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 192, (TfLiteIntArray*)&tensor_dimension162, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant162))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension163, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant163))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 432, (TfLiteIntArray*)&tensor_dimension164, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant164))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension165, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant165))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 432, (TfLiteIntArray*)&tensor_dimension166, 48, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant166))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 112, (TfLiteIntArray*)&tensor_dimension167, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant167))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 48, (TfLiteIntArray*)&tensor_dimension168, 48, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant168))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension169, 48, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant169))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 48, (TfLiteIntArray*)&tensor_dimension170, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant170))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 96, (TfLiteIntArray*)&tensor_dimension171, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant171))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 48, (TfLiteIntArray*)&tensor_dimension172, 48, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant172))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension173, 48, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant173))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 48, (TfLiteIntArray*)&tensor_dimension174, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant174))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension175, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant175))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 48, (TfLiteIntArray*)&tensor_dimension176, 48, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant176))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension177, 48, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant177))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 48, (TfLiteIntArray*)&tensor_dimension178, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant178))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1280, (TfLiteIntArray*)&tensor_dimension179, 1280, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant179))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension180, 1280, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant180))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1280, (TfLiteIntArray*)&tensor_dimension181, 10, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant181))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 16, (TfLiteIntArray*)&tensor_dimension182, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant182))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension183, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant183))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_ADD, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, const_cast<void*>(static_cast<const void*>(&opdata12)), OP_ADD, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, const_cast<void*>(static_cast<const void*>(&opdata13)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs15, (TfLiteIntArray*)&outputs15, const_cast<void*>(static_cast<const void*>(&opdata15)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs16, (TfLiteIntArray*)&outputs16, const_cast<void*>(static_cast<const void*>(&opdata16)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs17, (TfLiteIntArray*)&outputs17, const_cast<void*>(static_cast<const void*>(&opdata17)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs18, (TfLiteIntArray*)&outputs18, const_cast<void*>(static_cast<const void*>(&opdata18)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs19, (TfLiteIntArray*)&outputs19, const_cast<void*>(static_cast<const void*>(&opdata19)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs20, (TfLiteIntArray*)&outputs20, const_cast<void*>(static_cast<const void*>(&opdata20)), OP_ADD, },
  { (TfLiteIntArray*)&inputs21, (TfLiteIntArray*)&outputs21, const_cast<void*>(static_cast<const void*>(&opdata21)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs22, (TfLiteIntArray*)&outputs22, const_cast<void*>(static_cast<const void*>(&opdata22)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs23, (TfLiteIntArray*)&outputs23, const_cast<void*>(static_cast<const void*>(&opdata23)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs24, (TfLiteIntArray*)&outputs24, const_cast<void*>(static_cast<const void*>(&opdata24)), OP_ADD, },
  { (TfLiteIntArray*)&inputs25, (TfLiteIntArray*)&outputs25, const_cast<void*>(static_cast<const void*>(&opdata25)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs26, (TfLiteIntArray*)&outputs26, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs27, (TfLiteIntArray*)&outputs27, const_cast<void*>(static_cast<const void*>(&opdata27)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs28, (TfLiteIntArray*)&outputs28, const_cast<void*>(static_cast<const void*>(&opdata28)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs29, (TfLiteIntArray*)&outputs29, const_cast<void*>(static_cast<const void*>(&opdata29)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs30, (TfLiteIntArray*)&outputs30, const_cast<void*>(static_cast<const void*>(&opdata30)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs31, (TfLiteIntArray*)&outputs31, const_cast<void*>(static_cast<const void*>(&opdata31)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs32, (TfLiteIntArray*)&outputs32, const_cast<void*>(static_cast<const void*>(&opdata32)), OP_ADD, },
  { (TfLiteIntArray*)&inputs33, (TfLiteIntArray*)&outputs33, const_cast<void*>(static_cast<const void*>(&opdata33)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs34, (TfLiteIntArray*)&outputs34, const_cast<void*>(static_cast<const void*>(&opdata34)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs35, (TfLiteIntArray*)&outputs35, const_cast<void*>(static_cast<const void*>(&opdata35)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs36, (TfLiteIntArray*)&outputs36, const_cast<void*>(static_cast<const void*>(&opdata36)), OP_ADD, },
  { (TfLiteIntArray*)&inputs37, (TfLiteIntArray*)&outputs37, const_cast<void*>(static_cast<const void*>(&opdata37)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs38, (TfLiteIntArray*)&outputs38, const_cast<void*>(static_cast<const void*>(&opdata38)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs39, (TfLiteIntArray*)&outputs39, const_cast<void*>(static_cast<const void*>(&opdata39)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs40, (TfLiteIntArray*)&outputs40, const_cast<void*>(static_cast<const void*>(&opdata40)), OP_ADD, },
  { (TfLiteIntArray*)&inputs41, (TfLiteIntArray*)&outputs41, const_cast<void*>(static_cast<const void*>(&opdata41)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs42, (TfLiteIntArray*)&outputs42, const_cast<void*>(static_cast<const void*>(&opdata42)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs43, (TfLiteIntArray*)&outputs43, const_cast<void*>(static_cast<const void*>(&opdata43)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs44, (TfLiteIntArray*)&outputs44, const_cast<void*>(static_cast<const void*>(&opdata44)), OP_ADD, },
  { (TfLiteIntArray*)&inputs45, (TfLiteIntArray*)&outputs45, const_cast<void*>(static_cast<const void*>(&opdata45)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs46, (TfLiteIntArray*)&outputs46, const_cast<void*>(static_cast<const void*>(&opdata46)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs47, (TfLiteIntArray*)&outputs47, const_cast<void*>(static_cast<const void*>(&opdata47)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs48, (TfLiteIntArray*)&outputs48, const_cast<void*>(static_cast<const void*>(&opdata48)), OP_ADD, },
  { (TfLiteIntArray*)&inputs49, (TfLiteIntArray*)&outputs49, const_cast<void*>(static_cast<const void*>(&opdata49)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs50, (TfLiteIntArray*)&outputs50, const_cast<void*>(static_cast<const void*>(&opdata50)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs51, (TfLiteIntArray*)&outputs51, const_cast<void*>(static_cast<const void*>(&opdata51)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs52, (TfLiteIntArray*)&outputs52, const_cast<void*>(static_cast<const void*>(&opdata52)), OP_ADD, },
  { (TfLiteIntArray*)&inputs53, (TfLiteIntArray*)&outputs53, const_cast<void*>(static_cast<const void*>(&opdata53)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs54, (TfLiteIntArray*)&outputs54, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs55, (TfLiteIntArray*)&outputs55, const_cast<void*>(static_cast<const void*>(&opdata55)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs56, (TfLiteIntArray*)&outputs56, const_cast<void*>(static_cast<const void*>(&opdata56)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs57, (TfLiteIntArray*)&outputs57, const_cast<void*>(static_cast<const void*>(&opdata57)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs58, (TfLiteIntArray*)&outputs58, const_cast<void*>(static_cast<const void*>(&opdata58)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs59, (TfLiteIntArray*)&outputs59, const_cast<void*>(static_cast<const void*>(&opdata59)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs60, (TfLiteIntArray*)&outputs60, const_cast<void*>(static_cast<const void*>(&opdata60)), OP_ADD, },
  { (TfLiteIntArray*)&inputs61, (TfLiteIntArray*)&outputs61, const_cast<void*>(static_cast<const void*>(&opdata61)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs62, (TfLiteIntArray*)&outputs62, const_cast<void*>(static_cast<const void*>(&opdata62)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs63, (TfLiteIntArray*)&outputs63, const_cast<void*>(static_cast<const void*>(&opdata63)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs64, (TfLiteIntArray*)&outputs64, const_cast<void*>(static_cast<const void*>(&opdata64)), OP_ADD, },
  { (TfLiteIntArray*)&inputs65, (TfLiteIntArray*)&outputs65, const_cast<void*>(static_cast<const void*>(&opdata65)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs66, (TfLiteIntArray*)&outputs66, const_cast<void*>(static_cast<const void*>(&opdata66)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs67, (TfLiteIntArray*)&outputs67, const_cast<void*>(static_cast<const void*>(&opdata67)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs68, (TfLiteIntArray*)&outputs68, const_cast<void*>(static_cast<const void*>(&opdata68)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs69, (TfLiteIntArray*)&outputs69, const_cast<void*>(static_cast<const void*>(&opdata69)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs70, (TfLiteIntArray*)&outputs70, const_cast<void*>(static_cast<const void*>(&opdata70)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs71, (TfLiteIntArray*)&outputs71, const_cast<void*>(static_cast<const void*>(&opdata71)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs72, (TfLiteIntArray*)&outputs72, const_cast<void*>(static_cast<const void*>(&opdata72)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static TfLiteStatus AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                                 size_t bytes, void** ptr) {
  if (current_location - bytes < tensor_boundary) {
    ei_printf("AllocatePersistentBuffer that did not fit %lu\n", bytes);
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    *ptr = malloc(bytes);
    if (*ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %u\n", bytes);
      return kTfLiteError;
    }
    overflow_buffers.push_back(*ptr);
    return kTfLiteOk;
  }

  current_location -= bytes;

  *ptr = current_location;
  return kTfLiteOk;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  TfLiteStatus s = AllocatePersistentBuffer(ctx, b.bytes, &b.ptr);
  if (s != kTfLiteOk) {
    return s;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}
} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#if EI_CLASSIFIER_ALLOCATION == EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  current_location = tensor_arena + kTensorArenaSize;
  tensor_boundary = tensor_arena;
#endif
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 184;
  for(size_t i = 0; i < 184; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;
    #if EI_CLASSIFIER_ALLOCATION == EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    #if EI_CLASSIFIER_ALLOCATION == EI_CLASSIFIER_ALLOCATION_HEAP
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
      uint8_t* end = start + tensorData[i].bytes;

     tflTensors[i].data.data =  start;

     if (end > tensor_boundary) {
       tensor_boundary = end;
     }
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION == EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
  }
  registrations[OP_PAD] = *tflite::ops::micro::Register_PAD();
  registrations[OP_CONV_2D] = *tflite::ops::micro::Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = *tflite::ops::micro::Register_DEPTHWISE_CONV_2D();
  registrations[OP_ADD] = *tflite::ops::micro::Register_ADD();
  registrations[OP_RESHAPE] = *tflite::ops::micro::Register_RESHAPE();
  registrations[OP_FULLY_CONNECTED] = *tflite::ops::micro::Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = *tflite::ops::micro::Register_SOFTMAX();

  for(size_t i = 0; i < 73; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
    tflNodes[i].custom_initial_data = nullptr;
    tflNodes[i].custom_initial_data_size = 0;
    if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 73; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0,
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  183,
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 73; ++i) {
    ei_printf("trained_model_invoke %lu invoke=%p\n", i, registrations[nodeData[i].used_op_index].invoke);
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);
    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
  free_fnc(tensor_arena);
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
